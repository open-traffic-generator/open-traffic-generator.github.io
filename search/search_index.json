{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Open Traffic Generator (OTG) APIs and data models are northbound API specifications for modern Traffic Generators and Protocol Emulators designed to test Layer 2-7 network devices. They include support for testing  forwarding as well as control planes. OTG APIs are:</p> <ul> <li>Open</li> <li>Vendor-neutral</li> <li>Intent-based</li> <li>Declarative</li> </ul> <p>The formal model specification can be found on GitHub under Open Traffic Generator organization. To explore the model, a viewer friendly ReDoc rendering is available as well. The OTG APIs support both REST and gRPC interfaces.</p>"},{"location":"#features","title":"Features","text":"<p>OTG is an actively developed specification, with contributions from real use cases. The model defines the following components of a traffic generator configuration:</p> <ul> <li>Test Ports with Layer 1&amp;2 capabilities, including:<ul> <li>LLDP, LAG, LACP</li> </ul> </li> <li>Emulated Devices with Layer 2&amp;3 features:<ul> <li>IPv4, IPv6 interfaces</li> <li>ARP, IPv6 ND</li> <li>BGP, IS-IS routing protocols</li> </ul> </li> <li>Traffic Flows<ul> <li>associated with either Test Ports, or Emulated Devices</li> <li>expressing L2-4 properties like Ethernet, IPv4/IPv6, TCP/UDP</li> <li>stateless or stateful capabilities for transport protocols</li> <li>with implementation-specific application payload</li> </ul> </li> <li>Run-time Metrics and traffic Capture capabilities</li> </ul> <p></p> <p><sub>Fig. 1. OTG diagram with Traffic Flows between Emulated Devices, running via a Device Under Test (DUT)</sub></p>"},{"location":"#implementations","title":"Implementations","text":"<p>To apply OTG in practice, an OTG-compatible tool, typically a Traffic Generator, is needed. There are several implementations available, and the list is growing:</p> <ul> <li>Ixia-c Community Edition: container-based traffic generator from Keysight. The Community Edition supports up to 4 Test Ports and stateless layer 2-3 Traffic Flows</li> <li>Keysight Elastic Network Generator: commercial offering of OTG implementation for a family of Keysight/Ixia Traffic Generators</li> <li>IxNetwork: snappi-ixnetwork enables running OTG/snappi scripts with Keysight IxNetwork</li> <li>Magna: open-source OTG implementation from OpenConfig project</li> <li>TRex: snappi-trex enables running OTG/snappi scripts with TRex. Supports layer 2-3 Traffic Flows</li> <li>Spirent: stc-otg-setup enables running OTG/snappi scripts with STC. </li> </ul>"},{"location":"#clients","title":"Clients","text":"<p>There are multiple ways to communicate with a Traffic Generator via the OTG API:  </p> <ul> <li>otgen command-line tool is an easy way to start with</li> <li>snappi library to accelerate development of Test Programs written in Python or Go</li> <li>direct REST or gRPC calls as an alternative to using snappi</li> <li>custom OTG client applications</li> </ul> <p>snappi and gosnappi provide client side API libraries for the OTG specifications for Python and Golang respectively.  For other languages, SDKs can be built using OpenAPI Generator (for REST API) or protobuf tools (for gRPC).</p>"},{"location":"#use-cases","title":"Use Cases","text":"<p>Real use cases are the basis of OTG evolution. Notable open-source projects leveraging OTG:</p> <ul> <li>OpenConfig Feature Profiles</li> <li>SONiC Testbed</li> <li>SONiC-DASH CI Pipeline</li> </ul>"},{"location":"#community","title":"Community","text":"<p>Use our community resources to get help with Open Traffic Generator applications, develop your own implementation, or contribute to OTG:</p> <ul> <li>Open Traffic Generator on Github</li> <li>Ixia-c Slack Support Channel</li> <li>Contribution Guidelines</li> </ul>"},{"location":"clients/","title":"Clients","text":""},{"location":"clients/#overview","title":"Overview","text":"<p>To successfully use an OTG-based Traffic Generator, you need to be able to execute the following tasks over the OTG API:</p> <ul> <li>Prepare a Configuration and apply it to a Traffic Generator</li> <li>Control states of the configured objects like Protocols or Traffic Flows</li> <li>Collect and analyze Metrics reported by the Traffic Generator</li> </ul> <p>It is a job of an OTG Client to perform these tasks by communicating with a Traffic Generator via the OTG API. There are different types of such clients, and the choice between them depends on how and where you want to use a Traffic Generator.</p>"},{"location":"clients/#command-line-utilities","title":"Command-line Utilities","text":"<p>Command-line utilities are the fastest way to execute an OTG API request, especially in the environment without access to Python or Go development toolchains. They are also the easiest option to use by someone who is just starting with the OTG.</p> <p>The most basic utility for any kind of REST API calls, including OTG, is <code>curl</code>. But, it leaves all the knowledge of OTG to the user. See the curl section for examples of using it with OTG.</p> <p>On the other end of the spectrum is <code>otgen</code>. This command-line utility comes as part of OTG toolkit. It is capable of manipulating a wide range of OTG features while hiding a lot of complexity from a user. <code>otgen</code> is an excelent choice for a first time OTG user to become familiar with this ecosystem. It is also a great choice for an advanced user who needs to execute a common OTG scenario in an environment without a development toolchain. Continue reading about this utility in the otgen section.</p>"},{"location":"clients/#standalone-test-programs","title":"Standalone Test Programs","text":"<p>Standalone Test Programs can be developed in Python, Go or other programming languages. They might be useful to validate a particular scenario. For example, to measure a packet loss duration caused by an artificially introduced failure in the network. Typically, such programs would be executed directly when needed, sometimes from a shell script. Often, these programs are a part of a Proof of Concept setup, or a technology demonstration.</p> <p>To make use of the OTG API easier while developing such programs, snappi or gosnappi libraries should be leveraged. To find more information about these libraries follow to:</p> <ul> <li>snappi section for Python</li> <li>gosnappi section for Go</li> </ul>"},{"location":"clients/#testing-frameworks","title":"Testing Frameworks","text":"<p>Testing frameworks like Pytest are an established choice for implementing CI/CD pipelines that should run automatically without human intervention. When applied to network test, these pipelines provide opportunities such as:</p> <ul> <li>validate NOS upgrades on network equipment to identify any breaking changes early</li> <li>certify compatibility between layers in a disaggregated whitebox or SDN solution</li> <li>pre-screen network configuration changes to reduce outages</li> </ul> <p>This is the most common category of OTG applications as of today. Most, if not all OTG-based CI/CD pipelines make use of snappi or gosnappi libraries.</p>"},{"location":"coding/","title":"Coding","text":""},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic-configurations","title":"Basic Configurations","text":"<p>Here we provide a few sample OTG configuration files. See more information about these configurations.</p> <ul> <li>Single TCP Traffic Flow between two Traffic Ports</li> <li>Two Traffic Flows representing bi-directional UDP traffic between two Traffic Ports</li> <li>Single Traffic Flows representing TCP traffic between two Emulated Devices</li> </ul>"},{"location":"examples/#otg-examples","title":"OTG Examples","text":"<p>Open Traffic Generator examples repository is a great way to get started. It features typical setups with OTG-based traffic generators. See the list of available setups in OTG Examples section.</p>"},{"location":"examples/#use-cases","title":"Use Cases","text":"<p>Real use cases are the basis of OTG evolution. Notable open-source projects leveraging OTG:</p> <ul> <li>OpenConfig Feature Profiles</li> <li>SONiC Testbed</li> <li>SONiC-DASH CI Pipeline</li> </ul>"},{"location":"implementations/","title":"Implementations","text":""},{"location":"implementations/#overview","title":"Overview","text":"<p>To apply OTG in practice, an OTG-compatible tool, typically a Traffic Generator, is needed. There are several implementations available, and the list is growing:</p> <ul> <li>Ixia-c: containerized traffic generator from Keysight, with a Community Edition</li> <li>Keysight Elastic Network Generator: commercial offering of containerized Ixia-c Traffic Generator from Keysight</li> <li>IxNetwork: snappi-ixnetwork enables running OTG/snappi scripts with Keysight IxNetwork</li> <li>Magna: open-source OTG implementation from OpenConfig project</li> <li>TRex: snappi-trex enables running OTG/snappi scripts with TRex. Supports layer 2-3 Traffic Flows</li> <li>Spirent: stc-otg-setup enables running OTG/snappi scripts with STC. </li> </ul>"},{"location":"implementations/#ixia-c","title":"Ixia-c","text":"<p>Ixia-c is a modern, powerful and API-driven traffic generator designed to cater to the needs of hyperscalers, network hardware vendors and network automation professionals.</p> <p>It is available both as a free Community Edition as well as a commercial edition, Keysight Elastic Network Generator (KENG), from Keysight. Ixia-c is distributed / deployed as a multi-container application consisting of a controller, traffic and protocol engines, and an optional gNMI server.</p> <p>As a reference implementation of Open Traffic Generator API, Ixia-c supports client libraries in various languages, most prevalent being snappi for Python and gosnappi for Go.</p>"},{"location":"implementations/#community-edition","title":"Community Edition","text":"<p>Components of Ixia-c Community Edition are:</p> <ul> <li>Ixia-c Controller serves as an OTG API Endpoint over HTTPs and gRPC</li> <li>Ixia-c gNMI Server exposes OTG Metrics over gNMI</li> <li>Ixia-c Traffic Engine (TE) controls Test Ports and is responsible for transmitting and receiving Traffic Flows</li> </ul> <p></p> <p><sub>Fig. 1. Ixia-c Traffic Engine Deployment Diagram</sub></p> <p>Ixia-c Community Edition is limited to:</p> <ul> <li>Traffic Flows with all capabilities</li> <li>Basic traffic performance via raw Linux sockets</li> <li>Up to 4 Test Ports in one session</li> <li>No L2 protocols on Test Ports</li> <li>Emulated Devices without control plane protocols</li> <li>Support via Slack channel</li> </ul>"},{"location":"implementations/#keng","title":"KENG","text":"<p>Keysight Elastic Network Generator (KENG) is the commercial edition of Ixia-c with added capabilities:</p> <ul> <li>Accelerated traffic performance via DPDK PCI</li> <li>Unlimited number of Test Ports per session</li> <li>Support of L2 protocols on Test Ports</li> <li>Emulated Devices with control plane protocols</li> <li>Keysight Support with SLAs</li> </ul> <p>Components of KENG are:</p> <ul> <li>KENG Controller serves as an OTG API Endpoint over HTTPs and gRPC</li> <li>Ixia-c gNMI Server exposes OTG Metrics over gNMI</li> <li>Ixia-c Traffic Engine (TE) controls Test Ports and is responsible for transmitting and receiving Traffic Flows</li> <li>Ixia-c Protocol Engine (PE) is responsible for L2-3 protocol emulation</li> </ul> <p></p> <p><sub>Fig. 2. Keysight Elastic Network Generator Deployment Diagram</sub></p>"},{"location":"implementations/#ixnetwork","title":"IxNetwork","text":"<p>Keysight's IxNetwork is a tool for performance testing of Layer 2/3 switches and routers.  It is capable of emulating a large number of routing protocols and generating terabytes of data.  It runs on a large variety of Keysight's hardware based traffic generators and is also available in an all software form factor.  </p> <p>The snappi-ixnetwork plugin allows execution of OTG snappi scripts against an IxNetwork based traffic generator.</p> <p></p> <p><sub>Fig. 3. snappi-ixnetwork Deployment Diagram</sub></p> <p>The above diagram gives a high level overview of how a Python script written using the snappi API uses IxNetwork REST API to configure Keysight's load modules to generate traffic.</p> <p>The snappi-ixnetwork plugin supports Keysight's AresONE (400 Gbps) and Novus (100 Gbps) based load modules.</p>"},{"location":"implementations/#magna","title":"Magna","text":"<p>Magna traffic generator is an open-source OTG implementation from OpenConfig project. Magna is designed to be modular, such that it can be easily extended for new use cases. The base implementation does not cover all the OTG APIs, or functionality. More complete implementations such as Ixia-c are likely to be more suited to ongoing testing, an implementation like Magna allows additional flexibility to cover features not yet supported in these implementations, or to test independently of a third-party implementation.</p>"},{"location":"implementations/#trex","title":"TRex","text":"<p>snappi-trex is a plugin that allows executing snappi scripts with TRex Traffic Generator.</p> <p>The plugin converts Open Traffic Generator configuration into the equivalent TRex STL Client configuration. This allows users to leverage TRex capabilities without having to write complex STL scripts.</p> <p></p> <p><sub>Fig. 4. OTG interface for TRex using snappi-trex plugin</sub></p> <p>The above diagram outlines the overall process of how the Open Traffic Generator API is able to interface with TRex and generate traffic over its network interfaces.</p> <p>The snappi-trex plugin supports stateless Traffic Flows over Test Ports. For the full list of supported OTG capabilities, see snappi-trex documentation.</p>"},{"location":"implementations/#spirent","title":"Spirent","text":"<p>stc-otg-setup an OTG and gNMI service that enables all versions of Spirent TestCenter (hardware and virtual) to participate in snappi, gosnappi and ONDATRA test cases for traffic generation and analysis</p>"},{"location":"model/","title":"Model","text":""},{"location":"model/#formal-model","title":"Formal Model","text":"<p>The formal model specification can be found on GitHub under Open Traffic Generator organization. To explore the model, a viewer friendly ReDoc rendering is available as well. The OTG APIs support both REST and gRPC interfaces.</p>"},{"location":"model/#building-blocks","title":"Building Blocks","text":"<p>OTG is an actively developed specification, with contributions from real use cases. The model defines the following components of a traffic generator configuration:</p> <ul> <li>Test Ports with Layer 1&amp;2 capabilities, including:<ul> <li>LLDP, LAG, LACP</li> </ul> </li> <li>Emulated Devices with Layer 2&amp;3 features:<ul> <li>IPv4, IPv6 interfaces</li> <li>ARP, IPv6 ND</li> <li>BGP, IS-IS routing protocols</li> </ul> </li> <li>Traffic Flows<ul> <li>associated with either Test Ports, or Emulated Devices</li> <li>expressing L2-4 properties like Ethernet, IPv4/IPv6, TCP/UDP</li> <li>stateless or stateful capabilities for transport protocols</li> <li>with implementation-specific application payload</li> </ul> </li> <li>Run-time Metrics and traffic Capture capabilities</li> </ul>"},{"location":"model/#hierarchy","title":"Hierarchy","text":"<p>The hierarchy of objects in the OTG Model is visualized below.</p> <p></p> <p><sub>Fig. 1. Hierarchy of the OTG objects</sub></p>"},{"location":"model/#raw-traffic-flows","title":"Raw Traffic Flows","text":"<p>In the most simple case, the OTG Model describes Raw Traffic Flows: stateless streams of packets to be transmitted from one Test Port, and typically, but not always, expected to be received on another Test Port. A configuration when a flow is not expected to be received, is called one-arm. Otherwise, it is a two-arm configuration.</p> <p></p> <p><sub>Fig. 2. Two-arm configuration with a Raw Traffic Flow</sub></p> <p>Since Traffic Flows are unidirectional and stateless, a bidirectional communication can be expressed by two Traffic Flows transmitting on opposite directions.</p> <p></p> <p><sub>Fig. 3. Configuration with two Raw Traffic Flows representing a bidirectional comminication</sub></p>"},{"location":"model/#devices-and-flows","title":"Devices and Flows","text":"<p>Traffic Flows can also be associated with Emulated Devices to form 1:1 or mesh communications between them. Such an approach allows the use of the same Flow definition to originate traffic from multiple ports, as well as Link Aggregation Groups (LAGs).</p> <p></p> <p><sub>Fig. 4. Configuration with Traffic Flows between Emulated Devices</sub></p>"},{"location":"model/#devices-and-protocols","title":"Devices and Protocols","text":"<p>The main role of Emulated Devices is to run control plane protocols: BGP, IS-IS, and more as the model evolves. This allows testing of protocols implementated by a Device Under Test (DUT), and is also nessesary for the DUT to learn routes that it would need to properly route Traffic Flows.</p> <p></p> <p><sub>Fig. 5. Configuration with Traffic Flows between Emulated Devices running BGP</sub></p>"},{"location":"clients/curl/","title":"curl","text":""},{"location":"clients/curl/#overview","title":"Overview","text":"<p><code>curl</code> command-line utility is capable of communicating with any REST-compatible API endpoint over HTTP(s), and OTG is no different. Although you would not want <code>curl</code> to be your go-to choice for OTG, mastering some key queries will be quite useful down the road.</p> <p>For the examples below to work, start with initializing an environmental variable <code>OTG_HOST</code> with a correct URL string for your OTG API Endpoint deployment. Here we assume you've deployed the Endpoint on the same host where you'll run <code>curl</code>, over a default HTTPs port \u2013\u00a0similar to a basic Ixia-c Traffic Engine deployment.</p> <pre><code>OTG_HOST=\"https://localhost\"\n</code></pre> <p>To try these examples, you can download a sample <code>otg.json</code> configuration.</p>"},{"location":"clients/curl/#apply-a-configuration","title":"Apply a configuration","text":"<p>Suppose you have an OTG configuration stored in <code>otg.json</code> file. To apply it to an OTG Endpoint, use:</p> <pre><code>curl -sk \"${OTG_HOST}/config\" \\\n    -H \"Content-Type: application/json\" \\\n    -d @otg.json\n</code></pre>"},{"location":"clients/curl/#show-current-configuration","title":"Show current configuration","text":"<p>Now that you have your configuration applied, you can check how the OTG Endpoint took it. You can find yourself pulling the configuration this way even when developing complex test programs or CI/CD pipelines \u2013 to see what ended up being applied to a Traffic Generator.</p> <pre><code>curl -sk \"${OTG_HOST}/config\"\n</code></pre> <p>For example, if you want to make a small change within a complex configuration that was applied by a Test Program, show current configuration and save it to a file, make changes and apply an updated configuration from the file.</p>"},{"location":"clients/curl/#start-transmitting-flows","title":"Start transmitting flows","text":"<p>Now that you have a configuration applied, you can start transmitting all configured Traffic Flows:</p> <pre><code>curl -sk \"${OTG_HOST}/control/transmit\" \\\n    -H  \"Content-Type: application/json\" \\\n    -d '{\"state\": \"start\"}'\n</code></pre>"},{"location":"clients/curl/#fetch-port-metrics","title":"Fetch port metrics","text":"<p>At any moment you can a fetch current snapshot of metrics from the OTG Endpoint. Here is an example for Port Metrics. <code>watch</code> command is useful to pull the metrics periodically. Exit with <code>Ctrl-C</code>.</p> <pre><code>watch -n 1 \"curl -sk \\\"${OTG_HOST}/results/metrics\\\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \\\"choice\\\": \\\"port\\\" }'\"\n</code></pre>"},{"location":"clients/curl/#fetch-flow-metrics","title":"Fetch flow metrics","text":"<p>If enabled via <code>otg.json</code>, use this example to pull Flow Metrics. <code>watch</code> command is useful to pull the metrics periodically. Exit with <code>Ctrl-C</code>. Here, you can observe if traffic is running not only by changing counters, but also a value of <code>transmit</code> key: it could be <code>started</code> or <code>stopped</code>.</p> <pre><code>watch -n 1 \"curl -sk \\\"${OTG_HOST}/results/metrics\\\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \\\"choice\\\": \\\"flow\\\" }'\"\n</code></pre>"},{"location":"clients/curl/#stop-transmitting-flows","title":"Stop transmitting flows","text":"<p>Even more important command is to stop transmitting of all configured Traffic Flows. This is especially useful if you started a long-running test and your test program crashed after that.</p> <pre><code>curl -k \"${OTG_HOST}/control/transmit\" \\\n    -H  \"Content-Type: application/json\" \\\n    -d '{\"state\": \"stop\"}'\n</code></pre>"},{"location":"clients/gosnappi/","title":"gosnappi","text":""},{"location":"clients/gosnappi/#overview","title":"Overview","text":"<p>Test scripts written in <code>gosnappi</code>, an auto-generated Go module, can be executed against any traffic generator conforming to the Open Traffic Generator API.</p>"},{"location":"clients/gosnappi/#install-on-a-client","title":"Install on a client","text":"<pre><code>mkdir tests &amp;&amp; cd tests\ngo mod init tests\ngo get github.com/open-traffic-generator/snappi/gosnappi\n</code></pre>"},{"location":"clients/gosnappi/#start-scripting","title":"Start scripting","text":"<p>Add a new file <code>hello.go</code> with following snippet:</p> <pre><code>package main\n\nimport (\n    \"log\"\n\n    \"github.com/open-traffic-generator/snappi/gosnappi\"\n)\n\nfunc main() {\n    // Create a new API handle to make API calls against a traffic generator\n    api := gosnappi.NewApi()\n\n    // Set the transport protocol to either HTTP or GRPC\n    api.NewHttpTransport().SetLocation(\"https://localhost\")\n\n    // Create a new traffic configuration that will be set on traffic generator\n    config := api.NewConfig()\n\n    // Add port locations to the configuration\n    p1 := config.Ports().Add().SetName(\"p1\").SetLocation(\"localhost:5555\")\n\n    // Configure the flow and set the endpoints\n    flow := config.Flows().Add().SetName(\"f1\")\n    flow.TxRx().Port().SetTxName(p1.Name())\n\n    // Configure the size of a packet and the number of packets to transmit\n    flow.Size().SetFixed(128)\n    flow.Duration().FixedPackets().SetPackets(1000)\n\n    // Configure the header stack\n    pkt = flow.Packet()\n    eth := pkt.Add().Ethernet()\n    ipv4 := pkt.Add().Ipv4()\n    tcp := pkt.Add().Tcp()\n\n    eth.Dst().SetValue(\"00:11:22:33:44:55\")\n    eth.Src().SetValue(\"00:11:22:33:44:66\")\n\n    ipv4.Src().SetValue(\"10.1.1.1\")\n    ipv4.Dst().SetValue(\"20.1.1.1\")\n\n    tcp.SrcPort().SetValue(5000)\n    tcp.DstPort().SetValue(6000)\n\n    // Push traffic configuration constructed so far to traffic generator\n    log.Println(config.ToYaml())\n    if err := api.SetConfig(config); err != nil {\n        log.Fatal(err)\n    }\n\n    // Start transmitting the configured flows\n    ts := api.NewTransmitState()\n    ts.SetState(gosnappi.TransmitStateState.START)\n    if err := api.SetTransmitState(ts); err != nil {\n        log.Fatal(err)\n    }\n\n    // Fetch and the port metrics\n    req := api.NewMetricsRequest()\n    req.Port().SetPortNames([]string{p1.Name()})\n    metrics, err := api.GetMetrics(req)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    log.Println(metrics.ToYaml())\n}\n</code></pre>"},{"location":"clients/gosnappi/#run-test","title":"Run test","text":"<pre><code>go run hello.go\n</code></pre>"},{"location":"clients/snappi/","title":"snappi","text":""},{"location":"clients/snappi/#overview","title":"Overview","text":"<p>Test scripts written in <code>snappi</code>, an auto-generated Python module, can be executed against any traffic generator conforming to the Open Traffic Generator API. The examples of <code>snappi</code> coding patterns can also be found as part of Ixia-c documentation.</p>"},{"location":"clients/snappi/#install-on-a-client","title":"Install on a client","text":"<pre><code>python -m pip install --upgrade snappi\n</code></pre>"},{"location":"clients/snappi/#start-scripting","title":"Start scripting","text":"<p>Add a new file <code>hello.py</code> with following snippet:</p> <pre><code>import snappi\n# create a new API instance where location points to controller.\n# this will use HTTP transport by default; in order to use gRPC instead,\n# one can pass additional kwarg `transport=snappi.Transport.GRPC`\napi = snappi.api(location='https://localhost')\n\n# create a config object to be pushed to controller\nconfig = api.config()\n# add a port with location pointing to traffic engine\nprt = config.ports.port(name='prt', location='localhost:5555')[-1]\n# add a flow and assign endpoints\nflw = config.flows.flow(name='flw')[-1]\nflw.tx_rx.port.tx_name = prt.name\n\n# configure 100 packets to be sent, each having a size of 128 bytes\nflw.size.fixed = 128\nflw.duration.fixed_packets.packets = 100\n\n# add Ethernet, IP and TCP protocol headers with defaults\nflw.packet.ethernet().ipv4().tcp()\n\n# push configuration\napi.set_config(config)\n\n# start transmitting configured flows\nts = api.transmit_state()\nts.state = ts.START\napi.set_transmit_state(ts)\n\n# fetch &amp; print port metrics\nreq = api.metrics_request()\nreq.port.port_names = [prt.name]\nprint(api.get_metrics(req))\n</code></pre>"},{"location":"clients/snappi/#run-test","title":"Run test","text":"<pre><code>python hello.py\n</code></pre>"},{"location":"clients/snappi/#json","title":"JSON","text":"<p>Every object in snappi can be serialized to or deserialized from a JSON string which conforms to Open Traffic Generator API. This facilitates storing traffic configurations as JSON files and reusing them in API calls with or without further modifications.</p> <ul> <li>Create a sample config</li> </ul> <pre><code>import snappi\n\n# create a new API instance where location points to controller.\n# this will use HTTP transport by default; in order to use gRPC instead,\n# one can pass additional kwarg `transport=snappi.Transport.GRPC`:\n# api = snappi.api(location=\"localhost:40051\", transport=snappi.Transport.GRPC)\napi = snappi.api()\nconfig = api.config()\n\nconfig.ports.port(name='p1', location='localhost:5555')\nconfig.flows.flow(name='f1')\n</code></pre> <ul> <li>Serialize to JSON (or python dictionary or YAML)</li> </ul> <pre><code>json_str = config.serialize()\n# serialize child of config object to JSON string\njson_str = config.ports.serialize()\n\nyaml_str = config.serialize(encoding=config.YAML)\nobj_dict = config.serialize(encoding=config.DICT)\n</code></pre> <ul> <li>Deserialize from JSON (or python dictionary or YAML)</li> </ul> <pre><code># whether the argument is JSON or YAML or dict is automatically determined\nconfig.deserialize('{\"ports\": [{\"name\": \"p2\", \"location\": \"localhost:5556\"}]}')\n# deserialize child of config object from JSON string\nconfig.flows.deserialize('[{\"name\": \"f1\"}]')\n\nconfig.deserialize({\"ports\": [{\"name\": \"p1\", \"location\": \"localhost:5555\"}]})\nconfig.deserialize('ports:\\n- name: p1\\n  location: localhost:5555\\n')\n</code></pre> <ul> <li>Pass either snappi object or equivalent JSON string as argument to API calls</li> </ul> <pre><code>config = api.config()\n\nconfig.ports.port(name='p1', location='localhost:5555')\n# config will be serialized to JSON string and sent on wire\napi.set_config(config)\n\njson_str = '{\"ports\": [{\"name\": \"p1\", \"location\": \"localhost:5555\"}]}'\n# JSON string will be directly sent on wire\napi.set_config(json_str)\n</code></pre> <p>Following sections discuss most commonly used constructs in snappi comparing each one of them with equivalent JSON snippet. For brevity, snippet for config creation is not included (since it's the same across all).</p>"},{"location":"clients/snappi/#flows","title":"Flows","text":"<p>This section deals with flow configuration and control.</p>"},{"location":"clients/snappi/#unidirectional-flow","title":"Unidirectional Flow","text":"A simple unidirectional flow for a **one-arm** test.   snappi   json  <pre><code>p1 = config.ports.port(name='p1', \\\n  location='localhost:5555')[-1]\nf1 = config.flows.flow(name='f1')[-1]\n\nf1.tx_rx.port.tx_name = p1.name\n</code></pre> <pre><code>{\n  \"ports\": [\n    {\n      \"location\": \"localhost:5555\",\n      \"name\": \"p1\"\n    }\n  ],\n  \"flows\": [\n    {\n      \"name\": \"f1\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p1\"\n        },\n        \"choice\": \"port\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"clients/snappi/#bidirectional-flows","title":"Bidirectional Flows","text":"A bi-directional flow between two ports. snappijson <pre><code>p1, p2 = ( \\\n    config.ports \\\n    .port(name='p1', location='localhost:5555') \\\n    .port(name='p2', location='localhost:5556')\n)\nf1, f2 = config.flows.flow(name='flow p1-&gt;p2'). \\\n  flow(name='flow p2-&gt;p1')\n\nf1.tx_rx.port.tx_name = p1.name\nf1.tx_rx.port.rx_name = p2.name\nf2.tx_rx.port.tx_name = p2.name\nf2.tx_rx.port.rx_name = p1.name\n</code></pre> <pre><code>{\n  \"ports\": [\n    {\n      \"location\": \"localhost:5555\",\n      \"name\": \"p1\"\n    },\n    {\n      \"location\": \"localhost:5556\",\n      \"name\": \"p2\"\n    }\n  ],\n  \"flows\": [\n    {\n      \"name\": \"flow p1-&gt;p2\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p1\",\n          \"rx_name\": \"p2\"\n        },\n        \"choice\": \"port\"\n      }\n    },\n    {\n      \"name\": \"flow p2-&gt;p1\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p2\",\n          \"rx_name\": \"p1\"\n        },\n        \"choice\": \"port\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"clients/snappi/#meshed-flows","title":"Meshed Flows","text":"Fully meshed flows between four ports.  Each port sends flows to all the ports (except itself).  This example is for four ports, it can be easily extended to an arbitrary number of ports. snappijson <pre><code>import itertools\n\nfor i in range(1, 4):\n  config.ports.port(name='p%d' % i, \\\n    location='localhost:%d' % (5554 + i))\n\nfor tx, rx in \\\n  itertools.permutations([p.name for \\ \n  p in config.ports], 2):\n  f = config.flows.flow(name='flow %s-&gt;%s' \\ \n    % (tx, rx))[-1]\n  f.tx_rx.port.tx_name = tx\n  f.tx_rx.port.rx_name = rx\n</code></pre> <pre><code>{\n  \"ports\": [\n    {\n      \"location\": \"localhost:5555\",\n      \"name\": \"p1\"\n    },\n    {\n      \"location\": \"localhost:5556\",\n      \"name\": \"p2\"\n    },\n    {\n      \"location\": \"localhost:5557\",\n      \"name\": \"p3\"\n    }\n  ],\n  \"flows\": [\n    {\n      \"name\": \"flow p1-&gt;p2\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p1\",\n          \"rx_name\": \"p2\"\n        },\n        \"choice\": \"port\"\n      }\n    },\n    {\n      \"name\": \"flow p1-&gt;p3\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p1\",\n          \"rx_name\": \"p3\"\n        },\n        \"choice\": \"port\"\n      }\n    },\n    {\n      \"name\": \"flow p2-&gt;p1\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p2\",\n          \"rx_name\": \"p1\"\n        },\n        \"choice\": \"port\"\n      }\n    },\n    {\n      \"name\": \"flow p2-&gt;p3\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p2\",\n          \"rx_name\": \"p3\"\n        },\n        \"choice\": \"port\"\n      }\n    },\n    {\n      \"name\": \"flow p3-&gt;p1\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p3\",\n          \"rx_name\": \"p1\"\n        },\n        \"choice\": \"port\"\n      }\n    },\n    {\n      \"name\": \"flow p3-&gt;p2\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p3\",\n          \"rx_name\": \"p2\"\n        },\n        \"choice\": \"port\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"clients/snappi/#protocol-headers-with-fixed-fields","title":"Protocol Headers With Fixed Fields","text":"Simple flow with Ethernet, IP and TCP protocol headers. snappijson <pre><code>p1 = config.ports.port(name='p1', \\ \n  location='localhost:5555')[-1]\nf1 = config.flows.flow(name='f1')[-1]\n\nf1.tx_rx.port.tx_name = p1.name\neth, ip, tcp = f1.packet.ethernet().ipv4().tcp()\n\neth.dst.value = '00:00:00:00:00:AA'\nip.dst.value = '192.168.1.1'\ntcp.dst_port.value = 5000\n</code></pre> <pre><code>{\n  \"ports\": [\n    {\n      \"location\": \"localhost:5555\",\n      \"name\": \"p1\"\n    }\n  ],\n  \"flows\": [\n    {\n      \"name\": \"f1\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p1\"\n        },\n        \"choice\": \"port\"\n      },\n      \"packet\": [\n        {\n          \"ethernet\": {\n            \"dst\": {\n              \"value\": \"00:00:00:00:00:AA\",\n              \"choice\": \"value\"\n            }\n          },\n          \"choice\": \"ethernet\"\n        },\n        {\n          \"ipv4\": {\n            \"dst\": {\n              \"value\": \"192.168.1.1\",\n              \"choice\": \"value\"\n            }\n          },\n          \"choice\": \"ipv4\"\n        },\n        {\n          \"tcp\": {\n            \"dst_port\": {\n              \"value\": 5000,\n              \"choice\": \"value\"\n            }\n          },\n          \"choice\": \"tcp\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"clients/snappi/#protocol-headers-with-varying-fields","title":"Protocol Headers With Varying Fields","text":"Flow with Ethernet, IP and TCP headers.  Ethernet destination MAC address, destination IP address and TCP destination port are varied using patterns. snappijson <pre><code>p1 = config.ports.port(name='p1', \\ \n  location='localhost:5555')[-1]\nf1 = config.flows.flow(name='f1')[-1]\n\nf1.tx_rx.port.tx_name = p1.name\neth, ip, tcp = f1.packet.ethernet().ipv4().tcp()\n\neth.src.value = '00:00:00:00:00:AA'\neth.dst.values = ['00:00:00:00:00:AB', \\ \n  '00:00:00:00:00:AC']\n\nip.src.value = '192.168.1.1'\nip.dst.increment.start = '192.168.1.2'\nip.dst.increment.step = '0.0.0.1'\nip.dst.increment.count = 2\n\ntcp.src_port.value = 5000\ntcp.dst_port.decrement.start = 5002\ntcp.dst_port.decrement.step = 1\ntcp.dst_port.decrement.count = 2\ntcp.seq_num.values = [1, 2]\n</code></pre> <pre><code>{\n  \"ports\": [\n    {\n      \"location\": \"localhost:5555\",\n      \"name\": \"p1\"\n    }\n  ],\n  \"flows\": [\n    {\n      \"name\": \"f1\",\n      \"tx_rx\": {\n        \"port\": {\n          \"tx_name\": \"p1\"\n        },\n        \"choice\": \"port\"\n      },\n      \"packet\": [\n        {\n          \"ethernet\": {\n            \"src\": {\n              \"value\": \"00:00:00:00:00:AA\",\n              \"choice\": \"value\"\n            },\n            \"dst\": {\n              \"values\": [\n                \"00:00:00:00:00:AB\",\n                \"00:00:00:00:00:AC\"\n              ],\n              \"choice\": \"values\"\n            }\n          },\n          \"choice\": \"ethernet\"\n        },\n        {\n          \"ipv4\": {\n            \"src\": {\n              \"value\": \"192.168.1.1\",\n              \"choice\": \"value\"\n            },\n            \"dst\": {\n              \"increment\": {\n                \"start\": \"192.168.1.2\",\n                \"step\": \"0.0.0.1\",\n                \"count\": 2\n              },\n              \"choice\": \"increment\"\n            }\n          },\n          \"choice\": \"ipv4\"\n        },\n        {\n          \"tcp\": {\n            \"src_port\": {\n              \"value\": 5000,\n              \"choice\": \"value\"\n            },\n            \"dst_port\": {\n              \"decrement\": {\n                \"start\": 5002,\n                \"step\": 1,\n                \"count\": 2\n              },\n              \"choice\": \"decrement\"\n            },\n            \"seq_num\": {\n              \"values\": [\n                1,\n                2\n              ],\n              \"choice\": \"values\"\n            }\n          },\n          \"choice\": \"tcp\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"clients/snappi/#start-flow-transmit","title":"Start Flow Transmit","text":"Start transmit on a certain set of flows. snappijson <pre><code>ts = api.transmit_state()\nts.state = ts.START\nts.flow_names = ['f1', 'f2']\n\napi.set_transmit_state(ts)\n</code></pre> <pre><code>{\n  \"flow_names\": [\n    \"f1\",\n    \"f2\"\n  ],\n  \"state\": \"start\"\n}\n</code></pre>"},{"location":"clients/snappi/#capture","title":"Capture","text":"<p>Capture configuration and control</p>"},{"location":"clients/snappi/#capture-configuration","title":"Capture Configuration","text":"Configure capture prior to starting capture. TBD"},{"location":"clients/snappi/#start-capture","title":"Start Capture","text":"Start capture on a set of ports. snappijson <pre><code>cs = api.capture_state()\ncs.state = ts.START\ncs.port_names = ['p1', 'p2']\n\napi.set_capture_state(cs)\n</code></pre> <pre><code>{\n  \"port_names\": [\n    \"p1\",\n    \"p2\"\n  ],\n  \"state\": \"start\"\n}\n</code></pre>"},{"location":"clients/snappi/#get-capture","title":"Get Capture","text":"Retrieve capture for a given port.  Save capture to a .pcap file (python only). snappijson <pre><code>req = api.capture_request()\nreq.port_name = 'p1'\n\nwith open('capture.pcap', 'w') as pcap:\n  pcap.write(api.get_capture(req).read())\n</code></pre> <pre><code>{\n  \"port_name\": \"p1\"\n}\n</code></pre>"},{"location":"clients/snappi/#metrics","title":"Metrics","text":""},{"location":"clients/snappi/#port-metrics","title":"Port Metrics","text":"Get port statistics for a given set of ports. snappijson <pre><code>req = api.metrics_request()\nreq.port.port_names = ['tx', 'rx']\nreq.port.column_names = [req.port.FRAMES_TX, \\\n  req.port.FRAMES_RX]\n\nres = api.get_metrics(req)\nassert res[0].frames_tx == res[1].frames_rx\n</code></pre> <pre><code>{\n  \"port\": {\n    \"port_names\": [\n      \"p1\",\n      \"p2\"\n    ],\n    \"column_names\": [\n      \"frames_tx\",\n      \"frames_rx\"\n    ]\n  },\n  \"choice\": \"port\"\n}\n</code></pre>"},{"location":"clients/snappi/#flow-metrics","title":"Flow Metrics","text":"Get flow statistics. TBD"},{"location":"clients/otgen/","title":"OTGen: Open Traffic Generator CLI Tool","text":""},{"location":"clients/otgen/#how-to-use","title":"How to use","text":"<p>The idea behind <code>otgen</code> is to leverage shell pipe capabilities to break OTG API interactions into multiple stages with output of one feeding to the next. This way, each individual stage can be:</p> <ul> <li>easily parameterized, </li> <li>individually re-used,</li> <li>when needed, substituted by a custom implementation</li> </ul> <p>The shell pipe workflow on <code>otgen</code> looks the following:</p> <pre><code>otgen create flow -s 1.1.1.1 -d 2.2.2.2 -p 80 --rate 1000 | \\\notgen add flow -n f2 -s 2.2.2.2 -d 1.1.1.1 --sport 80 --dport 1024 --tx p2 --rx p1 | \\\notgen run -k --metrics flow | \\\notgen transform --metrics flow --counters frames | \\\notgen display --mode table\n</code></pre> <p>Port locations are read from <code>ENV:OTG_LOCATION_P1</code> and <code>ENV:OTG_LOCATION_P2</code>.</p> <p>See Environmental variables section for more options.</p>"},{"location":"clients/otgen/#installation","title":"Installation","text":"<p><code>otgen</code> is distributed as a precompiled binary for Linux and MacOS. You can also build it from source for any other platform supported by Go language.</p>"},{"location":"clients/otgen/#install-script","title":"Install script","text":"<p><code>otgen</code> can be installed using the installation script which detects the operating system type and installs the relevant binary:</p> <pre><code># download and install the latest release (may require sudo)\nbash -c \"$(curl -sL https://get.otgcdn.net/otgen)\"\n\n# download a specific version - 0.4.0 in this example (may require sudo)\nbash -c \"$(curl -sL https://get.otgcdn.net/otgen)\" -- -v 0.4.0\n\n# with wget\nbash -c \"$(wget -qO - https://get.otgcdn.net/otgen)\"\n</code></pre>"},{"location":"clients/otgen/#manually-download","title":"Manually download","text":"<p>To manually select and download a TAR archive with a precompiled <code>otgen</code> binary for your platform use <code>otgen releases</code> page.</p>"},{"location":"clients/otgen/#command-reference","title":"Command reference","text":""},{"location":"clients/otgen/#global-options","title":"Global options","text":"<pre><code>otgen \n  [--log level]                       # Logging level: err | warn | info | debug (default \"err\")\n</code></pre>"},{"location":"clients/otgen/#create-and-add","title":"<code>create</code> and <code>add</code>","text":"<p>Create a new OTG configuration item that can be further passed to stdin of <code>otgen run</code> command. The <code>add</code> variant of the command first reads an OTG configuration from stdin.</p> <pre><code>otgen create flow                     # Create a configuration for a Traffic Flow\n  [--name string]                     # Flow name (default f1)\n  [--tx string]                       # Test port name for TX (default p1) \n  [--rx string]                       # Test port name for RX (default p2) \n  [--txl string]                      # Test port location string for TX (default localhost:5555) \n  [--rxl string]                      # Test port location string for RX (default localhost:5556) \n  [--ipv4 ]                           # IP version 4 (default)\n  [--ipv6 ]                           # IP version 6\n  [--proto icmp | tcp | udp]          # IP transport protocol\n  [--smac xx.xx.xx.xx.xx.xx]          # Source MAC address. For device-bound flows, default value is copied from the Tx device\n  [--dmac xx.xx.xx.xx.xx.xx]          # Destination MAC address. For device-bound flows, default value \"auto\" enables ARP for IPv4 / ND for IPv6\n  [--src x.x.x.x]                     # Source IP address\n  [--dst x.x.x.x]                     # Destination IP address\n  [--sport N]                         # Source TCP or UDP port. If not specified, incrementing source port numbers would be used for each new packet\n  [--dport N]                         # Destination TCP or UDP port (default 7 - echo protocol)\n  [--swap]                            # Swap default values of: Tx and Rx names and locations; source and destination MACs, IPs and TCP/UDP ports\n  [--count N]                         # Number of packets to transmit. Use 0 for continuous mode. (default 1000)\n  [--rate N]                          # Packet rate in packets per second. If not specified, default rate decision would be left to the traffic engine\n  [--size N]                          # Frame size in bytes. If not specified, default frame size decision would be left to the traffic engine\n  [--loss]                            # Enable loss metrics\n  [--latency sf | ct]                 # Enable latency metrics: sf for store_forward | ct for cut_through\n  [--timestamps]                      # Enable metrics timestamps\n  [--nometrics ]                      # Disable flow metrics\n</code></pre> <pre><code>otgen create device                   # Create a configuration for an Emulated Device\n  [--name string]                     # Device name (default otg1)\n  [--port string]                     # Test port name (default p1)\n  [--location string]                 # Test port location string (default localhost:5555)\n  [--mac xx.xx.xx.xx.xx.xx]           # Device MAC address\n  [--ip x.x.x.x]                      # Device IP address\n  [--gw x.x.x.x]                      # Device default gateway\n  [--prefix nn]                       # Device network prefix\n</code></pre>"},{"location":"clients/otgen/#add-bgp","title":"<code>add bgp</code>","text":"<p>Adds a BGP router to an emulated device in the existing OTG configuration. Typical usage:</p> <pre><code>otgen create device --name r1 | \\\notgen add bgp --device r1 --route 203.0.113.0/24\n</code></pre> <p>Available parameters:</p> <pre><code>otgen add bgp                         # Add a BGP configuration to an Emulated Device\n  [--device string]                   # Device name to add BGP configuration to (default \"otg1\")\n  [--id]                              # Router ID (default is an IP address of the interface the BGP configuration is attached to)\n  [--asn N]                           # Autonomous System Number (default 65534)\n  [--peer x.x.x.x]                    # Peer IP address (default is a GW address of the interface the BGP configuration is attached to)\n  [--type ebgp|ibgp]                  # BGP peering type: ebgp | ibgp (default \"ebgp\")\n  [--route x.x.x.x/nn]                # Route to advertise\n</code></pre>"},{"location":"clients/otgen/#run","title":"<code>run</code>","text":"<p>Requests OTG API endpoint to:</p> <ul> <li>apply an OTG configuration</li> <li>start Protocols, if any Devices are defined in the configuration</li> <li>run Traffic Flows</li> </ul> <pre><code>otgen run \n  [--api https://otg-api-endpoint]    # URL of OTG API endpoint. Overrides ENV:OTG_API (default \"https://localhost:8443\")\n  [--insecure]                        # Ignore X.509 certificate validation\n  [--file otg.yml | --file otg.json]  # OTG configuration file. If not provided, will use stdin\n  [--yaml | --json]                   # Format of OTG input\n  [--rxbgp 10|2x]                     # How many BGP routes shall we receive to consider the protocol is up. In number routes or multiples of routes advertised (default 1x)\n  [--metrics port,flow,bgp4]          # Metrics types to report as a comma-separated list: \"port\" for PortMetrics, \"flow\" for FlowMetrics, \"bgp4\" for Bgpv4Metrics\n  [--interval 0.5s]                   # Interval to pull OTG metrics. Valid time units are 'ms', 's', 'm', 'h'. Example: 1s (default 0.5s)\n  [--xeta 2]                          # How long to wait before forcing traffic to stop. In multiples of ETA. Example: 1.5 (default 2)\n  [--timeout 120]                     # Maximum total run time, including protocols convergence and running traffic\n  [--protocols auto|ignore|keep]      # Protocols control mode: auto - detect, start and stop; ignore - do not detect, start or stop; keep - detect, start but do not stop\n</code></pre>"},{"location":"clients/otgen/#transform","title":"<code>transform</code>","text":"<p>Transform raw OTG metrics into a format suitable for further processing. If no parameters is provided, <code>transform</code> validates input for a match with OTG MetricsResponse data structure, and if matched, outputs it as is.</p> <pre><code>otgen transform \n  [--metrics port|flow]               # Metrics type to transform: \n                                      #   \"port\" for PortMetrics\n                                      #   \"flow\" for FlowMetrics\n  [--counters frames|bytes|pps|tput]  # Metric counters to transform:\n                                      #   \"frames\" for frame count (default),\n                                      #   \"bytes\" for byte count,\n                                      #   \"pps\" for frame rate, in packets per second\n                                      #   \"tput\" for throughput, in bytes per second (PortMetrics only)\n  [--file template.tmpl]              # Go template file. If not provided, built-in templates will be used based on provided parameters\n</code></pre>"},{"location":"clients/otgen/#display","title":"<code>display</code>","text":"<p>Displays metrics of a running test as charts or a table.</p> <pre><code>otgen display\n  [--mode chart|table]               # Display type to show metrics as\n  [--type line]                      # Type of the chart displayed. Currently, only line charts are supported.\n</code></pre>"},{"location":"clients/otgen/#help","title":"<code>help</code>","text":"<p>For built-in help, use</p> <pre><code>otgen run --help\n</code></pre>"},{"location":"clients/otgen/#version","title":"<code>version</code>","text":"<p>To check <code>otgen</code> version you have, use</p> <pre><code>otgen version\n</code></pre>"},{"location":"clients/otgen/#environmental-variables","title":"Environmental variables","text":"<p>Values of certain parameters in the OTG configuration depend on specifics of the traffic generator deployment. These values would typically stay the same between multiple <code>otgen</code> runs as long as the deployment stays the same. </p> <p>For example:</p> <ul> <li><code>location</code> string of the OTG <code>ports</code> section depends on traffic generator ports available for the test</li> <li>MAC addresses for OTG <code>flows</code> change only after re-deployment of containerized traffic generator components, and don't change in hardware setups</li> </ul> <p>For such parameters it may be more convenient to change default values used by <code>otgen</code> instead of specifying them as command-line arguments.</p> <p>Environmental variables is one of the mechanisms used by <code>otgen</code> to control default values. See below the full list of the variables recognized by <code>otgen</code> to redefine default values.</p> <pre><code>OTG_API                               # URL of OTG API endpoint\n\nOTG_LOCATION_%PORT_NAME%              # location for test port with a name PORT_NAME, for example:\nOTG_LOCATION_P1                       # location for test port \"p1\"\nOTG_LOCATION_P2                       # location for test port \"p2\"\n\nOTG_FLOW_SMAC_P1                      # Source MAC address to use for flows with Tx on port \"p1\"\nOTG_FLOW_DMAC_P1                      # Destination MAC address to use for flows with Tx on port \"p1\"\nOTG_FLOW_SMAC_P2                      # Source MAC address to use for flows with Tx on port \"p2\"\nOTG_FLOW_DMAC_P2                      # Destination MAC address to use for flows with Tx on port \"p2\"\n\nOTG_FLOW_SRC_IPV4                     # Source IPv4 address to use for flows\nOTG_FLOW_DST_IPV4                     # Destination IPv4 address to use for flows\nOTG_FLOW_SRC_IPV6                     # Source IPv6 address to use for flows\nOTG_FLOW_DST_IPV6                     # Destination IPv6 address to use for flows\n</code></pre> <p>These are the values <code>otgen</code> uses if no variables or arguments were provided.</p> <pre><code>export OTG_API=\"https://localhost:8443\"\nexport OTG_LOCATION_P1=\"localhost:5555\"     # ixia-c-traffic-engine for p1 (tx) listening on localhost:5555\nexport OTG_LOCATION_P2=\"localhost:5556\"     # ixia-c-traffic-engine for p2 (rx) listening on localhost:5556\nexport OTG_FLOW_SMAC_P1=\"02:00:00:00:01:aa\"\nexport OTG_FLOW_DMAC_P1=\"02:00:00:00:02:aa\"\nexport OTG_FLOW_SMAC_P2=\"02:00:00:00:02:aa\"\nexport OTG_FLOW_DMAC_P2=\"02:00:00:00:01:aa\"\nexport OTG_FLOW_SRC_IPV4=\"192.0.2.1\"\nexport OTG_FLOW_DST_IPV4=\"192.0.2.2\"\nexport OTG_FLOW_SRC_IPV6=\"fe80::000:00ff:fe00:01aa\"\nexport OTG_FLOW_DST_IPV6=\"fe80::000:00ff:fe00:02aa\"\n</code></pre> <p>Note, default values displayed via built-in <code>--help</code> output reflect currently set environmental variables values, except for test port location strings.</p>"},{"location":"clients/otgen/BUILD/","title":"Building instructions","text":""},{"location":"clients/otgen/BUILD/#prerequisites","title":"Prerequisites","text":"<ol> <li>Go</li> <li>Cobra-cli</li> <li>GoReleaser https://goreleaser.com/install/, for example <code>go install github.com/goreleaser/goreleaser@v1.6</code></li> </ol>"},{"location":"clients/otgen/BUILD/#build-history","title":"Build history","text":""},{"location":"clients/otgen/BUILD/#cobra","title":"Cobra","text":"<pre><code>go mod init github.com/open-traffic-generator/otgen\ncobra-cli init --license mit --author \"Open Traffic Generator\"\ncobra-cli add run --license mit --author \"Open Traffic Generator\"\ncobra-cli add version --license mit --author \"Open Traffic Generator\"\ncobra-cli add transform --license mit --author \"Open Traffic Generator\"\ncobra-cli add display --license mit --author \"Open Traffic Generator\"\ncobra-cli add create --license mit --author \"Open Traffic Generator\"\ncobra-cli add add --license mit --author \"Open Traffic Generator\"\ncobra-cli add flow --license mit --author \"Open Traffic Generator\" # subcommand for create and add\ncobra-cli add device --license mit --author \"Open Traffic Generator\" # subcommand for create and add\ncobra-cli add bgp --license mit --author \"Open Traffic Generator\" # subcommand for add\n</code></pre>"},{"location":"clients/otgen/BUILD/#goreleaser","title":"GoReleaser","text":"<pre><code>goreleaser init\ngoreleaser build --single-target --snapshot --rm-dist\ngoreleaser release --snapshot --rm-dist\n</code></pre>"},{"location":"clients/otgen/BUILD/#build","title":"Build","text":"<pre><code>go get\ngo mod tidy\ngo build -ldflags=\"-X 'github.com/open-traffic-generator/otgen/cmd.version=v0.0.0-${USER}'\"\n</code></pre>"},{"location":"clients/otgen/BUILD/#test","title":"Test","text":""},{"location":"clients/otgen/BUILD/#submodules","title":"Submodules","text":"<p>Parts of the <code>test</code> hierarchy are coming from submodules. To update content of the submodules to the most recent one, use:</p> <pre><code>git submodule update --remote\n</code></pre>"},{"location":"clients/otgen/BUILD/#create","title":"<code>create</code>","text":"<p>See <code>tests</code> in <code>Makefile</code></p>"},{"location":"clients/otgen/BUILD/#transform","title":"<code>transform</code>","text":"<ol> <li> <p>Parameters</p> <ul> <li> <p>Port metrics</p> <pre><code>cat test/transform/port_metrics.json | ./otgen transform                   | diff test/transform/port_metrics_passthrough.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port           | diff test/transform/port_metrics_frames.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port -c frames | diff test/transform/port_metrics_frames.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port -c bytes  | diff test/transform/port_metrics_bytes.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port -c pps    | diff test/transform/port_metrics_frame_rate.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port -c tput   | diff test/transform/port_metrics_byte_rate.json -\n</code></pre> </li> <li> <p>Flow metrics</p> <pre><code>cat test/transform/flow_metrics.json | ./otgen transform                   | diff test/transform/flow_metrics_passthrough.json -\ncat test/transform/flow_metrics.json | ./otgen transform -m flow           | diff test/transform/flow_metrics_frames.json -\ncat test/transform/flow_metrics.json | ./otgen transform -m flow -c frames | diff test/transform/flow_metrics_frames.json -\ncat test/transform/flow_metrics.json | ./otgen transform -m flow -c bytes  | diff test/transform/flow_metrics_bytes.json -\ncat test/transform/flow_metrics.json | ./otgen transform -m flow -c pps    | diff test/transform/flow_metrics_frame_rate.json -\n</code></pre> </li> </ul> </li> <li> <p>Templates - JSON</p> <ul> <li> <p>Port metrics</p> <pre><code>cat test/transform/port_metrics.json | ./otgen transform -f templates/transformPassThrough.tmpl   | diff test/transform/port_metrics_passthrough.json -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortFrames.tmpl    | diff test/transform/port_metrics_frames.json -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortBytes.tmpl     | diff test/transform/port_metrics_bytes.json -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortFrameRate.tmpl | diff test/transform/port_metrics_frame_rate.json -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortByteRate.tmpl  | diff test/transform/port_metrics_byte_rate.json -\n</code></pre> </li> <li> <p>Flow metrics</p> <pre><code>cat test/transform/flow_metrics.json | ./otgen transform -f templates/transformPassThrough.tmpl   | diff test/transform/flow_metrics_passthrough.json -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowFrames.tmpl    | diff test/transform/flow_metrics_frames.json -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowBytes.tmpl     | diff test/transform/flow_metrics_bytes.json -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowFrameRate.tmpl | diff test/transform/flow_metrics_frame_rate.json -\n</code></pre> </li> </ul> </li> <li> <p>Templates - Tables</p> <ul> <li> <p>Port metrics</p> <pre><code>cat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortFramesTable.tmpl    | diff test/transform/port_metrics_frames_table.txt -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortBytesTable.tmpl     | diff test/transform/port_metrics_bytes_table.txt -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortFrameRateTable.tmpl | diff test/transform/port_metrics_frame_rate_table.txt -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortByteRateTable.tmpl  | diff test/transform/port_metrics_byte_rate_table.txt -\n</code></pre> </li> <li> <p>Flow metrics</p> <pre><code>cat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowFramesTable.tmpl    | diff test/transform/flow_metrics_frames_table.txt -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowBytesTable.tmpl     | diff test/transform/flow_metrics_bytes_table.txt -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowFrameRateTable.tmpl | diff test/transform/flow_metrics_frame_rate_table.txt -\n</code></pre> </li> </ul> </li> <li> <p>Full pipe with port metrics</p> <pre><code>cat ../otg.b2b.json | ./otgen run -k 2&gt;/dev/null | ./otgen transform -m port\n</code></pre> </li> </ol>"},{"location":"clients/otgen/BUILD/#display","title":"<code>display</code>","text":"<p>Currently, only for visual inspection</p> <ol> <li> <p>Charts</p> <pre><code>cat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c frames | ./otgen display --mode chart --type line\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c bytes  | ./otgen display --mode chart --type line\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c pps    | ./otgen display --mode chart --type line\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c tput   | ./otgen display --mode chart --type line\n\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c frames | ./otgen display --mode chart --type line\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c bytes  | ./otgen display --mode chart --type line\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c pps    | ./otgen display --mode chart --type line\n</code></pre> </li> <li> <p>Table</p> <pre><code>cat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c frames | ./otgen display --mode table\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c bytes  | ./otgen display --mode table\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c pps    | ./otgen display --mode table\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c tput   | ./otgen display --mode table\n\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c frames | ./otgen display --mode table\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c bytes  | ./otgen display --mode table\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c pps    | ./otgen display --mode table\n</code></pre> </li> </ol>"},{"location":"examples/basic/","title":"Basic OTG Configurations","text":""},{"location":"examples/basic/#single-tcp-traffic-flow-between-two-test-ports","title":"Single TCP Traffic Flow between two Test Ports","text":"<p>File: <code>flow.otg.yaml</code>.</p> <p>This single flow configuration specifies:</p> <ul> <li>Flow Name: <code>f1</code></li> <li>Packet Schedule: <ul> <li><code>1000</code> packets </li> <li>of <code>512B</code> size </li> <li>to be transmitted as fixed rate of <code>100pps</code></li> </ul> </li> <li>Packet Template: <ul> <li>Ethernet src <code>02:00:00:00:01:aa</code> dst <code>02:00:00:00:02:aa</code></li> <li>IPv4 src <code>192.0.2.1</code> dst <code>192.0.2.2</code></li> <li>TCP ports src <code>start at 1024 increment by 7</code> dst <code>7</code></li> </ul> </li> <li>Test Ports<ul> <li>Tx: <code>p1</code> with OTG location <code>localhost:5555</code></li> <li>Rx: <code>p2</code> with OTG location <code>localhost:5556</code></li> </ul> </li> </ul> <p>This configuration was generated by running:</p> <pre><code>otgen create flow --rate 100 --size 512 &gt; flow.otg.yaml\n</code></pre>"},{"location":"examples/basic/#two-traffic-flows-representing-bi-directional-udp-traffic-between-two-traffic-ports","title":"Two Traffic Flows representing bi-directional UDP traffic between two Traffic Ports","text":"<p>File: <code>bidir-flow.otg.yaml</code>.</p> <p>This bi-directional flow configuration specifies:</p> <ul> <li>Flow Names: <code>f1</code>; <code>f2</code></li> <li>Packet Schedule: <ul> <li><code>f1: 1000</code>; <code>f2: 100</code> packets</li> <li>of <code>f1: 512B</code>; <code>f2: 256B</code> size </li> <li>to be transmitted as fixed rate of <code>f1: 100pps</code>; <code>f2: 10pps</code></li> </ul> </li> <li>Packet Template: <ul> <li>Ethernet <code>f1</code> src <code>02:00:00:00:01:aa</code> dst <code>02:00:00:00:02:aa</code>; <code>f2</code> src/dst swapped</li> <li>IPv4 <code>f1</code> src <code>192.0.2.1</code> dst <code>192.0.2.2</code>; <code>f2</code> src/dst swapped</li> <li>TCP ports <code>f1</code> src <code>start at 1024 increment by 7</code> dst <code>7</code>; <code>f2</code> src/dst swapped</li> </ul> </li> <li>Test Ports<ul> <li>Tx: <code>f1: p1</code> with OTG location <code>localhost:5555</code>; <code>f2: p2</code></li> <li>Rx: <code>f1: p2</code> with OTG location <code>localhost:5556</code>; <code>f2: p1</code></li> </ul> </li> </ul> <p>This configuration was generated by running:</p> <pre><code>otgen create flow --rate 100 --size 512 --proto udp | \\\notgen add flow --name f2 --count 100 --rate 10 --size 256 --proto udp --swap \\\n&gt; bidir-flow.otg.yaml\n</code></pre>"},{"location":"examples/basic/#single-traffic-flows-representing-tcp-traffic-between-two-emulated-devices","title":"Single Traffic Flows representing TCP traffic between two Emulated Devices","text":"<p>File: <code>device-flow.otg.yaml</code>.</p> <p>This single flow configuration specifies:</p> <ul> <li>Device Names: <code>otg1</code>; <code>otg2</code><ul> <li>Ethernet Interfaces: <code>otg1.eth[0]</code>; <code>otg2.eth[0]</code></li> <li>MAC Addresses: <code>02:00:00:00:01:aa</code>; <code>02:00:00:00:02:aa</code></li> <li>IP Addresses: <code>192.0.2.1</code>; <code>192.0.2.2</code></li> <li>Default Gateways: <code>192.0.2.2</code>; <code>192.0.2.1</code></li> <li>Subnet Netmasks: <code>/24</code>; <code>/24</code></li> </ul> </li> <li>Flow Name: <code>f1</code></li> <li>Packet Schedule: <ul> <li><code>1000</code> packets </li> <li>of <code>512B</code> size </li> <li>to be transmitted as fixed rate of <code>100pps</code></li> </ul> </li> <li>Packet Template: <ul> <li>Ethernet src <code>02:00:00:00:01:aa</code> dst <code>02:00:00:00:02:aa</code></li> <li>IPv4 src <code>192.0.2.1</code> dst <code>192.0.2.2</code></li> <li>TCP ports src <code>start at 1024 increment by 7</code> dst <code>7</code></li> </ul> </li> <li>Flow Tx:<ul> <li>Device Interface: <code>otg1.eth[0]</code></li> <li>Connected to: Test Port <code>p1</code> with OTG location <code>te1:5555</code></li> </ul> </li> <li>Flow Rx:<ul> <li>Device Interface: <code>otg2.eth[0]</code></li> <li>Connected to: Test Port <code>p2</code> with OTG location <code>te2:5555</code></li> </ul> </li> </ul> <p>This configuration was generated by running:</p> <pre><code>otgen create device --port p1 --location \"te1:5555\" | \\\notgen add device --name otg2 --port p2 --location \"te2:5555\" \\\n                 --ip \"192.0.2.2\" --gw \"192.0.2.1\" | \\\notgen add flow --tx otg1 --rx otg2 \\\n&gt; device-flow.otg.yaml\n</code></pre>"},{"location":"examples/otg-examples/","title":"Open Traffic Generator examples","text":""},{"location":"examples/otg-examples/#overview","title":"Overview","text":"<p>OTG examples repository is a great way to get started with Open Traffic Generator API. It features a collection of software-only network labs ranging from very simple to more complex. To setup network labs in software we use containerized or virtualized NOS images.</p>"},{"location":"examples/otg-examples/#otg-tools","title":"OTG Tools","text":"<p>There are several implementations of OTG API. All the labs in this repository use Keysight Elastic Network Generator with different types of test ports:</p> <ul> <li>Ixia-c: Ixia-c containerized software Traffic Engine (TE) and Protocol Engine (PE)</li> <li>Ixia-c-one: a single-container package of Ixia-c for Containerlab</li> <li>IxOS Hardware: Keysight Elastic Network Generator with Keysight/Ixia L23 Network Test Hardware</li> </ul>"},{"location":"examples/otg-examples/#device-under-test","title":"Device Under Test","text":"<p>Many network vendors provide versions of their Network Operating Systems as a CNF or VNF. To make OTG Examples available for a widest range of users, our labs use open-source or freely available NOSes like FRR. Replacing FRR with a container from a different vendor is a matter of modifying one of the lab examples.</p> <p>Some examples don't have any DUT and use back-2-back connections between Test Ports. These are quite useful to make sure the Traffic Generator part works just fine by itself, before introducing a DUT.</p>"},{"location":"examples/otg-examples/#otg-client","title":"OTG Client","text":"<p>A job of an OTG Client is to communicating with a Traffic Generator via the OTG API and request it to perform tasks such as applying a configuration, starting protocols, running traffic, collecting metrics. Each example uses one (or sometimes more) of the following OTG Clients:</p> <ul> <li><code>curl</code> - The most basic utility for any kind of REST API calls, including OTG</li> <li><code>otgen</code> - This command-line utility comes as part of OTG toolkit. It is capable of manipulating a wide range of OTG features while hiding a lot of complexity from a user</li> <li><code>snappi</code> - Test scripts written in <code>snappi</code>, an auto-generated Python module, can be executed against any traffic generator conforming to the Open Traffic Generator API.</li> <li><code>gosnappi</code> - Similar to <code>snappi</code>, test scripts written in <code>gosnappi</code>, an auto-generated Go module, can be executed against any traffic generator conforming to the Open Traffic Generator API.</li> <li><code>ondatra</code> \u2013\u00a0Ondatra is a framework for writing and running tests against both real and containerized network devices. When executing a test via the Open Traffic Generator API, it uses <code>gosnappi</code> client library internally.</li> </ul>"},{"location":"examples/otg-examples/#infrastructure","title":"Infrastructure","text":"<p>To manage deployment of the example labs, we use one of the following tools:</p> <ul> <li>Docker Compose - general-purpose tool for defining and running multi-container Docker applications</li> <li>Containerlab - simple yet powerful specialized tool for orchestrating and managing container-based networking labs</li> <li>Ixia-c Operator \u2013\u00a0Ixia-c deployment orchestration engine compatible with K8s/KNE as well as Docker for Hybrid mode</li> <li>OpenConfig KNE \u2013\u00a0Kubernetes Network Emulation, which is a Google initiative to develop tooling for quickly setting up topologies of containers running various device OSes.</li> </ul>"},{"location":"examples/otg-examples/#ci-with-github-actions","title":"CI with Github Actions","text":"<p>Most of the lab examples include Github Action workflow for executing OTG tests on any changes to the lab code. This could serve as a template for your CI workflow.</p>"},{"location":"examples/otg-examples/#reference","title":"Reference","text":"Lab OTG Tool DUT Client Infrastructure CI B2B Ixia-c Traffic Ixia-c TE B2B <code>otgen</code> &amp; <code>snappi</code> Compose yes Static B2B LAG Ixia-c TE B2B <code>otgen</code> Containerlab yes FRR Ixia-c Traffic Ixia-c TE FRR <code>otgen</code> Containerlab yes 3xB2B Ixia-c Traffic Ixia-c TE B2B <code>otgen</code> Compose yes B2B Ixia-c BGP and traffic Ixia-c PE+TE B2B <code>gosnappi</code> Compose yes FRR Ixia-c ARP, BGP and traffic Ixia-c PE+TE FRR <code>curl</code> &amp; <code>otgen</code> Compose &amp; Clab yes Hello, snappi! Welcome to the Clab! Ixia-c-one B2B <code>snappi</code> Containerlab yes Dear snappi, please meet Scapy! Ixia-c-one B2B <code>scapy</code> &amp; <code>snappi</code> Containerlab yes RTBH Ixia-c-one FRR <code>gosnappi</code> Containerlab yes FeatureProfiles in Hybrid mode Ixia-c PE+TE B2B <code>ondatra</code> KENG Operator yes B2B IxOS Hardware IxOS Hardware B2B <code>snappi</code> &amp; <code>ondatra</code> Compose no cEOS BGP and Traffic in KNE Ixia-c PE+TE cEOS <code>otgen</code> KNE no"},{"location":"examples/otg-examples/#lab-descriptions","title":"Lab Descriptions","text":""},{"location":"examples/otg-examples/#b2b-ixia-c-traffic","title":"B2B Ixia-c Traffic","text":"<p>Ixia-c traffic engine back-to-back setup with Docker Compose. Fast and easy way to get started using <code>otgen</code> CLI tool.</p>"},{"location":"examples/otg-examples/#static-b2b-lag","title":"Static B2B LAG","text":"<p>Two Ixia-c Traffic Engines connected back-2-back in a Containerlab environment over two pairs of ports in a LAG. The goal is to demonstrate how to create a static Link Aggregation Group (LAG) consisting of two ports and run traffic over the LAG interface.</p>"},{"location":"examples/otg-examples/#frr-ixia-c-traffic","title":"FRR Ixia-c Traffic","text":"<p>Ixia-c Traffic Engine and FRR. Demonstrates how to deploy Ixia-c Traffic Engine nodes in Containerlab. This setup has an FRR container as a Device Under Test.</p>"},{"location":"examples/otg-examples/#3xb2b-ixia-c-traffic","title":"3xB2B Ixia-c Traffic","text":"<p>Ixia-c 3 back-to-back pairs setup with Docker Compose. This lab is an extension of Ixia-c back-2-back lab traffic engine setup with more port pairs that is allowed with free version of Ixia-c. Use this lab to validate Ixia-c commercial licensing for basic traffic operations.</p>"},{"location":"examples/otg-examples/#b2b-ixia-c-bgp-and-traffic","title":"B2B Ixia-c BGP and traffic","text":"<p>Ixia-c back-to-back BGP and traffic setup with Docker Compose. This is an extended version of a basic Ixia-c back-2-back lab with Ixia-c Protocol Engine added to emulate L2-3 protocols like BGP.</p>"},{"location":"examples/otg-examples/#ixia-c-keng-arp-bgp-and-traffic","title":"Ixia-c KENG ARP, BGP and traffic","text":"<p>Ixia-c ARP, BGP and traffic with FRR as a DUT. This lab demonstrates validation of an FRR DUT for basic BGP peering, prefix announcements and passing of traffic between announced subnets. The lab has two alternative deployment methods: Compose as well as Containerlab.</p>"},{"location":"examples/otg-examples/#hello-snappi-welcome-to-the-clab","title":"Hello, snappi! Welcome to the Clab!","text":"<p>Basics of creating a Python program to control Ixia-c-one node, all packaged in a Containerlab topology.</p>"},{"location":"examples/otg-examples/#dear-snappi-please-meet-scapy","title":"Dear snappi, please meet Scapy!","text":"<p>Joint use of Scapy packet crafting Python module with snappi, to generate custom DNS flows via Ixia-c-one node.</p>"},{"location":"examples/otg-examples/#rtbh","title":"RTBH","text":"<p>Remote Triggered Black Hole (RTBH) is a common DDoS mitigation technique which uses BGP announcements to request an ISP to drop all traffic to an IP address under a DDoS attack.</p>"},{"location":"examples/otg-examples/#featureprofiles-in-hybrid-mode","title":"FeatureProfiles in Hybrid mode","text":"<p>An introduction to OpenConfig FeatureProfiles test suites built with the Open Traffic Generator API.</p>"},{"location":"examples/otg-examples/#otg-with-ixia-l23-hardware-back-to-back-setup","title":"OTG with Ixia L23 Hardware: back-to-back setup","text":"<p>Demonstration of how the OTG API can be used to control Keysight/Ixia L23 Network Test Hardware, including an example of running OpenConfig FeatureProfiles test suites.</p>"},{"location":"examples/otg-examples/#kne-lab-with-bgp-and-traffic-via-arista-ceoslab-as-a-dut","title":"KNE Lab with BGP and traffic via Arista cEOSLab as a DUT","text":"<p>Validation of Arista cEOSLab DUT for basic BGP peering, prefix announcements and passing of traffic between announced subnets. To run OTG protocols and flows, Keysight Elastic Network Generator Community Edition is used with Ixia-c Traffic and Protocol Engine ports. To run the lab, OpenConfig KNE is used on top of a KIND cluster \u2013\u00a0K8s environment running inside a single Docker container.</p>"},{"location":"examples/otg-examples/KENG/","title":"Keysight Elastic Network Generator Licensing and Image Access","text":""},{"location":"examples/otg-examples/KENG/#license-editions","title":"License Editions","text":"<p>The following License Editions are available for Keysight Elastic Network Generator:</p> Capability Community Developer Team System Ixia-c Traffic Port Capacity 4 x 1/10GE 50GE 400GE 800GE Test Concurrency 1 Seat 1 Seat 8 Seats 16 Seats Protocol Scale Restricted Limited Limited Unlimited Requires a valid license N Y Y Y Includes Ixia-c Software Test Ports Y Y Y Y Works with UHD400T Hardware N N Y Y Works with IxOS Hardware N N N Y <p>The Ixia-c Traffic Port Capacity is determined as a sum of the configured Ixia-c software test port speeds with the possible values of: 100GE, 50GE, 40GE, 25GE, 10GE, and 1GE. The Maximum data plane performance of an Ixia-c port may be less than the configured port speed, depending on the capabilities of the underlying hardware and software drivers. Doesn't apply to the UHD400T and IxOS hardware.</p> <p>The Test seat concurrency applies to a number of controller instances that are running with a configuration that exceeds the capabilities of the Community Edition.</p> <p>The Restricted protocol scale supports the maximum of 4 BGP sessions per test.</p> <p>The Capabilities of the Limited protocol scale depend on the protocol. For details, contact Keysight Support.</p> <p>Keysight Elastic Network Generator can simultaneously consume multiple licenses to increase the capabilities of a test. For example, if the Ixia-c Traffic Port Capacity configured in one test is 100GE, two Developer licenses will be consumed if available.</p> <p>If you require capabilities beyond those provided by the Community Edition, use Keysight Elastic Network Generator product page to request an evaluation or a quote.</p>"},{"location":"examples/otg-examples/KENG/#license-server","title":"License Server","text":"<p>Keysight uses a license server to manage floating or network shared licenses for its software products. The license server enables licenses to float and not be tied to a specific Elastic Network Generator instance. The Elastic Network Generator controllers must be able to reach the License server.</p> <p>In order to use capabilities of Elastic Network Generator that require a valid license, you need to deploy a Keysight License Server. The License Server is a virtual machine and it is distributed as OVA and QCOW2 images (you only need one of them depending on your hypervisor).</p> <ul> <li>OVA image, 5.8GB</li> <li>QCOW2 image, 6GB</li> </ul> <p>To make a decision where to deploy the License Server VM, take into the account the following requirements:</p> <ul> <li>For VMware ESXi, use the OVA image</li> <li>For Linux-based QEMU or KVM, use the QCOW2 image</li> <li>2 vCPU cores</li> <li>8GB RAM for ESXi, 4GB RAM for QEMU/KVM</li> <li>100GB storage</li> <li>1 vNIC for network connectivity. Note that DHCP is the preferred option, and this is also how the VM is configured to obtain its IP address.</li> </ul> <p>Network connectivity requirements for the License Server VM</p> <ol> <li>Internet access from the VM over HTTPS is desirable for online license activation, but not strictly required. Offline activation method is available as well.</li> <li>Access from a user over SSH (TCP/22) for license operations (activation, deactivation, reservation, sync)</li> <li>Access from any <code>keng-controller</code> that needs a license during a test run over gRPC (TCP/7443) for license checkout and check-in</li> </ol> <p>Here is an example of how different components communicate with the License Server:</p> <p></p>"},{"location":"examples/otg-examples/KENG/#configuring-a-static-ip-address","title":"Configuring a static IP address","text":"<p>If your network doesn't provide DHCP, you can configure a static IP address for the License Server VM. Access the VM console and go through two-step login process: * first prompt: <code>console</code> (no password) * second promt: <code>admin</code>/<code>admin</code>. Run the following commands to configure a static IP address, where <code>x.x.x.x</code> is the IP address, <code>yy</code> is the prefix length, <code>z.z.z.z</code> is the default gateway, <code>a.a.a.a</code> and <code>b.b.b.b</code> are DNS servers:</p> <pre><code>kcos networking ip set mgmt0 x.x.x.x/yy z.z.z.z\nkcos networking dns-servers add a.a.a.a b.b.b.b\n</code></pre>"},{"location":"examples/otg-examples/KENG/#license-activation","title":"License Activation","text":"<p>You will now be able to activate licenses and use the License Server on your Elastic Network Generator setup. Go to <code>https://your-license-server-hostname</code> to access the application. Enter credentials: <code>admin</code>/<code>admin</code> to login.</p> <p>If you have an activation code, to perform an online activation, click \"Activate Licenses\", enter the code and click \"Activate\". For offline mode, choose \"Offline Operations\" instead.</p> <p>You can also use a command-line session, via console or SSH, to perform license operations. Run <code>kcos licensing --help</code> to see the list of available commands.</p>"},{"location":"examples/otg-examples/KENG/#connecting-elastic-network-generator-to-the-license-server","title":"Connecting Elastic Network Generator to the License Server","text":"<p>To connect the Elastic Network Generator controller instance to the License Server, use <code>--license-servers=\"server1 server2 server3 server4\"</code> argument when launching the controller. An alternative way is to use an environment variable <code>LICENSE_SERVERS</code>. The argument accepts a space-separated list of hostnames or IP addresses of the License Servers, up to four. The controller will try to connect to the License Servers in the order they are specified in the list. If the first License Server is not available, or doesn't have enough available licenses to run the test, the controller will try to connect to the next one in the list.</p>"},{"location":"examples/otg-examples/KENG/#access-to-private-images-on-github-container-registry","title":"Access to private images on Github Container Registry","text":"<p>Note: With introduction of licensing support, all the new versions of the Elastic Network Generator images are now openly published on Open Traffic Generator Container Registry. The following instructions are only applicable to the older versions of the images that are still available via private access.</p> <p>In order to use this method, you need a Github account. The account should be given access to private KENG images by Keysight team. Use \"Request Demo\" link on KENG page for that.</p> <p>Create a new personal access token (PAT) via https://github.com/settings/tokens/new:</p> <ul> <li>Note: ghcr.io</li> <li>Expiration: 90 days</li> <li>Scope: read:packages (should be already selected if the link above was used)</li> </ul> <p>Save the token in a password manager and use it for <code>CR_PAT</code> variable below. Also, don't forget to provide your github username for <code>CR_USERNAME</code></p> <pre><code>CR_PAT=YOUR_TOKEN\nCR_USERNAME=YOUR_USERNAME\necho $CR_PAT | docker login ghcr.io -u $CR_USERNAME --password-stdin\n</code></pre> <p>Pull KENG images to validate access (note, depending on the access provided, you might need to use a different set of images):</p> <pre><code>docker pull ghcr.io/open-traffic-generator/licensed/ixia-c-controller:0.0.1-4013\ndocker pull ghcr.io/open-traffic-generator/licensed/ixia-c-protocol-engine:1.00.0.299\n</code></pre>"},{"location":"examples/otg-examples/clab/cpdp-frr/","title":"Ixia-c ARP, BGP and traffic with FRR as a DUT","text":""},{"location":"examples/otg-examples/clab/cpdp-frr/#overview","title":"Overview","text":"<p>This lab demonstrates validation of an FRR DUT for basic BGP peering, prefix announcements and passing of traffic between announced subnets. To run OTG protocols and flows, Ixia-c Traffic and Protocol Engine are used.</p> <p>The same setup can be brought up using one of two methods:</p> <ul> <li>Docker Compose</li> <li>Containerlab</li> </ul> <p>Also, the same OTG test logic can be executed using one of two OTG clients:</p> <ul> <li><code>curl</code></li> <li><code>otgen</code></li> </ul> <p>Each method has its own benefits. With <code>curl</code>, you can try each individual OTG API call needed to complete the test. On the other hand, <code>otgen</code> demonstrates how all these steps could be easily executed with a single command. By comparing with <code>curl</code> <code>get_metrics</code> or <code>get_state</code> requests output, you can better understands the logic <code>otgen</code> is using to wait for the results of previous API calls to converge or complete. Finally, you can use <code>otgen run</code> source code as a starting point for custom test logic you could develop using <code>gosnappi</code> library.</p>"},{"location":"examples/otg-examples/clab/cpdp-frr/#lab-configuration","title":"Lab configuration","text":""},{"location":"examples/otg-examples/clab/cpdp-frr/#diagram","title":"Diagram","text":""},{"location":"examples/otg-examples/clab/cpdp-frr/#layer-3-topology-and-generated-traffic-flows","title":"Layer 3 topology and generated traffic flows","text":""},{"location":"examples/otg-examples/clab/cpdp-frr/#otg","title":"OTG","text":"<p>The lab uses <code>otg.json</code> configuration file with the following properties:</p> <p></p> <p>To request Ixia-c to use ARP to determine destination MAC address for a flow <code>f1</code>, the following flow properties are used. The <code>dst</code> parameter in the <code>packet</code> section uses <code>auto</code> mode. In addition, <code>tx_rx</code> section has to use names of emulated devices' IP interfaces, as in <code>\"tx_names\":  [\"otg1.eth[0].ipv4[0]\"]</code>.</p> <pre><code>  \"flows\":  [\n    {\n      \"tx_rx\":  {\n        \"choice\":  \"device\",\n        \"device\":  {\n          \"mode\":  \"mesh\",\n          \"tx_names\":  [\n            \"otg1.eth[0].ipv4[0]\"\n          ],\n          \"rx_names\":  [\n            \"otg2.eth[0].ipv4[0]\"\n          ]\n        }\n      },\n      \"packet\":  [\n        {\n          \"choice\":  \"ethernet\",\n          \"ethernet\":  {\n            \"dst\":  {\n              \"choice\":  \"auto\",\n              \"auto\":  \"00:00:00:00:00:00\"\n            },\n            \"src\":  {\n              \"choice\":  \"value\",\n              \"value\":  \"02:00:00:00:01:aa\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n</code></pre>"},{"location":"examples/otg-examples/clab/cpdp-frr/#quick-start","title":"Quick start","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\ncd otg-examples/docker-compose/cpdp-frr\n</code></pre> </li> <li> <p>To run all the steps below at once using Docker Compose, execute:</p> <pre><code>make all\nmake clean\n</code></pre> </li> <li> <p>To use Containerlab option, run:</p> <pre><code>make all-clab\nmake clean\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/cpdp-frr/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support</li> <li>Docker</li> <li><code>curl</code> command</li> <li><code>watch</code> command (optional)</li> <li><code>jq</code> command (optional)</li> </ul>"},{"location":"examples/otg-examples/clab/cpdp-frr/#install-components","title":"Install components","text":"<ol> <li> <p>Install <code>docker-compose</code> and add yourself to <code>docker</code> group. Logout for group changes to take effect.</p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo usermod -aG docker $USER\nlogout\n</code></pre> </li> <li> <p>For Containerlab use case, install the latest release. For more installation options see here.</p> <pre><code>bash -c \"$(curl -sL https://get.containerlab.dev)\"\n</code></pre> </li> <li> <p>Install <code>otgen</code> tool, version <code>0.6.2</code> or later.</p> <pre><code>bash -c \"$(curl -sL https://get.otgcdn.net/otgen)\" -- -v 0.6.2\n</code></pre> </li> <li> <p>Make sure <code>/usr/local/bin</code> is in your <code>$PATH</code> variable (by default this is not the case on CentOS 7)</p> <pre><code>cmd=docker-compose\ndir=/usr/local/bin\nif ! command -v ${cmd} &amp;&gt; /dev/null &amp;&amp; [ -x ${dir}/${cmd} ]; then\n  echo \"${cmd} exists in ${dir} but not in the PATH, updating PATH to:\"\n  PATH=\"/usr/local/bin:${PATH}\"\n  echo $PATH\nfi\n</code></pre> </li> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/cpdp-frr/#docker-compose-option-to-deploy-the-lab","title":"Docker Compose option to deploy the lab","text":"<ol> <li> <p>Launch the deployment using Docker Compose</p> <pre><code>cd otg-examples/docker-compose/cpdp-frr\ndocker-compose up -d\nsudo docker ps\n</code></pre> </li> <li> <p>Make sure you have all five containers running. The result should look like this</p> <pre><code>CONTAINER ID   IMAGE                                                              COMMAND                  CREATED         STATUS         PORTS                                                                                      NAMES\n0ea1e56720ac   ghcr.io/open-traffic-generator/ixia-c-protocol-engine:1.00.0.337   \"/docker_im/opt/Ixia\u2026\"   3 seconds ago   Up 3 seconds                                                                                              cpdp-frr_protocol_engine_1_1\n44f4c9fb8b3e   ghcr.io/open-traffic-generator/ixia-c-protocol-engine:1.00.0.337   \"/docker_im/opt/Ixia\u2026\"   3 seconds ago   Up 3 seconds                                                                                              cpdp-frr_protocol_engine_2_1\n6e50d4cad6a6   ghcr.io/open-traffic-generator/keng-controller:0.1.0-3             \"./bin/controller --\u2026\"   4 seconds ago   Up 4 seconds                                                                                              cpdp-frr_controller_1\n7fe400f12196   quay.io/frrouting/frr:8.4.2                                        \"/sbin/tini -- /usr/\u2026\"   4 seconds ago   Up 3 seconds                                                                                              cpdp-frr_frr_1\n2a7e1c124cbd   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85      \"./entrypoint.sh\"        4 seconds ago   Up 3 seconds   0.0.0.0:5556-&gt;5556/tcp, :::5556-&gt;5556/tcp, 0.0.0.0:50072-&gt;50071/tcp, :::50072-&gt;50071/tcp   cpdp-frr_traffic_engine_2_1\ncbc0a64278cc   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85      \"./entrypoint.sh\"        4 seconds ago   Up 3 seconds   0.0.0.0:5555-&gt;5555/tcp, :::5555-&gt;5555/tcp, 0.0.0.0:50071-&gt;50071/tcp, :::50071-&gt;50071/tcp   cpdp-frr_traffic_engine_1_1\np\n</code></pre> </li> <li> <p>Interconnect traffic engine containers via a veth pair</p> <pre><code>sudo ../../utils/connect_containers_veth.sh cpdp-frr_traffic_engine_1_1 cpdp-frr_frr_1 veth0 veth1\nsudo ../../utils/connect_containers_veth.sh cpdp-frr_traffic_engine_2_1 cpdp-frr_frr_1 veth2 veth3\n</code></pre> </li> <li> <p>Check traffic and protocol engine logs to see if they picked up veth interfaces</p> <pre><code>sudo docker logs cpdp-frr_traffic_engine_1_1\nsudo docker logs cpdp-frr_traffic_engine_2_1\nsudo docker logs cpdp-frr_protocol_engine_1_1\nsudo docker logs cpdp-frr_protocol_engine_2_1\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/cpdp-frr/#containerlab-option-to-deploy-the-lab","title":"Containerlab option to deploy the lab","text":"<ol> <li> <p>Launch the deployment using Containerlab</p> <pre><code>cd otg-examples/docker-compose/cpdp-frr\nsudo -E containerlab deploy\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/cpdp-frr/#run-tests-curl-option","title":"Run tests, <code>curl</code> option","text":"<ol> <li> <p>Apply config</p> <pre><code>OTG_HOST=\"https://localhost:8443\"\ncurl -k \"${OTG_HOST}/config\" \\\n    -H \"Content-Type: application/json\" \\\n    -d @otg.json\n</code></pre> </li> <li> <p>Start protocols</p> <pre><code>curl -k \"${OTG_HOST}/control/state\" \\\n    -H  \"Content-Type: application/json\" \\\n    -d '{\"choice\": \"protocol\",\"protocol\": {\"choice\": \"all\",\"all\": {\"state\": \"start\"}}}'\n</code></pre> </li> <li> <p>Fetch ARP table</p> <pre><code>curl -sk \"${OTG_HOST}/monitor/states\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \"choice\": \"ipv4_neighbors\" }'\n</code></pre> </li> <li> <p>Fetch BGP metrics (stop with <code>Ctrl-c</code>)</p> <pre><code>watch -n 1 \"curl -sk \\\"${OTG_HOST}/monitor/metrics\\\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \\\"choice\\\": \\\"bgpv4\\\" }'\"\n</code></pre> </li> <li> <p>Fetch BGP prefix announcements - TODO this doesn't show the actual announcements</p> <pre><code>curl -sk \"${OTG_HOST}/monitor/states\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \"choice\": \"bgp_prefixes\" }'\n</code></pre> </li> <li> <p>Start transmitting flows</p> <pre><code>curl -sk \"${OTG_HOST}/control/state\" \\\n    -H  \"Content-Type: application/json\" \\\n    -d '{\"choice\": \"traffic\", \"traffic\": {\"choice\": \"flow_transmit\", \"flow_transmit\": {\"state\": \"start\"}}}'\n</code></pre> </li> <li> <p>Fetch flow metrics (stop with <code>Ctrl-c</code>)</p> <pre><code>watch -n 1 \"curl -sk \\\"${OTG_HOST}/monitor/metrics\\\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \\\"choice\\\": \\\"flow\\\" }'\"\n</code></pre> </li> <li> <p>Fetch port metrics</p> <pre><code>curl -sk \"${OTG_HOST}/monitor/metrics\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \"choice\": \"port\" }'\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/cpdp-frr/#run-tests-otgen-option","title":"Run tests, <code>otgen</code> option","text":"<ol> <li> <p>Use one <code>otgen run</code> command to repeat all of the steps above. Note <code>--rxbgp 2x</code> parameter. We use it to tell <code>otgen</code> it should wait, after starting the protocols, until twice as many routes were received from the DUT, than were advertised by KENG. For our lab configuration it would be the signal that BGP protocol has converged. In other setups this parameter might be different.</p> <pre><code>export OTG_API=\"https://localhost:8443\"\notgen --log info run --insecure --file otg.json --json --rxbgp 2x --metrics flow | jq\n</code></pre> </li> <li> <p>To format output as a table, use the modified command below. Note, there will be no log output in this case, so be patient to wait for the table output to appear.</p> <pre><code>otgen run --insecure --file otg.json --json --rxbgp 2x --metrics flow | otgen transform --metrics flow | otgen display --mode table\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/cpdp-frr/#destroy-the-lab","title":"Destroy the lab","text":"<ul> <li> <p>To destroy the lab brought up via Docker Compose, including veth pairs, use:</p> <pre><code>docker-compose down\n</code></pre> </li> <li> <p>To destroy the lab brought up via Containerlab, use:</p> <pre><code>sudo containerlab destroy -c\n</code></pre> </li> </ul>"},{"location":"examples/otg-examples/clab/cpdp-frr/#credits","title":"Credits","text":"<ul> <li><code>connect_containers_veth.sh</code> copyright of Levente Csikor, with modifications to replace <code>ifconfig</code> with <code>ip link</code>.</li> </ul>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/","title":"Hello, snappi!  Welcome to the Clab!","text":""},{"location":"examples/otg-examples/clab/ixia-c-b2b/#overview","title":"Overview","text":"<p>This is a simple lab where an Ixia-c-one node has two traffic ports connected back-2-back in a Containerlab environment. The goal is to demonstrate basics of creating a Python program to control Ixia-c via <code>snappi</code> SDK.</p>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support. See some ready-to-use options below</li> <li><code>git</code> - how to install depends on your Linux distro.</li> <li>Docker</li> <li>Containerlab</li> </ul>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#clone-the-repository","title":"Clone the repository","text":"<ol> <li> <p>Clone this repository to the Linux host where you want to run the lab. Do this only once.</p> <pre><code>git clone --recurse-submodules https://github.com/open-traffic-generator/otg-examples.git\n</code></pre> </li> <li> <p>Navigate to the lab folder</p> <pre><code>cd otg-examples/clab/ixia-c-b2b\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#prepare-a-snappi-container-image","title":"Prepare a <code>snappi</code> container image","text":"<p>Run the following only once, to build a container image where <code>snappi</code> program will execute:</p> <pre><code>sudo docker build -t snappi:local .\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#deploy-a-lab","title":"Deploy a lab","text":"<pre><code>sudo -E containerlab deploy -t topo.yml\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#run-snappi-test","title":"Run snappi test","text":"<pre><code>sudo docker exec -it clab-ixcb2b-snappi bash -c \"python otg.py\"\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#destroy-the-lab","title":"Destroy the lab","text":"<pre><code>sudo -E containerlab destroy -t topo.yml\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#options-for-linux-vm-deployment-for-containerlab","title":"Options for Linux VM deployment for Containerlab","text":""},{"location":"examples/otg-examples/clab/ixia-c-b2b/#containerlab-vm-deployment-on-mac-using-multipass","title":"Containerlab VM deployment on Mac using Multipass","text":"<ol> <li> <p>If you're on Mac, an example below can be used to create an Ubuntu 20.04LTS VM <code>otg-demo</code>, using Multipass. Ubuntu 22.04 is not yet supported for this test.</p> <pre><code>multipass launch 20.04 -n otg-demo -c4 -m8G -d32G\nmultipass shell otg-demo\nsudo apt update &amp;&amp; sudo apt install docker.io -y\nbash -c \"$(curl -sL https://get.containerlab.dev)\"\n</code></pre> </li> <li> <p>Delete the VM after testing is done</p> <pre><code>multipass stop otg-demo\nmultipass delete otg-demo\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#containerlab-vm-deployment-in-google-cloud","title":"Containerlab VM deployment in Google Cloud","text":"<ol> <li> <p>Create a VM in a default VPC</p> <pre><code>gcloud compute instances create otg-demo \\\n--subnet=default \\\n--machine-type=e2-standard-8 \\\n--image-family=ubuntu-2004-lts \\\n--image-project=ubuntu-os-cloud \\\n--boot-disk-size=30GB \\\n--boot-disk-device-name=otg-demo \\\n--tags=otg-demo\n\ngcloud compute ssh otg-demo\nsudo apt update &amp;&amp; sudo apt install docker.io -y\nbash -c \"$(curl -sL https://get.containerlab.dev)\"\n</code></pre> </li> <li> <p>Delete all resources and the VM after testing is done</p> <pre><code>gcloud compute instances delete otg-demo\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#misc","title":"Misc","text":""},{"location":"examples/otg-examples/clab/ixia-c-b2b/#cli-access-to-nodes","title":"CLI access to nodes","text":"<pre><code># ixia-c\nsudo docker exec -it clab-ixcb2b-ixia-c sh\nsudo docker exec -it clab-ixcb2b-snappi bash\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/#credits","title":"Credits","text":"<p>This work os based on:    * Hello, snappi!</p>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/","title":"Dear snappi, please meet Scapy!","text":""},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#overview","title":"Overview","text":"<p>As Scapy Project puts it:</p> <p>Scapy is a powerful interactive packet manipulation program. It is able to forge or decode packets of a wide number of protocols, send them on the wire, capture them, match requests and replies, and much more.</p> <p>In other words, Scapy allows you to craft any packet you want, including L2-4 headers as well as L7 payload. It can also send these packets into a network, as is.</p> <p>Meanwhile, the Open Traffic Generator API with its Python client library snappi, is really great with scaling up the task of putting the packets onto a wire by leveraging OTG-compliant traffic generators, like Ixia-c. The OTG supports the notion of flows, with precise capabilities to schedule packet transmission - rate, interval, duration. It also has rich capabilities to iterate over ranges of MAC and IP addresses, TCP/UDP ports and other parameters.</p> <p>Wouldn't it be nice if these two could meet and work as a team?</p>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#how-would-it-work","title":"How would it work?","text":"<p>Let's assume you want to stress-test a network device with a large number of specific packets. For example, DNS requests &amp; replies. With Scapy, it is easy to craft such payload. Note, how Scapy allows you to create a subset of packet layers. In this case, we're skipping Ethernet, IP and UDP, as OTG would take care of them.</p> <pre><code>from scapy.all import *\n\n# create custom DNS request payloads with Scapy\nrequests = [DNS(id=0, rd=1, qr=0, qd=DNSQR(qtype=\"A\",    qname=\"example.com\")),\n            DNS(id=1, rd=1, qr=0, qd=DNSQR(qtype=\"AAAA\", qname=\"example.com\"))]\n</code></pre> <p>Now, with snappi, we can use these payloads to create a dedicated flow for each Scapy packet, with duration and rate we need.</p> <pre><code>import snappi\n\napi = snappi.api(location=OTG_API, verify=False)\ncfg = api.config()\npacket_count = 10 # send 10 packets per each flow\n\n# flows for requests\nfor i in range(len(requests)): \n    n = \"request\" + str(i)\n    f = cfg.flows.flow(name=n)[-1]\n    # will use UDP with custom payload\n    eth, ip, udp, payload = f.packet.ethernet().ipv4().udp().custom()\n    eth.src.value, eth.dst.value = \"02:00:00:00:01:AA\", \"02:00:00:00:02:AA\"\n    ip.src.value, ip.dst.value = \"192.0.2.1\", \"192.0.2.2\"\n    # increment UDP source port number for each packet\n    udp.src_port.increment.start = 1024\n    udp.src_port.increment.step = 1\n    udp.src_port.increment.count = requests_count\n    udp.dst_port.value = 53\n    # copy a payload from Scapy packet into a snappi flow\n    payload.bytes = requests[i].build().hex() \n    # number of packets to transmit\n    f.duration.fixed_packets.packets = requests_count\n    # delay between flows to simulate a sequence of packets: 1ms\n    f.duration.fixed_packets.delay.microseconds = 1000 * i\n</code></pre> <p>Some details above are omitted, see scapy2otg.py for more.</p> <p>As a result, the produced OTG configuration of the first flow of the DNS requests will have a custom payload after the UDP layer (see the very end of the YAML below):</p> <pre><code>flows:\n- duration:\n    choice: fixed_packets\n    fixed_packets:\n      delay:\n        choice: microseconds\n        microseconds: 0\n      gap: 12\n      packets: 10\n  metrics:\n    enable: true\nname: request0\n  packet:\n  - choice: ethernet\n    ethernet:\n      dst:\n        choice: value\n        value: 02:00:00:00:02:AA\n      src:\n        choice: value\n        value: 02:00:00:00:01:AA\n  - choice: ipv4\n    ipv4:\n      dst:\n        choice: value\n        value: 192.0.2.2\n      src:\n        choice: value\n        value: 192.0.2.1\n  - choice: udp\n    udp:\n      dst_port:\n        choice: value\n        value: 53\n      src_port:\n        choice: increment\n        increment:\n          count: 10\n          start: 1024\n          step: 1\n  - choice: custom\n    custom:\n      bytes: 000001000001000000000000076578616d706c6503636f6d0000010001\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#captured-framed","title":"Captured &amp; Framed","text":"<p>When captured, the packet frames generated by Ixia-c look as DNS queries in Wireshark, with the exception of additional data signature Ixia-c adds at the end of each packet. The signature is needed to identify each packet at the receiving side, and measure latency, packet loss and other metrics. If you look into scapy2otg.py, the following line instructs Ixia-c to add the signature: <code>f.metrics.enable = True</code>.</p> <p></p> <p>An alternative implementation that uses port-level metrics instead of packet signatures can be found in scapy2otg-port.py</p>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#giving-it-a-try","title":"Giving it a try","text":""},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support. See some ready-to-use options</li> <li><code>git</code> - how to install depends on your Linux distro.</li> <li>Docker</li> <li>Containerlab</li> <li> <p>Clone of the repository</p> <pre><code>git clone --recurse-submodules https://github.com/open-traffic-generator/otg-examples.git\ncd otg-examples/clab/ixia-c-b2b\n</code></pre> </li> </ul> <pre><code>make install build deploy run-scapy clean\n</code></pre> <p>Open <code>p1.pcap</code> and <code>p2.pcap</code> to inspect captured packets.</p> <p>Otherwise, follow a step-by-step guide:</p>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#tldr-version","title":"TLDR version","text":""},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#prepare-a-snappi-container-image","title":"Prepare a <code>snappi</code> container image","text":"<p>Run the following only once, to build a container image where <code>snappi</code> program will execute:</p> <pre><code>sudo docker build -t snappi:local .\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#deploy-a-lab","title":"Deploy a lab","text":"<pre><code>sudo -E containerlab deploy -t topo.yml\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#run-scapy2otg-test","title":"Run scapy2otg test","text":"<pre><code>sudo docker exec -it clab-ixcb2b-snappi bash -c \"OTG_API='https://clab-ixcb2b-ixia-c:8443' OTG_LOCATION_P1=eth1 OTG_LOCATION_P2=eth2 python scapy2otg.py\"\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b/SCAPY/#destroy-the-lab","title":"Destroy the lab","text":"<pre><code>sudo -E containerlab destroy -t topo.yml\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b-lag/","title":"Static B2B LAG","text":""},{"location":"examples/otg-examples/clab/ixia-c-b2b-lag/#overview","title":"Overview","text":"<p>In this lab two Ixia-c Traffic Engines have a pairs of traffic ports each connected back-2-back in a Containerlab environment. The goal is to demonstrate how to create a static Link Aggregation Group (LAG) consisting of two ports and run traffic over the LAG interface.</p> <p></p>"},{"location":"examples/otg-examples/clab/ixia-c-b2b-lag/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support</li> <li><code>git</code> - how to install depends on your Linux distro</li> <li>Docker</li> <li>Containerlab</li> </ul>"},{"location":"examples/otg-examples/clab/ixia-c-b2b-lag/#clone-the-repository","title":"Clone the repository","text":"<ol> <li> <p>Clone this repository to the Linux host where you want to run the lab. Do this only once.</p> <pre><code>git clone --recurse-submodules https://github.com/open-traffic-generator/otg-examples.git\n</code></pre> </li> <li> <p>Navigate to the lab folder</p> <pre><code>cd otg-examples/clab/ixia-c-one-b2b-lag\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/ixia-c-b2b-lag/#install-components","title":"Install components","text":"<ol> <li> <p>Install <code>otgen</code></p> <pre><code>bash -c \"$(curl -sL https://get.otgcdn.net/otgen)\" -- -v 0.6.2\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/ixia-c-b2b-lag/#deploy-a-lab","title":"Deploy a lab","text":"<pre><code>sudo -E containerlab deploy -t topo.yml\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-b2b-lag/#run-otgen-tests","title":"Run otgen tests","text":"<ol> <li> <p>Flow-based statistics over the LAG</p> <pre><code>otgen run --insecure --file otg.yaml --yaml --metrics flow | otgen transform --metrics flow | otgen display -m table\n</code></pre> </li> <li> <p>Individual port statistics showing packet distribution over the LAG members</p> <pre><code>otgen run --insecure --file otg.yaml --yaml --metrics port | otgen transform --metrics port | otgen display -m table\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/ixia-c-b2b-lag/#destroy-the-lab","title":"Destroy the lab","text":"<pre><code>sudo -E containerlab destroy -t topo.yml\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-te-frr/","title":"Ixia-c Traffic Engine and FRR with Containerlab","text":""},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#overview","title":"Overview","text":"<p>In this setup, we demonstrate how to deploy Ixia-c Traffic Engine nodes in Containerlab. This setup has an FRR container as a Device Under Test (DUT). Finally, we use <code>otgen</code> CLI tool to run the test and report statistics.</p>"},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#diagram","title":"Diagram","text":""},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#layer-3-topology-and-generated-traffic-flows","title":"Layer 3 topology and generated traffic flows","text":""},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#quick-start","title":"Quick start","text":"<p>Follow this sections for a quick version of how to run the lab using <code>make</code>. This is how CI pipeline in GitHub Actions runs it.</p> <ol> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\ncd otg-examples/clab/ixia-c-te-frr\n</code></pre> </li> <li> <p>To run all the steps below at once, execute:</p> <pre><code>make all\nmake clean\n</code></pre> </li> </ol> <p>Otherwise, follow step-by-step instructions below.</p>"},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support</li> <li><code>git</code> - how to install depends on your Linux distro.</li> <li>Docker</li> <li>Containerlab</li> <li> <p>otgen</p> <pre><code>bash -c \"$(curl -sL https://get.otgcdn.net/otgen)\" -- -v 0.6.2\n</code></pre> </li> <li> <p>Make sure <code>/usr/local/bin</code> is in your <code>$PATH</code> variable (by default this is not the case on CentOS 7)</p> <pre><code>cmd=otgen\ndir=/usr/local/bin\nif ! command -v ${cmd} &amp;&gt; /dev/null &amp;&amp; [ -x ${dir}/${cmd} ]; then\n  echo \"${cmd} exists in ${dir} but not in the PATH, updating PATH to:\"\n  PATH=\"/usr/local/bin:${PATH}\"\n  echo $PATH\nfi\n</code></pre> </li> </ul>"},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#clone-the-repository","title":"Clone the repository","text":"<ol> <li> <p>Clone this repository to the Linux host where you want to run the lab. Do this only once.</p> <pre><code>git clone https://github.com/open-traffic-generator/otg-examples.git\n</code></pre> </li> <li> <p>Navigate to the lab folder</p> <pre><code>cd otg-examples/clab/ixia-c-te-frr\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#deploy-a-lab","title":"Deploy a lab","text":"<pre><code>sudo containerlab deploy\n</code></pre>"},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#run-traffic","title":"Run traffic","text":"<ol> <li> <p>Read MAC addresses assigned to the nodes</p> <pre><code>TE1SMAC=`cat clab-ixctedut/topology-data.json | jq -r '.links[0][\"a\"].mac'`\nTE1DMAC=`cat clab-ixctedut/topology-data.json | jq -r '.links[0][\"z\"].mac'`\nTE2SMAC=`cat clab-ixctedut/topology-data.json | jq -r '.links[1][\"a\"].mac'`\nTE2DMAC=`cat clab-ixctedut/topology-data.json | jq -r '.links[1][\"z\"].mac'`\n</code></pre> </li> <li> <p>Run traffic defined in otg.yml with <code>otgen</code> tool, taking care to replace stub MAC addresses with current values</p> <pre><code>export OTG_API=\"https://localhost:8443\"\ncat otg.yml | \\\nsed \"s/00:00:00:00:11:aa/$TE1SMAC/g\" | sed \"s/00:00:00:00:11:bb/$TE1DMAC/g\" | \\\nsed \"s/00:00:00:00:22:aa/$TE2SMAC/g\" | sed \"s/00:00:00:00:22:bb/$TE2DMAC/g\" | \\\notgen run -k | \\\notgen transform -m port | \\\notgen display -m table\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/ixia-c-te-frr/#destroy-the-lab","title":"Destroy the lab","text":"<pre><code>sudo containerlab destroy\n</code></pre>"},{"location":"examples/otg-examples/clab/rtbh/","title":"Remote Triggered Black Hole Scenario","text":""},{"location":"examples/otg-examples/clab/rtbh/#overview","title":"Overview","text":"<p>Remote Triggered Black Hole (RTBH) is a common DDoS mitigation technique. It uses BGP anouncements to request an ISP to drop all traffic to an IP address under a DDoS attack.</p> <p>Read a blog post dedicated to this scenario.</p> <p></p>"},{"location":"examples/otg-examples/clab/rtbh/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support. See some ready-to-use options below</li> <li><code>git</code> and <code>build-essential</code> packages - how to install depends on your Linux distribution</li> <li>Docker</li> <li>Containerlab</li> <li>Access to the Linux host from your computer over TCP ports 22 (SSH), 8008 (DDoS Protect Dashboard) and 8080 (Graphite topology visualization)</li> </ul>"},{"location":"examples/otg-examples/clab/rtbh/#clone-the-repository","title":"Clone the repository","text":"<ol> <li> <p>Clone this repository to the Linux host where you want to run the lab. Do this only once.</p> <pre><code>git clone --recursive --single-branch https://github.com/open-traffic-generator/otg-examples.git\n</code></pre> </li> <li> <p>Navigate to the lab folder</p> <pre><code>cd otg-examples/clab/rtbh\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/rtbh/#prepare-a-gosnappi-container-image","title":"Prepare a <code>gosnappi</code> container image","text":"<p>Run the following only once, to build a container image where <code>go test</code> command would execute. This step will pre-load all the Go modules needed by the test into the local <code>gosnappi</code> image. </p> <pre><code>sudo docker build -t gosnappi:local .\n</code></pre>"},{"location":"examples/otg-examples/clab/rtbh/#deploy-the-topology-with-containerlab","title":"Deploy the topology with Containerlab","text":"<pre><code>sudo -E containerlab deploy -t topo.yml\n</code></pre>"},{"location":"examples/otg-examples/clab/rtbh/#open-ddos-protect-dashboard","title":"Open DDoS Protect Dashboard","text":"<p>As the lab is being deployed, in Containerlab output you should see a line like this:</p> <p>DDoS Protect Dashboard \ud83d\udee1\ufe0f  http://some-ip-address:8008/app/ddos-protect/html/index.html</p> <p>Open the link in the browser to see the DDoS Protect Dashboard</p>"},{"location":"examples/otg-examples/clab/rtbh/#run-otg-test","title":"Run OTG Test","text":"<p>Execute the test by running <code>go test</code> in <code>clab-rtbh-gosnappi</code> container. Note, it will take some time for Golang to compile the test binary, so expect a delay before the test starts running.</p> <pre><code>DMAC=`sudo docker exec clab-rtbh-pe-router vtysh -c  'sh interface eth2 | include HWaddr' | awk \"{print \\\\$2}\"`\nsudo docker exec -it clab-rtbh-gosnappi bash -c \"go test -dstMac=${DMAC}\"\n</code></pre>"},{"location":"examples/otg-examples/clab/rtbh/#destroy-the-lab","title":"Destroy the lab","text":"<pre><code>sudo -E containerlab destroy -t topo.yml\n</code></pre>"},{"location":"examples/otg-examples/clab/rtbh/#options-for-linux-vm-deployment-for-containerlab","title":"Options for Linux VM deployment for Containerlab","text":""},{"location":"examples/otg-examples/clab/rtbh/#containerlab-vm-deployment-on-mac-using-multipass","title":"Containerlab VM deployment on Mac using Multipass","text":"<ol> <li> <p>If you're on Mac, an example below can be used to create an Ubuntu 20.04LTS VM <code>otg-demo</code>, using Multipass. Ubuntu 22.04 is not yet supported for this test.</p> <pre><code>multipass launch 20.04 -n otg-demo -c4 -m8G -d32G\nmultipass shell otg-demo\nsudo apt update &amp;&amp; sudo apt install docker.io -y\nbash -c \"$(curl -sL https://get.containerlab.dev)\"\n</code></pre> </li> <li> <p>Delete the VM after testing is done</p> <pre><code>multipass stop otg-demo\nmultipass delete otg-demo\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/rtbh/#containerlab-vm-deployment-in-google-cloud","title":"Containerlab VM deployment in Google Cloud","text":"<ol> <li> <p>Create a VM in a default VPC, with needed firewall rules and all the nessesary components</p> <pre><code>MYIP=`curl ifconfig.me`\n\ngcloud compute firewall-rules create otg-demo-allow-8008 --description=\"Allow tcp 8008 ingress to any instance tagged as otg-demo\" --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:8008 --source-ranges=\"$MYIP/32\" --target-tags=otg-demo\ngcloud compute firewall-rules create otg-demo-allow-8080 --description=\"Allow tcp 8080 ingress to any instance tagged as otg-demo\" --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:8080 --source-ranges=\"$MYIP/32\" --target-tags=otg-demo\n\ngcloud compute instances create otg-demo \\\n--subnet=default \\\n--machine-type=e2-standard-8 \\\n--image-family=ubuntu-2004-lts \\\n--image-project=ubuntu-os-cloud \\\n--boot-disk-size=30GB \\\n--boot-disk-device-name=otg-demo \\\n--tags=otg-demo\n\ngcloud compute ssh otg-demo\nsudo apt update &amp;&amp; sudo apt install docker.io build-essential -y\nbash -c \"$(curl -sL https://get.containerlab.dev)\"\n</code></pre> </li> <li> <p>Delete all resources and the VM after testing is done (run them one by one, as you'll need to confirm it is OK to delete)</p> <pre><code>gcloud compute instances delete otg-demo\ngcloud compute firewall-rules delete otg-demo-allow-8008\ngcloud compute firewall-rules delete otg-demo-allow-8080\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/clab/rtbh/#misc","title":"Misc","text":""},{"location":"examples/otg-examples/clab/rtbh/#topology-visualization","title":"Topology Visualization","text":"<p>As part of the lab <code>topo.yml</code> definitions, there is a topology visualization module included, called Graphite. As the lab is being deployed, in Containerlab output you should see a line like this:</p> <p>Graphite visualization \ud83c\udfa8 http://some-ip-address:8080/graphite</p> <p>Open the link in the browser to see a graphical representation of the topology.</p>"},{"location":"examples/otg-examples/clab/rtbh/#cli-access-to-nodes","title":"CLI access to nodes","text":"<pre><code># pe-router\nsudo docker exec -it clab-rtbh-pe-router vtysh\n# ce-router\nsudo docker exec -it clab-rtbh-ce-router vtysh\n# ixia\nsudo docker exec -it clab-rtbh-ixia sh\n# controller\nsudo docker exec -it clab-rtbh-controller sh\n</code></pre>"},{"location":"examples/otg-examples/clab/rtbh/#credits","title":"Credits","text":"<p>Original lab design: </p> <ul> <li>BGP Remotely Triggered Black Hole (RTBH)</li> <li>sflow-rt github repository</li> </ul>"},{"location":"examples/otg-examples/docker-compose/b2b/","title":"Ixia-c traffic engine back-to-back setup with Docker Compose","text":""},{"location":"examples/otg-examples/docker-compose/b2b/#overview","title":"Overview","text":"<p>This is a basic lab where Ixia-c has two traffic ports connected back-2-back using a veth pair. The lab is defined via Docker Compose YAML file. Once the lab is up, a CLI tool <code>otgen</code> is used to request Ixia-c to generate traffic and report statistics.</p> <p></p>"},{"location":"examples/otg-examples/docker-compose/b2b/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support</li> <li>Docker</li> <li>Python3.9 for <code>snappi</code> part</li> </ul>"},{"location":"examples/otg-examples/docker-compose/b2b/#install-components","title":"Install components","text":"<ol> <li> <p>Install <code>docker-compose</code></p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n</code></pre> </li> <li> <p>Install <code>otgen</code></p> <pre><code>bash -c \"$(curl -sL https://get.otgcdn.net/otgen)\" -- -v 0.6.2\n</code></pre> </li> <li> <p>Make sure <code>/usr/local/bin</code> is in your <code>$PATH</code> variable (by default this is not the case on CentOS 7)</p> <pre><code>cmd=docker-compose\ndir=/usr/local/bin\nif ! command -v ${cmd} &amp;&gt; /dev/null &amp;&amp; [ -x ${dir}/${cmd} ]; then\n  echo \"${cmd} exists in ${dir} but not in the PATH, updating PATH to:\"\n  PATH=\"/usr/local/bin:${PATH}\"\n  echo $PATH\nfi\n</code></pre> </li> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\ncd otg-examples/docker-compose/b2b\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b/#deploy-ixia-c-lab","title":"Deploy Ixia-c lab","text":"<ol> <li> <p>Create veth pair <code>veth0 - veth1</code></p> <pre><code>sudo ip link add name veth0 type veth peer name veth1\nsudo ip link set dev veth0 up\nsudo ip link set dev veth1 up\nsudo sysctl net.ipv6.conf.veth0.disable_ipv6=1\nsudo sysctl net.ipv6.conf.veth1.disable_ipv6=1\n</code></pre> </li> <li> <p>Launch the deployment and adjust MTUs on the veth pair</p> <pre><code>sudo docker-compose up -d\nsudo ip link set veth0 mtu 9500\nsudo ip link set veth1 mtu 9500\n</code></pre> </li> <li> <p>Make sure you have all three containers running:</p> <pre><code>sudo docker ps\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b/#run-otg-traffic-flows-with-otgen-tool","title":"Run OTG traffic flows with <code>otgen</code> tool","text":"<ol> <li> <p>Start with using <code>otgen</code> to request Ixia-c to run traffic flows defined in <code>otg.yml</code>. If successful, the result will come as OTG port metrics in JSON format</p> <pre><code>cat otg.yml | otgen run -k -a https://localhost:8443\n</code></pre> </li> <li> <p>You can now repeat this exercise, but transform output to a table</p> <pre><code>cat otg.yml | otgen run -k -a https://localhost:8443 | otgen transform -m port | otgen display -m table\n</code></pre> </li> <li> <p>The same, but with flow metrics</p> <pre><code>cat otg.yml | otgen run -k -a https://localhost:8443 -m flow | otgen transform -m flow | otgen display -m table\n</code></pre> </li> <li> <p>The same, but with byte instead of frame count (only receive stats are reported)</p> <pre><code>cat otg.yml | otgen run -k -a https://localhost:8443 -m flow | otgen transform -m flow -c bytes | otgen display -m table\n</code></pre> </li> <li> <p>Now report packet per second rate, as a line chart (end with <code>Crtl-c</code>)</p> <pre><code>cat otg.yml | otgen run -k -a https://localhost:8443 -m flow | otgen transform -m flow -c pps | otgen display -m chart\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b/#run-otg-traffic-flows-with-python-snappi-library","title":"Run OTG traffic flows with Python <code>snappi</code> library","text":"<p>If you have issues with setting up Python virtual environment, see an alternative way to run <code>snappi</code> scripts from inside a Docker container below.</p> <ol> <li> <p>Setup virtualenv for Python</p> <pre><code>python3.9 -m venv venv\nsource venv/bin/activate\npip install -r snappi/requirements.txt\n</code></pre> </li> <li> <p>Run flows via snappi script, reporting port metrics</p> <pre><code>./snappi/otg-flows.py -m port\n</code></pre> </li> <li> <p>Run flows via snappi script, reporting port flow</p> <pre><code>./snappi/otg-flows.py -m flow\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b/#running-snappi-scripts-from-a-docker-container","title":"Running snappi scripts from a Docker container","text":"<ol> <li> <p>Build a Docker image with <code>snappi</code> library</p> <pre><code>sudo docker build -t snappi:local snappi\n</code></pre> </li> <li> <p>Run flows via snappi script in a container, reporting port metrics</p> <pre><code>sudo docker run --rm -t --net host -v $(pwd)/snappi:/snappi --name snappi snappi:local bash -c \"python otg-flows.py -m port\"\n</code></pre> </li> <li> <p>Run flows via snappi script in a container, reporting port flow</p> <pre><code>sudo docker run --rm -t --net host -v $(pwd)/snappi:/snappi --name snappi snappi:local bash -c \"python otg-flows.py -m flow\"\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b/#destroy-the-lab","title":"Destroy the lab","text":"<p>To destroy the lab, including veth pair, use:</p> <pre><code>docker-compose down\nsudo ip link del name veth0 type veth peer name veth1\n</code></pre>"},{"location":"examples/otg-examples/docker-compose/b2b/snappi/conformance/readme/","title":"Open Traffic Generator Conformance Tests","text":"<p>This repository hosts equivalent Go and Python tests written using snappi against a back-to-back connected Ixia-C topology.</p>"},{"location":"examples/otg-examples/docker-compose/b2b/snappi/conformance/readme/#prerequisites","title":"Prerequisites","text":"<ul> <li>Recommended OS is Ubuntu LTS release.</li> <li>At least 2 CPU cores</li> <li>At least 6GB RAM</li> <li>At least 10GB Free Hard Disk Space</li> <li>Go 1.17+ or Python 3.6+ (with pip)</li> <li>Docker Engine (Community Edition)</li> </ul>"},{"location":"examples/otg-examples/docker-compose/b2b/snappi/conformance/readme/#usage","title":"Usage:","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone https://github.com/open-traffic-generator/conformance.git &amp;&amp; cd conformance\n</code></pre> </li> <li> <p>Deploy topology</p> <pre><code># use DP-only distribution of ixia-c\n./do.sh topo new dp\n\n# use CP/DP distribution of ixia-c\n# enter GITHUB PAT instead of password when prompted for credentials\n./do.sh topo new cpdp\n</code></pre> <p>Once deployment is done, <code>test-config.yaml</code> is automatically generated in present working directory and can be used to customize test run</p> </li> <li> <p>Setup and run Go tests</p> <pre><code># run all feature tests against DP-only distribution of ixia-c\n./do.sh gotest -tags=\"dp\" ./feature/b2b/...\n# run all feature tests against CP/DP distribution of ixia-c\n./do.sh gotest -tags=\"all\" ./feature/b2b/...\n\n# run single test\n./do.sh gotest ./feature/b2b/packet/udp/udp_port_value_test.go\n</code></pre> </li> <li> <p>Setup and run Python tests</p> <pre><code># setup test requirements\n./do.sh prepytest\n\n# run all tests against DP-only distribution of ixia-c\n./do.sh pytest -m dp ./feature/b2b/\n# run all tests against CP/DP distribution of ixia-c\n./do.sh pytest ./feature/b2b/\n\n# run single test\n./do.sh pytest ./feature/b2b/packet/udp/test_udp_port_value.py\n</code></pre> </li> <li> <p>Teardown topology</p> <pre><code># remove DP-only distribution of ixia-c\n./do.sh topo rm dp\n\n# remove CP/DP distribution of ixia-c\n./do.sh topo rm cpdp\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b/snappi/conformance/readme/#advanced-usage","title":"Advanced Usage:","text":"<ol> <li> <p>Format python code</p> <p>Note that if you submit any code which does not follow proper python format the CI will fail</p> <pre><code># to format python code\n./do.sh pylint\n\n# to format python code for a specific path\n./do.sh pylint features\n</code></pre> </li> <li> <p>Format go code</p> </li> </ol> <p>Note that if you submit any code which does not follow proper go format the CI will fail</p> <pre><code>```sh\n# to format go code\n./do.sh golint\n\n# to format go code for a specific path\n./do.sh golint helpers\n```\n</code></pre> <ol> <li> <p>Run perf tests in Go</p> <pre><code># run single perf test\n./do.sh gotest ./performance/b2b/udp_mesh_flows_perf_test.go\n# run single perf test with lesser number of iterations (default=100)\nOTG_ITERATIONS=2 ./do.sh gotest ./performance/b2b/udp_mesh_flows_perf_test.go\n</code></pre> </li> <li> <p>Run tests against ixia-c B2B deployed on K8S cluster using eth0 as test interface</p> <pre><code># setup K8S cluster\n./do.sh new_k8s_cluster\n# create topology\n./do.sh topo new k8seth0\n# run single test\n./do.sh gotest ./feature/b2b/packet/udp/udp_port_value_eth0_test.go\n# delete topology\n./do.sh topo rm k8seth0\n# delete K8S cluster\n./do.sh rm_k8s_cluster\n</code></pre> </li> <li> <p>Run tests against KNE cluster (Back-To-Back)</p> <pre><code># setup KNE cluster\n./do.sh new_k8s_cluster kne\n# create KNE topology\n./do.sh topo new kneb2b\n# run all back-to-back feature tests\n./do.sh gotest -tags=\"all\" ./feature/b2b/...\n# delete KNE topology\n./do.sh topo rm kneb2b\n# delete KNE cluster\n./do.sh rm_k8s_cluster kne\n</code></pre> </li> <li> <p>Run tests against KNE cluster (Port-Dut-Port)</p> <pre><code># setup KNE cluster\n./do.sh new_k8s_cluster kne arista\n# create KNE topology\n./do.sh topo new knepdp arista\n# run all port-dut-port feature tests\n./do.sh gotest -tags=\"all\" ./feature/pdp/...\n# delete KNE topology\n./do.sh topo rm knepdp arista\n# delete KNE cluster\n./do.sh rm_k8s_cluster kne arista\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b/snappi/conformance/feature/b2b/readme/","title":"OTG Back-To-Back (B2B) Tests","text":"<p>This directory contains tests that can be executed against a topology where one OTG port is back-to-back connected to another OTG port.</p>"},{"location":"examples/otg-examples/docker-compose/b2b-3pair/","title":"Ixia-c three back-to-back pairs setup with Docker Compose","text":""},{"location":"examples/otg-examples/docker-compose/b2b-3pair/#overview","title":"Overview","text":"<p>This lab is an extension of Ixia-c back-to-back traffic engine setup. Community Edition of Ixia-c supports up to 4 traffic engine ports. If the number of ports you need exceeds four, a commercial subscription to Ixia-c should be used. In this example, the testbed has 3 pairs of Ixia-c ports, and thus requires a valid license to work.</p> <p></p>"},{"location":"examples/otg-examples/docker-compose/b2b-3pair/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support</li> <li>Docker</li> </ul>"},{"location":"examples/otg-examples/docker-compose/b2b-3pair/#install-components","title":"Install components","text":"<ol> <li> <p>Install <code>docker-compose</code></p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n</code></pre> </li> <li> <p>Install <code>otgen</code></p> <pre><code>bash -c \"$(curl -sL https://get.otgcdn.net/otgen)\" -- -v 0.6.2\n</code></pre> </li> <li> <p>Make sure <code>/usr/local/bin</code> is in your <code>$PATH</code> variable (by default this is not the case on CentOS 7)</p> <pre><code>cmd=docker-compose\ndir=/usr/local/bin\nif ! command -v ${cmd} &amp;&gt; /dev/null &amp;&amp; [ -x ${dir}/${cmd} ]; then\n  echo \"${cmd} exists in ${dir} but not in the PATH, updating PATH to:\"\n  PATH=\"/usr/local/bin:${PATH}\"\n  echo $PATH\nfi\n</code></pre> </li> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b-3pair/#deploy-lab","title":"Deploy lab","text":"<ol> <li> <p>Create 3 veth pairs</p> <pre><code>sudo ip link add name veth0 type veth peer name veth1\nsudo ip link set dev veth0 up\nsudo ip link set dev veth1 up\nsudo sysctl net.ipv6.conf.veth0.disable_ipv6=1\nsudo sysctl net.ipv6.conf.veth1.disable_ipv6=1\n\nsudo ip link add name veth2 type veth peer name veth3\nsudo ip link set dev veth2 up\nsudo ip link set dev veth3 up\nsudo sysctl net.ipv6.conf.veth2.disable_ipv6=1\nsudo sysctl net.ipv6.conf.veth3.disable_ipv6=1\n\nsudo ip link add name veth4 type veth peer name veth5\nsudo ip link set dev veth4 up\nsudo ip link set dev veth5 up\nsudo sysctl net.ipv6.conf.veth4.disable_ipv6=1\nsudo sysctl net.ipv6.conf.veth5.disable_ipv6=1\n</code></pre> </li> <li> <p>Launch the deployment and adjust MTUs on the veth pair</p> <pre><code>cd otg-examples/docker-compose/b2b-3pair\nsudo -E docker-compose up -d\nsudo ip link set veth0 mtu 9500\nsudo ip link set veth1 mtu 9500\nsudo ip link set veth2 mtu 9500\nsudo ip link set veth3 mtu 9500\nsudo ip link set veth4 mtu 9500\nsudo ip link set veth5 mtu 9500\n</code></pre> </li> <li> <p>Make sure you have all seven containers (six Ixia-c Traffic Engine + one KENG Controller) running:</p> <pre><code>sudo docker ps\n</code></pre> <p>The result should look like this</p> <pre><code>CONTAINER ID   IMAGE                                                           COMMAND                  CREATED         STATUS         PORTS     NAMES\nc28385dc0225   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85   \"./entrypoint.sh\"        3 seconds ago   Up 2 seconds             b2b-3pair_traffic_engine_1_1\n5c46871913bb   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85   \"./entrypoint.sh\"        3 seconds ago   Up 2 seconds             b2b-3pair_traffic_engine_4_1\nc22280a15ae5   ghcr.io/open-traffic-generator/keng-controller:0.1.0-3          \"./bin/controller --\u2026\"   3 seconds ago   Up 2 seconds             b2b-3pair_controller_1\n0297de3fbe49   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85   \"./entrypoint.sh\"        3 seconds ago   Up 2 seconds             b2b-3pair_traffic_engine_2_1\nbc533d7cc650   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85   \"./entrypoint.sh\"        3 seconds ago   Up 2 seconds             b2b-3pair_traffic_engine_3_1\n412896aca3a8   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85   \"./entrypoint.sh\"        3 seconds ago   Up 2 seconds             b2b-3pair_traffic_engine_5_1\n1f82918b1f13   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85   \"./entrypoint.sh\"        3 seconds ago   Up 2 seconds             b2b-3pair_traffic_engine_6_1\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b-3pair/#run-otg-traffic-flows","title":"Run OTG traffic flows","text":"<ol> <li> <p>Start with running traffic flows only between two pairs of ports using <code>otg.2pairs.yml</code> configuration. This is within the limits of Community Edition and should work:</p> <pre><code>otgen run -k -f otg.2pairs.yml -m flow | otgen transform -m flow | otgen display -m table\n</code></pre> </li> <li> <p>Now run traffic flows defined in <code>otg.3pairs.yml</code>, which has 6 ports in total. Without a license, the following error message will be returned: <code>ERRO[0000] the configuration has 6 port(s) of type Ixia-c, maximum 4 ports of type Ixia-c is supported in community edition</code></p> <pre><code>otgen run -k -f otg.3pairs.yml | otgen transform -m flow | otgen display -m table\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/b2b-3pair/#destroy-the-lab","title":"Destroy the lab","text":"<p>To destroy the lab, including veth pair, use:</p> <pre><code>sudo docker-compose down\nsudo ip link del name veth0 type veth peer name veth1\nsudo ip link del name veth2 type veth peer name veth3\nsudo ip link del name veth4 type veth peer name veth5\n</code></pre>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/","title":"Ixia-c back-to-back BGP and traffic setup with Docker Compose","text":""},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/#overview","title":"Overview","text":"<p>This is an extended version of a basic Ixia-c back-2-back lab with Ixia-c Protocol Engine added to emulate L2-3 protocols like BGP. In this lab, Ixia-c has two traffic ports connected back-2-back using a veth pair. In addition, two protocol engines share network namespaces with respective traffic ports. The lab is defined via Docker Compose YAML file. Once the lab is up, a test Go package is used to request Ixia-c to bring up a BGP session between two ports, generate traffic and report statistics.</p> <p></p>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support</li> <li>Docker</li> <li>Go</li> </ul>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/#install-components","title":"Install components","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/#deploy-ixia-c-lab","title":"Deploy Ixia-c lab","text":"<ol> <li> <p>Launch the deployment</p> <pre><code>cd otg-examples/docker-compose/cpdp-b2b\nsudo docker compose up -d\nsudo docker ps\n</code></pre> </li> <li> <p>Make sure you have all five containers running. The result should look like this</p> <pre><code>CONTAINER ID   IMAGE                                                              COMMAND                  CREATED         STATUS          PORTS                                                                                      NAMES\n7168dfa86bc3   ghcr.io/open-traffic-generator/ixia-c-protocol-engine:1.00.0.337   \"/docker_im/opt/Ixia\u2026\"   6 minutes ago   Up 6 minutes                                                                                               cpdp-b2b-protocol_engine_2-1\ndc798be3cdd6   ghcr.io/open-traffic-generator/ixia-c-protocol-engine:1.00.0.337   \"/docker_im/opt/Ixia\u2026\"   6 minutes ago   Up 6 minutes                                                                                               cpdp-b2b-protocol_engine_1-1\n1cf8508108db   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85      \"./entrypoint.sh\"        6 minutes ago   Up 42 seconds   0.0.0.0:5555-&gt;5555/tcp, :::5555-&gt;5555/tcp, 0.0.0.0:50071-&gt;50071/tcp, :::50071-&gt;50071/tcp   cpdp-b2b-traffic_engine_1-1\n7dbb2f28375a   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85      \"./entrypoint.sh\"        6 minutes ago   Up 42 seconds   0.0.0.0:5556-&gt;5556/tcp, :::5556-&gt;5556/tcp, 0.0.0.0:50072-&gt;50071/tcp, :::50072-&gt;50071/tcp   cpdp-b2b-traffic_engine_2-1\nb62dd5ccc6f8   ghcr.io/open-traffic-generator/keng-controller:0.1.0-3             \"./bin/controller --\u2026\"   6 minutes ago   Up 6 minutes                                                                                               cpdp-b2b-controller-1\n</code></pre> </li> <li> <p>Interconnect traffic engine containers via a veth pair</p> <pre><code>sudo bash ../../utils/connect_containers_veth.sh cpdp-b2b-traffic_engine_1-1 cpdp-b2b-traffic_engine_2-1 veth0 veth1\n</code></pre> </li> <li> <p>Check traffic and protocol engine logs to see if they picked up veth interfaces</p> <pre><code>sudo docker logs cpdp-b2b-traffic_engine_1-1\nsudo docker logs cpdp-b2b-traffic_engine_2-1\nsudo docker logs cpdp-b2b-protocol_engine_1-1\nsudo docker logs cpdp-b2b-protocol_engine_2-1\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/#run-otg-traffic-flows-with-python-snappi-library","title":"Run OTG traffic flows with Python <code>snappi</code> library","text":"<ol> <li> <p>Setup virtualenv for Python</p> <pre><code>mkdir -p $HOME/.venv\npython3.9 -m venv $HOME/.venv/snappi\nsource $HOME/.venv/snappi/bin/activate\npip install -r snappi/requirements.txt\npip install -r snappi/conformance/requirements.txt\n</code></pre> </li> <li> <p>Run BGP B2B test</p> <pre><code>python ./snappi/otg_bgp_b2b.py\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/#destroy-the-lab","title":"Destroy the lab","text":"<p>To destroy the lab, including veth pair, use:</p> <pre><code>sudo docker compose down\n</code></pre>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/#credits","title":"Credits","text":"<ul> <li><code>connect_containers_veth.sh</code> copyright of Levente Csikor, with modifications to replace <code>ifconfig</code> with <code>ip link</code>.</li> </ul>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/snappi/conformance/readme/","title":"Open Traffic Generator Conformance Tests","text":"<p>This repository hosts equivalent Go and Python tests written using snappi against a back-to-back connected Ixia-C topology.</p>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/snappi/conformance/readme/#prerequisites","title":"Prerequisites","text":"<ul> <li>Recommended OS is Ubuntu LTS release.</li> <li>At least 2 CPU cores</li> <li>At least 6GB RAM</li> <li>At least 10GB Free Hard Disk Space</li> <li>Go 1.17+ or Python 3.6+ (with pip)</li> <li>Docker Engine (Community Edition)</li> </ul>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/snappi/conformance/readme/#usage","title":"Usage:","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone https://github.com/open-traffic-generator/conformance.git &amp;&amp; cd conformance\n</code></pre> </li> <li> <p>Deploy topology</p> <pre><code># use DP-only distribution of ixia-c\n./do.sh topo new dp\n\n# use CP/DP distribution of ixia-c\n# enter GITHUB PAT instead of password when prompted for credentials\n./do.sh topo new cpdp\n</code></pre> <p>Once deployment is done, <code>test-config.yaml</code> is automatically generated in present working directory and can be used to customize test run</p> </li> <li> <p>Setup and run Go tests</p> <pre><code># run all feature tests against DP-only distribution of ixia-c\n./do.sh gotest -tags=\"dp\" ./feature/b2b/...\n# run all feature tests against CP/DP distribution of ixia-c\n./do.sh gotest -tags=\"all\" ./feature/b2b/...\n\n# run single test\n./do.sh gotest ./feature/b2b/packet/udp/udp_port_value_test.go\n</code></pre> </li> <li> <p>Setup and run Python tests</p> <pre><code># setup test requirements\n./do.sh prepytest\n\n# run all tests against DP-only distribution of ixia-c\n./do.sh pytest -m dp ./feature/b2b/\n# run all tests against CP/DP distribution of ixia-c\n./do.sh pytest ./feature/b2b/\n\n# run single test\n./do.sh pytest ./feature/b2b/packet/udp/test_udp_port_value.py\n</code></pre> </li> <li> <p>Teardown topology</p> <pre><code># remove DP-only distribution of ixia-c\n./do.sh topo rm dp\n\n# remove CP/DP distribution of ixia-c\n./do.sh topo rm cpdp\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/snappi/conformance/readme/#advanced-usage","title":"Advanced Usage:","text":"<ol> <li> <p>Format python code</p> <p>Note that if you submit any code which does not follow proper python format the CI will fail</p> <pre><code># to format python code\n./do.sh pylint\n\n# to format python code for a specific path\n./do.sh pylint features\n</code></pre> </li> <li> <p>Format go code</p> </li> </ol> <p>Note that if you submit any code which does not follow proper go format the CI will fail</p> <pre><code>```sh\n# to format go code\n./do.sh golint\n\n# to format go code for a specific path\n./do.sh golint helpers\n```\n</code></pre> <ol> <li> <p>Run perf tests in Go</p> <pre><code># run single perf test\n./do.sh gotest ./performance/b2b/udp_mesh_flows_perf_test.go\n# run single perf test with lesser number of iterations (default=100)\nOTG_ITERATIONS=2 ./do.sh gotest ./performance/b2b/udp_mesh_flows_perf_test.go\n</code></pre> </li> <li> <p>Run tests against ixia-c B2B deployed on K8S cluster using eth0 as test interface</p> <pre><code># setup K8S cluster\n./do.sh new_k8s_cluster\n# create topology\n./do.sh topo new k8seth0\n# run single test\n./do.sh gotest ./feature/b2b/packet/udp/udp_port_value_eth0_test.go\n# delete topology\n./do.sh topo rm k8seth0\n# delete K8S cluster\n./do.sh rm_k8s_cluster\n</code></pre> </li> <li> <p>Run tests against KNE cluster (Back-To-Back)</p> <pre><code># setup KNE cluster\n./do.sh new_k8s_cluster kne\n# create KNE topology\n./do.sh topo new kneb2b\n# run all back-to-back feature tests\n./do.sh gotest -tags=\"all\" ./feature/b2b/...\n# delete KNE topology\n./do.sh topo rm kneb2b\n# delete KNE cluster\n./do.sh rm_k8s_cluster kne\n</code></pre> </li> <li> <p>Run tests against KNE cluster (Port-Dut-Port)</p> <pre><code># setup KNE cluster\n./do.sh new_k8s_cluster kne arista\n# create KNE topology\n./do.sh topo new knepdp arista\n# run all port-dut-port feature tests\n./do.sh gotest -tags=\"all\" ./feature/pdp/...\n# delete KNE topology\n./do.sh topo rm knepdp arista\n# delete KNE cluster\n./do.sh rm_k8s_cluster kne arista\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-b2b/snappi/conformance/feature/b2b/readme/","title":"OTG Back-To-Back (B2B) Tests","text":"<p>This directory contains tests that can be executed against a topology where one OTG port is back-to-back connected to another OTG port.</p>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/","title":"Ixia-c ARP, BGP and traffic with FRR as a DUT","text":""},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#overview","title":"Overview","text":"<p>This lab demonstrates validation of an FRR DUT for basic BGP peering, prefix announcements and passing of traffic between announced subnets. To run OTG protocols and flows, Ixia-c Traffic and Protocol Engine are used.</p> <p>The same setup can be brought up using one of two methods:</p> <ul> <li>Docker Compose</li> <li>Containerlab</li> </ul> <p>Also, the same OTG test logic can be executed using one of two OTG clients:</p> <ul> <li><code>curl</code></li> <li><code>otgen</code></li> </ul> <p>Each method has its own benefits. With <code>curl</code>, you can try each individual OTG API call needed to complete the test. On the other hand, <code>otgen</code> demonstrates how all these steps could be easily executed with a single command. By comparing with <code>curl</code> <code>get_metrics</code> or <code>get_state</code> requests output, you can better understands the logic <code>otgen</code> is using to wait for the results of previous API calls to converge or complete. Finally, you can use <code>otgen run</code> source code as a starting point for custom test logic you could develop using <code>gosnappi</code> library.</p>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#lab-configuration","title":"Lab configuration","text":""},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#diagram","title":"Diagram","text":""},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#layer-3-topology-and-generated-traffic-flows","title":"Layer 3 topology and generated traffic flows","text":""},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#otg","title":"OTG","text":"<p>The lab uses <code>otg.json</code> configuration file with the following properties:</p> <p></p> <p>To request Ixia-c to use ARP to determine destination MAC address for a flow <code>f1</code>, the following flow properties are used. The <code>dst</code> parameter in the <code>packet</code> section uses <code>auto</code> mode. In addition, <code>tx_rx</code> section has to use names of emulated devices' IP interfaces, as in <code>\"tx_names\":  [\"otg1.eth[0].ipv4[0]\"]</code>.</p> <pre><code>  \"flows\":  [\n    {\n      \"tx_rx\":  {\n        \"choice\":  \"device\",\n        \"device\":  {\n          \"mode\":  \"mesh\",\n          \"tx_names\":  [\n            \"otg1.eth[0].ipv4[0]\"\n          ],\n          \"rx_names\":  [\n            \"otg2.eth[0].ipv4[0]\"\n          ]\n        }\n      },\n      \"packet\":  [\n        {\n          \"choice\":  \"ethernet\",\n          \"ethernet\":  {\n            \"dst\":  {\n              \"choice\":  \"auto\",\n              \"auto\":  \"00:00:00:00:00:00\"\n            },\n            \"src\":  {\n              \"choice\":  \"value\",\n              \"value\":  \"02:00:00:00:01:aa\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n</code></pre>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#quick-start","title":"Quick start","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\ncd otg-examples/docker-compose/cpdp-frr\n</code></pre> </li> <li> <p>To run all the steps below at once using Docker Compose, execute:</p> <pre><code>make all\nmake clean\n</code></pre> </li> <li> <p>To use Containerlab option, run:</p> <pre><code>make all-clab\nmake clean\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support</li> <li>Docker</li> <li><code>curl</code> command</li> <li><code>watch</code> command (optional)</li> <li><code>jq</code> command (optional)</li> </ul>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#install-components","title":"Install components","text":"<ol> <li> <p>Install <code>docker-compose</code> and add yourself to <code>docker</code> group. Logout for group changes to take effect.</p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo usermod -aG docker $USER\nlogout\n</code></pre> </li> <li> <p>For Containerlab use case, install the latest release. For more installation options see here.</p> <pre><code>bash -c \"$(curl -sL https://get.containerlab.dev)\"\n</code></pre> </li> <li> <p>Install <code>otgen</code> tool, version <code>0.6.2</code> or later.</p> <pre><code>bash -c \"$(curl -sL https://get.otgcdn.net/otgen)\" -- -v 0.6.2\n</code></pre> </li> <li> <p>Make sure <code>/usr/local/bin</code> is in your <code>$PATH</code> variable (by default this is not the case on CentOS 7)</p> <pre><code>cmd=docker-compose\ndir=/usr/local/bin\nif ! command -v ${cmd} &amp;&gt; /dev/null &amp;&amp; [ -x ${dir}/${cmd} ]; then\n  echo \"${cmd} exists in ${dir} but not in the PATH, updating PATH to:\"\n  PATH=\"/usr/local/bin:${PATH}\"\n  echo $PATH\nfi\n</code></pre> </li> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#docker-compose-option-to-deploy-the-lab","title":"Docker Compose option to deploy the lab","text":"<ol> <li> <p>Launch the deployment using Docker Compose</p> <pre><code>cd otg-examples/docker-compose/cpdp-frr\ndocker-compose up -d\nsudo docker ps\n</code></pre> </li> <li> <p>Make sure you have all five containers running. The result should look like this</p> <pre><code>CONTAINER ID   IMAGE                                                              COMMAND                  CREATED         STATUS         PORTS                                                                                      NAMES\n0ea1e56720ac   ghcr.io/open-traffic-generator/ixia-c-protocol-engine:1.00.0.337   \"/docker_im/opt/Ixia\u2026\"   3 seconds ago   Up 3 seconds                                                                                              cpdp-frr_protocol_engine_1_1\n44f4c9fb8b3e   ghcr.io/open-traffic-generator/ixia-c-protocol-engine:1.00.0.337   \"/docker_im/opt/Ixia\u2026\"   3 seconds ago   Up 3 seconds                                                                                              cpdp-frr_protocol_engine_2_1\n6e50d4cad6a6   ghcr.io/open-traffic-generator/keng-controller:0.1.0-3             \"./bin/controller --\u2026\"   4 seconds ago   Up 4 seconds                                                                                              cpdp-frr_controller_1\n7fe400f12196   quay.io/frrouting/frr:8.4.2                                        \"/sbin/tini -- /usr/\u2026\"   4 seconds ago   Up 3 seconds                                                                                              cpdp-frr_frr_1\n2a7e1c124cbd   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85      \"./entrypoint.sh\"        4 seconds ago   Up 3 seconds   0.0.0.0:5556-&gt;5556/tcp, :::5556-&gt;5556/tcp, 0.0.0.0:50072-&gt;50071/tcp, :::50072-&gt;50071/tcp   cpdp-frr_traffic_engine_2_1\ncbc0a64278cc   ghcr.io/open-traffic-generator/ixia-c-traffic-engine:1.6.0.85      \"./entrypoint.sh\"        4 seconds ago   Up 3 seconds   0.0.0.0:5555-&gt;5555/tcp, :::5555-&gt;5555/tcp, 0.0.0.0:50071-&gt;50071/tcp, :::50071-&gt;50071/tcp   cpdp-frr_traffic_engine_1_1\np\n</code></pre> </li> <li> <p>Interconnect traffic engine containers via a veth pair</p> <pre><code>sudo ../../utils/connect_containers_veth.sh cpdp-frr_traffic_engine_1_1 cpdp-frr_frr_1 veth0 veth1\nsudo ../../utils/connect_containers_veth.sh cpdp-frr_traffic_engine_2_1 cpdp-frr_frr_1 veth2 veth3\n</code></pre> </li> <li> <p>Check traffic and protocol engine logs to see if they picked up veth interfaces</p> <pre><code>sudo docker logs cpdp-frr_traffic_engine_1_1\nsudo docker logs cpdp-frr_traffic_engine_2_1\nsudo docker logs cpdp-frr_protocol_engine_1_1\nsudo docker logs cpdp-frr_protocol_engine_2_1\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#containerlab-option-to-deploy-the-lab","title":"Containerlab option to deploy the lab","text":"<ol> <li> <p>Launch the deployment using Containerlab</p> <pre><code>cd otg-examples/docker-compose/cpdp-frr\nsudo -E containerlab deploy\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#run-tests-curl-option","title":"Run tests, <code>curl</code> option","text":"<ol> <li> <p>Apply config</p> <pre><code>OTG_HOST=\"https://localhost:8443\"\ncurl -k \"${OTG_HOST}/config\" \\\n    -H \"Content-Type: application/json\" \\\n    -d @otg.json\n</code></pre> </li> <li> <p>Start protocols</p> <pre><code>curl -k \"${OTG_HOST}/control/state\" \\\n    -H  \"Content-Type: application/json\" \\\n    -d '{\"choice\": \"protocol\",\"protocol\": {\"choice\": \"all\",\"all\": {\"state\": \"start\"}}}'\n</code></pre> </li> <li> <p>Fetch ARP table</p> <pre><code>curl -sk \"${OTG_HOST}/monitor/states\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \"choice\": \"ipv4_neighbors\" }'\n</code></pre> </li> <li> <p>Fetch BGP metrics (stop with <code>Ctrl-c</code>)</p> <pre><code>watch -n 1 \"curl -sk \\\"${OTG_HOST}/monitor/metrics\\\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \\\"choice\\\": \\\"bgpv4\\\" }'\"\n</code></pre> </li> <li> <p>Fetch BGP prefix announcements - TODO this doesn't show the actual announcements</p> <pre><code>curl -sk \"${OTG_HOST}/monitor/states\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \"choice\": \"bgp_prefixes\" }'\n</code></pre> </li> <li> <p>Start transmitting flows</p> <pre><code>curl -sk \"${OTG_HOST}/control/state\" \\\n    -H  \"Content-Type: application/json\" \\\n    -d '{\"choice\": \"traffic\", \"traffic\": {\"choice\": \"flow_transmit\", \"flow_transmit\": {\"state\": \"start\"}}}'\n</code></pre> </li> <li> <p>Fetch flow metrics (stop with <code>Ctrl-c</code>)</p> <pre><code>watch -n 1 \"curl -sk \\\"${OTG_HOST}/monitor/metrics\\\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \\\"choice\\\": \\\"flow\\\" }'\"\n</code></pre> </li> <li> <p>Fetch port metrics</p> <pre><code>curl -sk \"${OTG_HOST}/monitor/metrics\" \\\n    -X POST \\\n    -H  'Content-Type: application/json' \\\n    -d '{ \"choice\": \"port\" }'\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#run-tests-otgen-option","title":"Run tests, <code>otgen</code> option","text":"<ol> <li> <p>Use one <code>otgen run</code> command to repeat all of the steps above. Note <code>--rxbgp 2x</code> parameter. We use it to tell <code>otgen</code> it should wait, after starting the protocols, until twice as many routes were received from the DUT, than were advertised by KENG. For our lab configuration it would be the signal that BGP protocol has converged. In other setups this parameter might be different.</p> <pre><code>export OTG_API=\"https://localhost:8443\"\notgen --log info run --insecure --file otg.json --json --rxbgp 2x --metrics flow | jq\n</code></pre> </li> <li> <p>To format output as a table, use the modified command below. Note, there will be no log output in this case, so be patient to wait for the table output to appear.</p> <pre><code>otgen run --insecure --file otg.json --json --rxbgp 2x --metrics flow | otgen transform --metrics flow | otgen display --mode table\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#destroy-the-lab","title":"Destroy the lab","text":"<ul> <li> <p>To destroy the lab brought up via Docker Compose, including veth pairs, use:</p> <pre><code>docker-compose down\n</code></pre> </li> <li> <p>To destroy the lab brought up via Containerlab, use:</p> <pre><code>sudo containerlab destroy -c\n</code></pre> </li> </ul>"},{"location":"examples/otg-examples/docker-compose/cpdp-frr/#credits","title":"Credits","text":"<ul> <li><code>connect_containers_veth.sh</code> copyright of Levente Csikor, with modifications to replace <code>ifconfig</code> with <code>ip link</code>.</li> </ul>"},{"location":"examples/otg-examples/hw/ixhw-b2b/","title":"OTG with Ixia L23 Hardware: back-to-back setup","text":""},{"location":"examples/otg-examples/hw/ixhw-b2b/#overview","title":"Overview","text":"<p>This example demonstrates how the OTG API can be used to control Keysight/Ixia L23 Network Test Hardware. The same Keysight Elastic Network Generator <code>keng-controller</code> that serves as the OTG API Endpoint for Ixia-c software test ports can be used with the hardware test ports. Such deployment model requires to use <code>keng-layer23-hw-server</code> container image that provides an interface between the controller and the hardware test ports. See the diagram below that illustrates the components of such setup:</p> <p></p>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>System License Edition for Keysight Elastic Network Generator images. Read more in KENG.md</p> </li> <li> <p>Keysight Ixia Novus or AresOne Network Test Hardware with IxOS 9.20 Patch 4 or higher. NOTE: Currently, only Linux-based IxOS platforms are tested with KENG.</p> </li> <li> <p>Linux host or VM with sudo permissions and Docker support. Here is an example of deploying an Ubuntu VM <code>otg</code> using multipass:</p> <pre><code>multipass launch 22.04 -n otg -c4 -m8G -d32G\nmultipass shell otg\n</code></pre> </li> <li> <p>Docker. Follow official instruction for</p> <ul> <li>Ubuntu</li> <li>Debian</li> <li>CentOS</li> </ul> <p>After docker is installed, add current user to the docker group.</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> </li> <li> <p>Python3 (version 3.9 or higher), PIP and VirtualEnv</p> <p><pre><code>sudo apt install python3 python3-pip python3.10-venv -y\n</code></pre> * Go version 1.19 or later</p> <pre><code>sudo snap install go --channel=1.19/stable --classic\n</code></pre> </li> <li> <p><code>git</code> and <code>envsubst</code> commands (typically installed by default)</p> <pre><code>sudo apt install git gettext-base -y\n</code></pre> </li> </ul>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#install-components","title":"Install components","text":"<pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\ncd otg-examples/hw/ixhw-b2b\n</code></pre>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#deploy-keysight-elastic-network-generator","title":"Deploy Keysight Elastic Network Generator","text":"<ol> <li> <p>Initialize an environment variable <code>LICENSE_SERVERS</code> with a hostname/IP address of the Keysight License Server. Replace <code>license_server_name</code> with the actual hostname/IP address of your license server.</p> <pre><code>export LICENSE_SERVERS=\"license_server_name\"\n</code></pre> </li> <li> <p>Launch the deployment</p> <pre><code>docker compose up -d\n</code></pre> </li> <li> <p>To make sure all the containers are running, use</p> <pre><code>docker ps\n</code></pre> <p>the list of containers should include:</p> <ul> <li><code>ixhw-b2b-controller-1</code></li> <li><code>ixhw-b2b-layer23-hw-server-1</code></li> </ul> </li> <li> <p>Initialize environment variables with locations of Ixia L23 hardware ports. Replace <code>ixos_ip_address</code>, <code>slot_number_X</code>, <code>port_number_X</code> with values matching your equipment.</p> <pre><code>export OTG_LOCATION_P1=\"ixos_ip_address;slot_number_1;port_number_1\"\nexport OTG_LOCATION_P2=\"ixos_ip_address;slot_number_2;port_number_2\"\n</code></pre> <p>For example, if IxOS management IP is <code>10.10.10.10</code> and you need to use ports <code>14</code> and <code>15</code> in the slot number <code>2</code>:</p> <pre><code>export OTG_LOCATION_P1=\"10.10.10.10;2;14\"\nexport OTG_LOCATION_P2=\"10.10.10.10;2;15\"\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#run-otg-traffic-flows-with-python-snappi-library","title":"Run OTG traffic flows with Python <code>snappi</code> library","text":"<ol> <li> <p>Setup virtualenv for Python</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre> </li> <li> <p>Run flows via snappi script, reporting port metrics</p> <pre><code>./snappi/otg-flows.py -m port\n</code></pre> </li> <li> <p>Run flows via snappi script, reporting port flow</p> <pre><code>./snappi/otg-flows.py -m flow\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#cleanup","title":"Cleanup","text":"<p>To stop the deployment, run:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#openconfig-feature-profiles-b2b-test","title":"OpenConfig Feature Profiles B2B test","text":""},{"location":"examples/otg-examples/hw/ixhw-b2b/#deploy-keysight-elastic-network-generator_1","title":"Deploy Keysight Elastic Network Generator","text":"<ol> <li> <p>Initialize an environment variable <code>LICENSE_SERVERS</code> with a hostname/IP address of the Keysight License Server. Replace <code>license_server_name</code> with the actual hostname/IP address of your license server.</p> <pre><code>export LICENSE_SERVERS=\"license_server_name\"\n</code></pre> </li> <li> <p>Launch the deployment</p> <pre><code>docker compose -p keng1 --file fp.compose.yml --file fp.compose.ports.yml up -d\n</code></pre> </li> <li> <p>To make sure all the containers are running, use</p> <pre><code>docker ps\n</code></pre> <p>the list of containers should include:</p> <ul> <li><code>keng1-gnmi-server-1</code></li> <li><code>keng1-controller-1</code></li> <li><code>keng1-layer23-hw-server-1</code></li> </ul> </li> <li> <p>Initialize environment variables with locations of Ixia L23 hardware ports. Replace <code>ixos_ip_address</code>, <code>slot_number_X</code>, <code>port_number_X</code> with values matching your equipment.</p> <pre><code>export OTG_LOCATION_P1=\"ixos_ip_address;slot_number_1;port_number_1\"\nexport OTG_LOCATION_P2=\"ixos_ip_address;slot_number_2;port_number_2\"\n</code></pre> <p>For example, if IxOS management IP is <code>10.10.10.10</code> and you need to use ports <code>14</code> and <code>15</code> in the slot number <code>2</code>:</p> <pre><code>export OTG_LOCATION_P1=\"10.10.10.10;2;14\"\nexport OTG_LOCATION_P2=\"10.10.10.10;2;15\"\n</code></pre> </li> <li> <p>Create an ONDATRA binding file <code>otgb2b.binding</code> by using <code>otgb2b.template</code> as a template and substituting OTG port locations using the environmental variables initialized in the previous step.</p> <pre><code>cat otgb2b.template | envsubst &gt; otgb2b.binding\nexport OTGB2B_BINDING=\"$(pwd)/otgb2b.binding\"\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#run-featureprofiles-otg-hw-back-2-back-test","title":"Run FeatureProfiles OTG HW back-2-back test","text":"<ol> <li> <p>Clone FeatureProfiles fork from Open Traffic Generator org. The back-2-back test we're going to use is published under the <code>static</code> branch we need to clone:</p> <pre><code>git clone -b static --depth 1 https://github.com/open-traffic-generator/featureprofiles.git fp-static\n</code></pre> </li> <li> <p>Run FeatureProfiles OTG HW B2B test</p> <pre><code>cd fp-static/feature/experimental/otg_only\ngo test -v otgb2b_test.go -testbed otgb2b.testbed -binding \"${OTGB2B_BINDING}\"\ncd ../../../..\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#multi-seat-deployment","title":"Multi-seat deployment","text":"<p>If you need to support multiple concurrent seats (simultaneous tests) on the same VM, it is possible to launch several parallel instances of Keysight Elastic Network Generator.</p> <ol> <li> <p>What you need for that is to choose a set of different TCP ports that <code>keng-controller</code> and <code>otg-gnmi-server</code> would be mapped to on the host. As an example, see the file fp.compose.ports2.yml. You would also need start the deployment using a non-default project name, so that the second set of containers would run over a dedicated network.</p> <pre><code>docker compose -p keng2 --file fp.compose.yml --file fp.compose.ports2.yml up -d\n</code></pre> </li> <li> <p>Now create a second ONDATRA binding file, for example <code>otgb2b.binding2</code>:</p> <pre><code>cp otgb2b.binding otgb2b.binding2\n# change TCP ports for both otg and gnmi targets\n# change port name strings to use different IxHW ports\nvi otgb2b.binding2\nexport OTGB2B_BINDING=\"$(pwd)/otgb2b.binding2\"\n</code></pre> </li> </ol> <p>Now you're ready to run the two parallel tests via the same VM using two different binding files.</p>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#cleanup_1","title":"Cleanup","text":"<p>To stop the deployment, run:</p> <pre><code>docker compose -p keng1 --file fp.compose.yml down\ndocker compose -p keng2 --file fp.compose.yml down\n</code></pre>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/otg-examples/hw/ixhw-b2b/#licensing-errors","title":"Licensing Errors","text":"<p>If you see the following error when running the featureprofiles test:</p> <pre><code>the configuration contains port of type Ixia-Hardware, which is not supported in community edition\n</code></pre> <p>it means that you either didn't provide the proper <code>LICENSE_SERVERS</code> environment variable, or the license server is not reachable from the controller container. To further check if the received the list of License Servers, run:</p> <pre><code>docker logs keng1-controller-1 | grep -i LicenseServers\n</code></pre> <p>The list should not be empty.</p> <p>If the list is not empty, check if the controller can reach the License Server by looking for <code>Session successfully created with license server</code> message in the logs:</p> <pre><code>docker logs keng1-controller-1 | grep -i licensing\n</code></pre>"},{"location":"examples/otg-examples/hw/ixhw-b2b/#diagnostics","title":"Diagnostics","text":"<p>To collect diagnostics logs from all the components of the lab, run:</p> <pre><code>../../utils/collect-ixia-c-hw-logs.sh\n</code></pre> <p>It will create a <code>logs-DATE.tar.gz</code> file you can share with Keysight for troubleshooting.</p> <p>TIP. Use <code>make logs</code> if you have <code>make</code> on your system</p>"},{"location":"examples/otg-examples/hw/ixhw-b2b/snappi/conformance/readme/","title":"Open Traffic Generator Conformance Tests","text":"<p>This repository hosts equivalent Go and Python tests written using snappi against a back-to-back connected Ixia-C topology.</p>"},{"location":"examples/otg-examples/hw/ixhw-b2b/snappi/conformance/readme/#prerequisites","title":"Prerequisites","text":"<ul> <li>Recommended OS is Ubuntu LTS release.</li> <li>At least 2 CPU cores</li> <li>At least 6GB RAM</li> <li>At least 10GB Free Hard Disk Space</li> <li>Go 1.17+ or Python 3.6+ (with pip)</li> <li>Docker Engine (Community Edition)</li> </ul>"},{"location":"examples/otg-examples/hw/ixhw-b2b/snappi/conformance/readme/#usage","title":"Usage:","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone https://github.com/open-traffic-generator/conformance.git &amp;&amp; cd conformance\n</code></pre> </li> <li> <p>Deploy topology</p> <pre><code># use DP-only distribution of ixia-c\n./do.sh topo new dp\n\n# use CP/DP distribution of ixia-c\n# enter GITHUB PAT instead of password when prompted for credentials\n./do.sh topo new cpdp\n</code></pre> <p>Once deployment is done, <code>test-config.yaml</code> is automatically generated in present working directory and can be used to customize test run</p> </li> <li> <p>Setup and run Go tests</p> <pre><code># run all feature tests against DP-only distribution of ixia-c\n./do.sh gotest -tags=\"dp\" ./feature/b2b/...\n# run all feature tests against CP/DP distribution of ixia-c\n./do.sh gotest -tags=\"all\" ./feature/b2b/...\n\n# run single test\n./do.sh gotest ./feature/b2b/packet/udp/udp_port_value_test.go\n</code></pre> </li> <li> <p>Setup and run Python tests</p> <pre><code># setup test requirements\n./do.sh prepytest\n\n# run all tests against DP-only distribution of ixia-c\n./do.sh pytest -m dp ./feature/b2b/\n# run all tests against CP/DP distribution of ixia-c\n./do.sh pytest ./feature/b2b/\n\n# run single test\n./do.sh pytest ./feature/b2b/packet/udp/test_udp_port_value.py\n</code></pre> </li> <li> <p>Teardown topology</p> <pre><code># remove DP-only distribution of ixia-c\n./do.sh topo rm dp\n\n# remove CP/DP distribution of ixia-c\n./do.sh topo rm cpdp\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hw/ixhw-b2b/snappi/conformance/readme/#advanced-usage","title":"Advanced Usage:","text":"<ol> <li> <p>Format python code</p> <p>Note that if you submit any code which does not follow proper python format the CI will fail</p> <pre><code># to format python code\n./do.sh pylint\n\n# to format python code for a specific path\n./do.sh pylint features\n</code></pre> </li> <li> <p>Format go code</p> </li> </ol> <p>Note that if you submit any code which does not follow proper go format the CI will fail</p> <pre><code>```sh\n# to format go code\n./do.sh golint\n\n# to format go code for a specific path\n./do.sh golint helpers\n```\n</code></pre> <ol> <li> <p>Run perf tests in Go</p> <pre><code># run single perf test\n./do.sh gotest ./performance/b2b/udp_mesh_flows_perf_test.go\n# run single perf test with lesser number of iterations (default=100)\nOTG_ITERATIONS=2 ./do.sh gotest ./performance/b2b/udp_mesh_flows_perf_test.go\n</code></pre> </li> <li> <p>Run tests against ixia-c B2B deployed on K8S cluster using eth0 as test interface</p> <pre><code># setup K8S cluster\n./do.sh new_k8s_cluster\n# create topology\n./do.sh topo new k8seth0\n# run single test\n./do.sh gotest ./feature/b2b/packet/udp/udp_port_value_eth0_test.go\n# delete topology\n./do.sh topo rm k8seth0\n# delete K8S cluster\n./do.sh rm_k8s_cluster\n</code></pre> </li> <li> <p>Run tests against KNE cluster (Back-To-Back)</p> <pre><code># setup KNE cluster\n./do.sh new_k8s_cluster kne\n# create KNE topology\n./do.sh topo new kneb2b\n# run all back-to-back feature tests\n./do.sh gotest -tags=\"all\" ./feature/b2b/...\n# delete KNE topology\n./do.sh topo rm kneb2b\n# delete KNE cluster\n./do.sh rm_k8s_cluster kne\n</code></pre> </li> <li> <p>Run tests against KNE cluster (Port-Dut-Port)</p> <pre><code># setup KNE cluster\n./do.sh new_k8s_cluster kne arista\n# create KNE topology\n./do.sh topo new knepdp arista\n# run all port-dut-port feature tests\n./do.sh gotest -tags=\"all\" ./feature/pdp/...\n# delete KNE topology\n./do.sh topo rm knepdp arista\n# delete KNE cluster\n./do.sh rm_k8s_cluster kne arista\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hw/ixhw-b2b/snappi/conformance/feature/b2b/readme/","title":"OTG Back-To-Back (B2B) Tests","text":"<p>This directory contains tests that can be executed against a topology where one OTG port is back-to-back connected to another OTG port.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/","title":"OpenConfig FeatureProfiles OTG Back-2-Back Test with Ixia-c in Hybrid Mode","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/#overview","title":"Overview","text":"<p>This lab is an introduction to OpenConfig FeatureProfiles test suites built with the Open Traffic Generator API.</p> <p>Feature profiles define groups of OpenConfig paths that can be invoked on network devices. A feature profile may contain configuration, telemetry, operational or any other paths that a device exposes. Example management plane device APIs are gNMI, and gNOI. Example control plane APIs are gRIBI, and protocols such as BGP, IS-IS.</p> <p>Feature profiles also include a suite of tests for validating the network device behavior for each defined feature.</p> <p>In FeatureProfiles terminology, a term <code>ATE</code> is used to refer to a Traffic Generator, and it stands for <code>Automated Test Equipment</code>. This lab uses Keysight Elastic Network Generator with containerized Ixia-c test ports as the <code>ATE</code>.</p> <p>FeatureProfiles use Ondatra framework for writing and running tests against both real and containerized network devices. When executing a test via the Open Traffic Generator API, it uses <code>gosnappi</code> client library internally.</p> <p>There are several ways to run FeatureProfiles tests. In this example, we're demonstrating a use of so called <code>static binding</code>:</p> <p>The static binding supports ATE based testing with a real hardware device. It assumes that there is one ATE hooked up to one DUT in the testbed, and their ports are connected pairwise.</p> <p>Although original intent of <code>static binding</code> is to describe a connection between the ATE and a hardware Device Under Test (DUT), it can also be used to describe a back-2-back ATE setup, w/o a DUT. Such setup is helpful to validate basic ATE operations within FeatureProfiles test framework. In this lab, we're using otgb2b.binding paired with otgb2b.testbed testbed specification to describe such back-2-back ATE connection.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux host or VM with sudo permissions and Docker support</li> <li>Docker</li> <li>Go version 1.18 or later</li> <li><code>envsubst</code> command</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/#initial-setup","title":"Initial setup","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone --recursive https://github.com/open-traffic-generator/otg-examples.git\nOTGLABDIR=\"${PWD}/otg-examples/hybrid/fp-b2b\"\ncd \"${OTGLABDIR}\"\n</code></pre> </li> <li> <p>Pull Docker images (KENG Hybrid Operator currently requires Docker images to be present locally)</p> <pre><code>sudo docker compose --project-directory \"${OTGLABDIR}\" pull operator\nmake pull\n</code></pre> </li> <li> <p>Start and configure KENG Hybrid Operator</p> <pre><code>sudo docker compose --project-directory \"${OTGLABDIR}\" up -d\nsleep 2\ncurl --data-binary @\"${OTGLABDIR}/ixiatg-configmap.yml\" http://localhost:35000/config\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/#create-ixia-c-b2b-deployment","title":"Create Ixia-c B2B deployment","text":"<ol> <li> <p>Create a back-2-back connection using <code>veth</code> pair.</p> <pre><code>export OTG_PORT1=\"veth0\"\nexport OTG_PORT2=\"veth1\"\nsudo ip link add name ${OTG_PORT1} type veth peer name ${OTG_PORT2}\nsudo ip link set dev ${OTG_PORT1} up\nsudo ip link set dev ${OTG_PORT2} up\n</code></pre> <p>Instead of <code>veth</code> pair, you could also use one of the following methods. In such case, please initialize <code>OTG_PORT1</code> and <code>OTG_PORT2</code> env vars with correct interface names.</p> <ul> <li>a physical cable between two network interface cards</li> <li>a layer-2 switch between two network interface cards</li> </ul> </li> <li> <p>Request the <code>ixia-c-operator</code> to bring up Ixia-c test ports using ixia-c-hybrid.yml deployment manifest. Note how <code>envsubst</code> command will insert proper interface names you're using into the manifest before it gets submitted by the <code>curl</code> to the <code>ixia-c-operator</code> API.</p> <pre><code>cat \"${OTGLABDIR}/ixia-c-hybrid.yml\" | envsubst | curl --data-binary @- http://localhost:35000/create\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/#run-featureprofiles-otg-back-2-back-test","title":"Run FeatureProfiles OTG back-2-back test","text":"<ol> <li> <p>Run FeatureProfiles OTG B2B test</p> <pre><code>cd featureprofiles/feature/experimental/otg_only\ngo test -v otgb2b_test.go -testbed otgb2b.testbed -binding \"${OTGLABDIR}/otgb2b.binding\"\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/#cleanup","title":"Cleanup","text":"<p>To remove all the components we created, run:</p> <pre><code>cat \"${OTGLABDIR}/ixia-c-hybrid.yml\" | envsubst | curl -d @- http://localhost:35000/delete\nsudo ip link del name ${OTG_PORT1}\nsudo docker compose --project-directory \"${OTGLABDIR}\" down\ncd \"${OTGLABDIR}\"\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/","title":"Feature Profiles","text":"<p>Feature profiles defines groups of OpenConfig paths that can be invoked on network devices. A feature profile may contain configuration, telemetry, operational or any other paths that a device exposes. Example management plane device APIs are gNMI, and gNOI. Example control plane APIs are gRIBI, and protocols such as BGP, IS-IS.</p> <p>Feature profiles also includes a suite of Ondatra tests for validating the network device behavior for each defined feature. If you are new to Ondatra, please start by reading the Ondata README and taking the Ondatra tour.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#contributing","title":"Contributing","text":"<p>For information about how to contribute to OpenConfig Feature Profiles, please see Contributing to OpenConfig Feature Profiles.</p> <p>Feedback and suggestions to improve OpenConfig Feature Profiles is welcomed on the public mailing list, or by opening a GitHub issue.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#running-tests-on-virtual-devices","title":"Running Tests on Virtual Devices","text":"<p>Tests may be run on virtual devices using the Kubernetes Network Emulation binding.</p> <p>First, follow the steps for deploying a KNE cluster. Then follow the per-vendor instructions below for creating a KNE topology and running a test on it.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#arista","title":"Arista","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#ceos","title":"cEOS","text":"<p>Arista cEOS images can be obtained by contacting Arista.</p> <ol> <li>Create the topology:</li> </ol> <pre><code>kne create topologies/kne/arista/ceos/topology.textproto\n</code></pre> <ol> <li>Run a sample test:</li> </ol> <pre><code>go test ./feature/system/tests/... -kne-topo $PWD/topologies/kne/arista/ceos/topology.textproto -vendor_creds ARISTA/admin/admin\n</code></pre> <ol> <li>Cleanup:</li> </ol> <pre><code>kne delete topologies/kne/arista/ceos/topology.textproto\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#cisco","title":"Cisco","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#8000e","title":"8000e","text":"<p>NOTE: <code>8000e</code> images require the host supports nested virtualization.</p> <p>Cisco <code>8000e</code> images can be obtained by contacting Cisco.</p> <ol> <li>Create the topology:</li> </ol> <pre><code>kne create topologies/kne/cisco/8000e/topology.textproto\n</code></pre> <ol> <li>Run a sample test:</li> </ol> <pre><code>go test ./feature/example/tests/... -kne-topo $PWD/topologies/kne/cisco/8000e/topology.textproto -vendor_creds CISCO/cisco/cisco123\n</code></pre> <ol> <li>Cleanup:</li> </ol> <pre><code>kne delete topologies/kne/cisco/8000e/topology.textproto\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#xrd","title":"XRD","text":"<p>Cisco <code>XRD</code> images can be obtained by contacting Cisco.</p> <ol> <li>Create the topology:</li> </ol> <pre><code>kne create topologies/kne/cisco/xrd/topology.textproto\n</code></pre> <ol> <li>Run a sample test:</li> </ol> <pre><code>go test ./feature/example/tests/... -kne-topo $PWD/topologies/kne/cisco/xrd/topology.textproto -vendor_creds CISCO/cisco/cisco123\n</code></pre> <ol> <li>Cleanup:</li> </ol> <pre><code>kne delete topologies/kne/cisco/xrd/topology.textproto\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#juniper","title":"Juniper","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#cptx","title":"cPTX","text":"<p>NOTE: <code>cPTX</code> images require the host supports nested virtualization.</p> <p>Juniper <code>cPTX</code> images can be obtained by contacting Juniper.</p> <ol> <li>Create the topology:</li> </ol> <pre><code>kne create topologies/kne/juniper/cptx/topology.textproto\n</code></pre> <ol> <li>Run a sample test:</li> </ol> <pre><code>go test ./feature/example/tests/... -kne-topo $PWD/topologies/kne/juniper/cptx/topology.textproto -vendor_creds JUNIPER/root/Google123\n</code></pre> <ol> <li>Cleanup:</li> </ol> <pre><code>kne delete topologies/kne/juniper/cptx/topology.textproto\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#ncptx","title":"ncPTX","text":"<p>Juniper <code>ncPTX</code> images can be obtained by contacting Juniper.</p> <ol> <li>Create the topology:</li> </ol> <pre><code>kne create topologies/kne/juniper/ncptx/topology.textproto\n</code></pre> <ol> <li>Run a sample test:</li> </ol> <pre><code>go test ./feature/example/tests/... -kne-topo $PWD/topologies/kne/juniper/ncptx/topology.textproto -vendor_creds JUNIPER/root/Google123\n</code></pre> <ol> <li>Cleanup:</li> </ol> <pre><code>kne delete topologies/kne/juniper/ncptx/topology.textproto\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#nokia","title":"Nokia","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#sr-linux","title":"SR Linux","text":"<p>SR Linux images can be found here.</p> <ol> <li>Create the topology:</li> </ol> <pre><code>kne create topologies/kne/nokia/srlinux/topology.textproto\n</code></pre> <ol> <li>Run a sample test:</li> </ol> <pre><code>go test ./feature/example/tests/... -kne-topo $PWD/topologies/kne/nokia/srlinux/topology.textproto -vendor_creds NOKIA/admin/admin\n</code></pre> <ol> <li>Cleanup:</li> </ol> <pre><code>kne delete topologies/kne/nokia/srlinux/topology.textproto\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#running-tests-on-real-hardware","title":"Running Tests on Real Hardware","text":"<p>Tests may be run on real hardware devices using the static binding.</p> <p>The static binding supports the testbeds in the <code>topologies/*.testbed</code> files. The mapping between the IDs in the testbed file and the physical devices are provided by the corresponding <code>topologies/*.binding</code> files. To try it out, edit <code>otgdut_4.binding</code> to specify the mapping from testbed IDs to actual hardware devices, as well as the desired protocol dial options. Then test it by running:</p> <pre><code>go test ./feature/example/tests/topology_test -binding $PWD/topologies/otgdut_4.binding\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/#path-validation","title":"Path validation","text":"<p>The <code>make validate_paths</code> target will clone the public OpenConfig definitions and report Feature Profiles that have invalid OpenConfig paths.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/","title":"Contributing the Openconfig Feature Profiles","text":"<p>Thank you for your interest in contributing to OpenConfig feature profiles.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#rationale","title":"Rationale","text":"<p>See the README for an explanation of what OpenConfig feature profiles are and why we have them.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#ways-to-contribute","title":"Ways to Contribute","text":"<p>OpenConfig prefers contributions in the form of code, documentation and even bug reporting. If you wish to discuss the suitability or approach for a change this can be done with an issue in the OpenConfig feature profiles GitHub.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#contributor-license-agreement","title":"Contributor License Agreement","text":"<p>All contributions to OpenConfig feature profiles MUST be Apache 2.0 licensed. The Google contributor license agreement (CLA), MUST be signed for any contribution to be merged into the repository.</p> <p>The CLA is used to ensure that the rights to use the contribution are well understood by the OpenConfig community. Since copyright over each contribution is assigned to its authors, code comments should reflect the contribution made, and the copyright holder. No code will be reviewed if the license is not explicitly stated, or the CLA has not been signed.</p> <p>Note that we use the Google CLA because the OpenConfig project is administered and maintained by Google, not to ascribe any specific rights to a single OpenConfig contributor.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#code-style","title":"Code Style","text":"<p>All code should follow Go Code Review Comments, Effective Go, and Google Go Style Guide for writing readable Go code with a consistent look and feel.</p> <p>All code and documentation should follow Google developer documentation style guide for the use of inclusive language.</p> <p>It is recommended that tests follow Testing on the Toilet for best practices on design patterns.</p> <p>Here is a specific list of test design patterns that we follow:</p> <ul> <li>Table Driven Tests,     except we do not want test cases to run in parallel.</li> <li>Testing on the Toilet: Don't Put Logic in Tests.</li> <li>Code Health: Eliminate YAGNI Smells.</li> <li>Why does Go not have assertions?</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#directory-organization","title":"Directory Organization","text":"<p>The directory tree is organized as follows:</p> <ul> <li><code>cloudbuild/</code> contains google cloud build scripts for running virtual     routers in containers on KNE</li> <li><code>feature/</code> contains definition and tests of feature profiles.</li> <li><code>feature/experimental</code> contains new features and tests which are not yet     categorized or not confirmed to pass on any hardware platform or software     release. When the test is deemed more mature, it is moved to the <code>feature/</code>     directory.</li> <li><code>internal/</code> contains packages used by feature profile tests.</li> <li><code>proto/</code> contains protobuf files for feature profiles.</li> <li><code>tools/</code> contains code used for CI checks.</li> <li><code>topologies/</code> contains the testbed topology definitions.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#allowed-file-types","title":"Allowed File Types","text":"<p>Regular files should be plain text in either ASCII or UTF-8 encoding. Please omit empty files.</p> <p>Regular files should not have the executable bit. In particular:</p> <ul> <li>Source code should not be executable. That's because they have to be     compiled into a binary before they can be executed.</li> <li>Text-formatted protos are not executable. These including the testbed and     binding files.</li> <li>Device configs are not executable.</li> </ul> <p>Exceptions are the scripts (Shell, Python or Perl) for generating code or for checking the integrity of the repository. Scripts should have the executable bit set.</p> <p>Please do not check in binary files. If there is a need to expand the scope of allowed file types, please file an issue for discussion.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#test-suite-organization","title":"Test Suite Organization","text":"<p>Test suites should be placed in subdirectories formatted like <code>feature/&lt;featurename&gt;/[&lt;sub-feature&gt;/]&lt;tests|ate_tests|otg_tests|kne_tests&gt;/&lt;test_name&gt;/&lt;test_name&gt;.go</code>. For example:</p> <ul> <li><code>feature/interface/</code> is the collection of interface feature profiles.</li> <li><code>feature/interface/singleton/</code> contains the singleton interface feature     profile.</li> <li><code>feature/interface/singleton/README.md</code> - documents the singleton interface     feature profile.</li> <li><code>feature/interface/singleton/feature.textproto</code> - defines the singleton     interface feature profile in machine readable format.</li> <li><code>feature/interface/singleton/ate_tests/</code> contains the singleton interfaces     test suite using ATE traffic generation API.</li> <li><code>feature/interface/singleton/otg_tests/</code> contains the singleton interfaces     test suite using OTG traffic generation API.</li> <li><code>feature/interface/singleton/kne_tests/</code> contains the singleton interfaces     test suite that are intended to only run under KNE and not on hardware     devices.</li> <li><code>feature/interface/singleton/tests/</code> contains the singleton interfaces test     suite without traffic generation.</li> <li><code>internal/deviations</code> contains code which overrides test behavior where     there are known issues in a DUT. Follow the guidelines posted at     <code>internal/deviations/README.md</code> to add new deviations.</li> </ul> <p>Within each test directory, <code>README.md</code> should document the test plan. The test name directory and the <code>*.go</code> files should be named after the test name as shown in the project item.</p> <p>Each test must also be accompanied by a <code>metadata.textproto</code> file that supplies the metadata for annotating the JUnit XML test results. This file can be generated or updated using the command: <code>go run ./tools/addrundata --fix</code>. See addrundata for more info.</p> <p>For example:</p> <ul> <li><code>feature/interface/singleton/otg_tests/singleton_test/README.md</code> - documents     the test plan for the issue     RT-5.1 Singleton Interface.</li> <li><code>feature/interface/singleton/otg_tests/singleton_test/singleton_test.go</code>     implements the issue.</li> <li><code>feature/interface/singleton/otg_tests/singleton_test/rundata_test.go</code>     contains the rundata.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#code-should-follow-the-test-plan","title":"Code Should Follow The Test Plan","text":"<p>The test plan in <code>README.md</code> is generally structured like this:</p> <pre><code># RT-5.1: Singleton Interface\n\n## Summary\n\n...\n\n## Procedure\n\n1. Step 1\n2. Step 2\n3. ...\n\n## Config Parameter Coverage\n\n*   /interfaces/interface/config/name\n*   /interfaces/interface/config/description\n*   ...\n\n## Telemetry Parameter Coverage\n\n*   /interfaces/interface/state/oper-status\n*   /interfaces/interface/state/admin-status\n*   ...\n</code></pre> <p>Each step in the test plan procedure should correspond to a comment or <code>t.Log</code> in the code. Steps not covered by code should have a TODO.</p> <p>In the PR, please mention any corrections made to the test plan for errors that were discovered when implementing the code.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#test-structure","title":"Test Structure","text":"<p>Generally, a Feature Profiles ONDATRA test has the following stages: configure DUT, configure ATE, generate and verify traffic, verify telemetry. The configuration stages should be factored out to their own functions, and any subtests should be run under <code>t.Run</code> so the test output clearly reflects which parts of the test passed and which parts failed.</p> <p>They typically just report the error using <code>t.Error()</code> for checks. This way, the error message is accurately attributed to the line of code where the error occurred.</p> <pre><code>func TestFoo(t *testing.T) {\n  configureDUT(t) // calls t.Fatal() on error.\n  configureATE(t) // calls t.Fatal() on error.\n  t.Run(\"Traffic\", func(t *testing.T) { ... })\n  t.Run(\"Telemetry\", func(t *testing.T) { ... })\n}\n</code></pre> <p>In the above example, <code>configureDUT</code> and <code>configureATE</code> should not be subtests, otherwise they could be skipped when someone specifies a test filter. The \"Traffic\" and \"Telemetry\" subtests will both run even if there is a fatal condition during <code>t.Run()</code>.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#table-driven-tests","title":"Table Driven Tests","text":"<p>Each case in a table driven test should also be delineated with <code>t.Run()</code> as a subtest and should have a symbolic name and a description. The description text should be a direct quote from the test plan. The symbolic name allows test filtering, and the description should be logged at the beginning of the subtest.</p> <pre><code>func TestTableDriven(t *testing.T) {\n  cases := []struct{\n    name, desc string\n    ...\n  }{\n    ...\n  }\n  for _, c := range cases {\n    t.Run(c.name, func(t *testing.T) {\n      t.Log(\"Description: \", c.desc)\n      configureDUT(t, /* parameterized by c */)\n      configureATE(t, /* parameterized by c */)\n      t.Run(\"Traffic\", func(t *testing.T) { ... })\n      t.Run(\"Telemetry\", func(t *testing.T) { ... })\n    })\n  }\n}\n</code></pre> <p>If the table driven test does not change either the DUT or the ATE between cases, these stages may be moved out of the for-loop.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#subtests-vs-test-helpers","title":"Subtests vs. Test Helpers","text":"<p>When the setup is more involved, it is often necessary to break test code into separate functions as subtests, or rely on test helpers. The way we distinguish between subtests and test helpers is by their arguments.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#when-to-use-a-subtest","title":"When to Use a Subtest","text":"<p>A subtest or a portion of a test takes <code>t *testing.T</code> as the argument. A portion of a test implements what is explicitly described in the test plan procedure, typically limited to a single step.</p> <pre><code>// configureIPv4ViaClientA configures an IPv4 entry via client A with Election ID of 12.\n// Ensure that the entry is installed.\nfunc configureIPv4ViaClientA(t *testing.T, client *fluent.GRIBIClient) {\n  // Do not call t.Helper()\n}\n</code></pre> <p>Generally, most code in <code>foo_test.go</code> should be test code.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#when-to-use-a-test-helper","title":"When to Use a Test Helper","text":"<p>On the other hand, a test helper provides an implementation detail below what is specified in the test plan. They are often reusable across many tests. Generally, test helpers should be a package under <code>internal</code>, e.g. <code>internal/gribi</code>.</p> <p>It is recommended that a test helper simply returns error as usual and does not report test errors on its own. When necessary, it may accept <code>t testing.TB</code> as an argument if it has to report <code>t.Error()</code>, in which case it must call <code>t.Helper()</code> as the first statement, so the test error is attributed to the caller instead of to the helper.</p> <pre><code>// fooHelper is recommended.\nfunc fooHelper(...) error {\n  ...\n}\n\n// barHelper is also OK.\nfunc barHelper(t testing.TB, ...) {\n  t.Helper()\n  // Any t.Error() in the code is attributed to the caller.\n}\n</code></pre> <p>Don't do both. If a helper returns an error value and still reports <code>t.Error()</code>, it creates redundant and possibly divergent error paths that the caller will have to remember checking.</p> <pre><code>// bazHelper is NOT ok because it mixes error reporting.\nfunc bazHelper(t testing.TB, ...) error {\n  t.Error(...)  // Don't do this.\n}\n</code></pre> <p>Do not write assertion helpers.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#enum","title":"Enum","text":"<p>Sometimes a test may need to set a ygot field with an OpenConfig enum type, e.g. IP_PROTOCOL. The constant for <code>IP_TCP</code> has the description \"Transmission Control Protocol (6)\". The value <code>6</code> here refers to the IANA-assigned protocol numbers, but ygot-generated code assigns enum values sequentially, and <code>PacketMatchTypes_IP_PROTOCOL_IP_TCP</code> in enum.go actually has the value <code>9</code>.</p> <p>This is okay:</p> <pre><code>acl := d.GetOrCreateAcl().GetOrCreateAclSet(aclName, telemetry.Acl_ACL_TYPE_ACL_IPV4)\na1 := acl.GetOrCreateAclEntry(1)\na1v4 := a1.GetOrCreateIpv4()\na1v4.Protocol = telemetry.PacketMatchTypes_IP_PROTOCOL_IP_TCP\n</code></pre> <p>This is also okay because the port number is not a numerical enum constant.</p> <pre><code>const bgpPort = 179\na1t := a1.GetOrCreateTransport()\na1t.DestinationPort = telemetry.UnionUint16(bgpPort)\n</code></pre> <p>The ygot-generated numerical enum values are internal. When the ygot <code>GoStruct</code> is serialized to JSON, it will output the string <code>\"IP_TCP\"</code>. Do not use the numerical enum values.</p> <pre><code>// This is NOT ok because it uses an internal numerical constant.\n// Also, the constant actually refers to IP_L2TP, not IP_TCP.\nalv4.Protocol = telemetry.UnionUint8(6)\n\n// This is also NOT ok.\na1v4.Protocol, _ = a1v4.To_Acl_AclSet_AclEntry_Ipv4_Protocol_Union(6)\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#ip-addresses-assignment","title":"IP Addresses Assignment","text":"<p>Netblocks used in the test topology should follow IPv4 Address Blocks Reserved for Documentation (RFC 5737), IPv4 reserved for Benchmarking Methodology (RFC 2544), and IPv6 Address Prefix Reserved for Documentation (RFC 3849). In particular:</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#ipv4","title":"IPv4","text":"<ul> <li><code>TEST-NET-1</code>: (192.0.2.0/24): control plane addresses split into /30 subnets     for each ATE/DUT port pair.</li> <li><code>TEST-NET-2</code>: (198.51.100.0/24): data plane source network addresses used     for traffic testing; split as needed.</li> <li><code>TEST-NET-3</code>: (203.0.113.0/24): data plane destination network addresses     used for traffic testing; split as needed.</li> <li><code>BMWG</code>: (198.18.0.0/15): additional data plane networks.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#ipv6","title":"IPv6","text":"<p>2001:DB8::/32 is a very large space, so we divide them as follows.</p> <ul> <li>2001:DB8:0::/64: control plane addresses split into /126 subnets for each     ATE/DUT port pair.</li> <li>2001:DB8:1::/64: data plane addresses used for traffic testing as the source     address; split as needed.</li> <li>2001:DB8:2::/64: data plane addresses used for traffic testing as the     destination address; split as needed.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#rationale_1","title":"Rationale","text":"<p>The properties being tested in the test plan are agnostic to the IP addresses being used, so tests do not require a specific hard-coded IP address. However, tests must avoid choosing addresses already used by a public network or a local network, in order to avoid misconfigured DUT from flooding the network with test traffic and causing service disruption.</p> <p>Here are some examples why certain addresses commonly found in networking tutorials online could be problematic. DO NOT USE these addresses.</p> <ul> <li>1.1.1.1 belongs to APNIC and Cloudflare DNS     Resolver project.</li> <li>2.2.2.2 belongs to Orange S.A. in France.</li> <li>9.9.9.9 belongs to Quad9 in Switzerland.</li> <li>111.111.111.111 belongs to KDDI     CORPORATION in Japan.</li> <li>222.222.222.222 belongs to CHINANET     hebei province network in China.</li> </ul> <p>We also avoid using the private addresses commonly used in a local network, such as 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, because test traffic destined to these addresses may disrupt your local network. We also avoid 100.64.0.0/10 which is used by Carrier Grade NAT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#asn-assignment","title":"ASN Assignment","text":"<p>Autonomous System numbers used in test should follow Autonomous System (AS) Number Reservation for Documentation Use (RFC 5398). In particular:</p> <ul> <li>16-bit ASN: 64496 - 64511 (<code>0xfbf0</code> - <code>0xfbff</code>)</li> <li>32-bit ASN: 65536 - 65551 (<code>0x10000</code> - <code>0x1000f</code>)</li> </ul> <p>Both ranges have 16 total numbers each. The hexadecimal notation makes it more obvious where the range starts and stops.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#default-network-instance","title":"Default Network Instance","text":"<p>In OpenConfig PR #599, it has been clarified that the name for the default network instance should be uppercase <code>\"DEFAULT\"</code>. Some legacy devices are still using lowercase <code>\"default\"</code>, so device tests should use the deviation <code>*deviations.DefaultNetworkInstance</code> which allows them to work on those legacy devices while they are being updated. Non-device unit tests may hard-code <code>\"DEFAULT\"</code>.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>To contribute a pull request:</p> <ol> <li> <p>Make a fork of the     openconfig/featureprofiles     repo and make the desired changes, following the     GitHub Quickstart     guide.</p> <ul> <li>New contributions should be in the feature/experimental directory.</li> </ul> </li> <li> <p>When opening a pull request, use a descriptive title and detail. See     Pull Request Title below.</p> <ul> <li>Pull requests should be kept small, ideally under 500 lines. Small     changes allow detailed discussions of the additions that are being made     to the model, whilst also ensuring that course-corrections can be made     early in the process. If a PR is growing to more than 500 lines, it may     need to be broken into multiple smaller PRs.</li> </ul> </li> <li> <p>The pull request should include both the suggested feature profile textproto     additions, as well as any relevant additions to tests. Tests should be     written in Go using the ONDATRA     framework.</p> </li> <li> <p>We are in the process of migrating tests using the Ondatra ATE API to the     OTG API, so many tests have both versions. When making changes to an ATE     test, please port the changes to its OTG test unless it is missing. ATE     tests are found under the path <code>ate_tests</code>, and OTG tests under <code>otg_tests</code>.</p> </li> <li> <p>The automated CI running against each pull request will check the pull     request for compliance. The author should resolve any issues found by CI.</p> </li> <li> <p>One or more peers in the community may review the pull request.</p> </li> <li> <p>A feature profile repository maintainer will be reponsible for a final     review and approval. Only a feature repository maintainer can merge a pull     request to the main branch.</p> </li> </ol> <p>The aim of this process is maintain the model quality and approach that OpenConfig working group has strived for since its inception in 2014. Thank you for your contributions!</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/CONTRIBUTING/#pull-request-title","title":"Pull Request Title","text":"<p>Pull request title should start with the scope (i.e. section in the test plan).</p> <pre><code>RT-5.1 singleton configuration and telemetry, no traffic test yet\n</code></pre> <p>The description may add more details as desired to benefit the reviewers. The preferred format is:</p> <pre><code>    * (M) internal/fptest/*\n      - Add a helper for referencing a keychain from other modules.\n    * (M) feature/experimental/isis/ate_tests/base_adjacencies_test\n      - Fix testing of hello-authentication to reference a specific\n        keychain.\n      - Fix authentication of *SNP packets, referencing a keychain\n        that can be used to auth these packets.\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/","title":"Instructions for this template","text":"<p>Below is the required template for writing test requirements.  Good examples of test requirements include:</p> <ul> <li>TE-3.7: Base Hierarchical NHG Update</li> <li>gNMI-1.13: Telemetry: Optics Power and Bias Current</li> <li>RT-5.1: Singleton Interface</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/#testid-xy-short-name-of-test-here","title":"TestID-x.y: Short name of test here","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/#summary","title":"Summary","text":"<p>Write a few sentences or paragraphs describing the purpose and scope of the test.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/#testbed-type","title":"Testbed type","text":"<ul> <li>Specify the .testbed topology file from the topologies folder to be used with this test</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/#procedure","title":"Procedure","text":"<ul> <li>TestID-x.y.z - Name of subtest</li> <li>Step 1</li> <li>Step 2</li> <li> <p>Validation and pass fail criteria</p> </li> <li> <p>TestID-x.y.z - Name of subtest</p> </li> <li>Step 1</li> <li>Step 2</li> <li>Validation and pass fail criteria</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>Add list of OpenConfig 'config' paths used in this test, if any.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<p>Add list of OpenConfig 'state' paths used in this test, if any.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>Add list of OpenConfig RPC's (gNMI, gNOI, gNSI, gRIBI) used in the list, if any.</p> <p>For example:</p> <ul> <li>gNMI</li> <li>Set</li> <li>Subscribe</li> <li>gNOI</li> <li>System<ul> <li>KillProcess</li> </ul> </li> <li>Healthz<ul> <li>Get</li> <li>Check</li> <li>Artifact</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/doc/test-requirements-template/#required-dut-platform","title":"Required DUT platform","text":"<ul> <li>Specify the minimum DUT-type:</li> <li>MFF - A modular form factor device containing LINECARDs, FABRIC and redundant CONTROLLER_CARD components</li> <li>FFF - fixed form factor</li> <li>vRX - virtual router device</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/","title":"ACL-1.2: ACL Update (Make-before-break)","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#summary","title":"Summary","text":"<p>Configure an IP ACL, then test changing the ACL configuration to ensure a make-before-break behavior is performed.  Make before break for ACL is defined as</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#acl-1-layer-3-terms","title":"ACL-1 Layer 3 terms","text":"<ul> <li>IP src</li> <li>IP dst</li> <li>TCP src port</li> <li>TCP src port range</li> <li>TCP dst port</li> <li>TCP dst port range</li> <li>UDP src port</li> <li>UDP src port range</li> <li>ICMP proto</li> <li> <p>ICMP type</p> </li> <li> <p>IPv4 initial fragment</p> </li> <li>IPv4 non-initial fragment</li> <li>IPv6 fragmentation (1st next-header)</li> <li>MatchAll</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#sub-test-1","title":"Sub Test 1","text":"<ul> <li>Configure DUT with input and output interfaces and static routing.</li> <li>Configure IPv4 and IPv6 ACLs with terms specified in the table.</li> <li>All terms should have Deny action.</li> <li>\u201cMatch all\u201d term should have Accept and Count actions.</li> <li>Apply these ACLs in ingress direction on the DUT input interface.</li> <li>Start IP traffic flows matching these terms.</li> <li>Verify received packets and ACL term counters on DUT.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#sub-test-2","title":"Sub Test 2","text":"<ul> <li>Inverse filtering logic: permit traffic on all terms, deny traffic on MatchAll terms.</li> <li>Perform ACL update by adding a single matching condition to all terms (additional address or port).</li> <li>Verify that the device is running an updated ACL version.</li> <li>No config error</li> <li>No difference between committed ACL and intended config ACL</li> <li>Verify traffic drops for sent flows on ATE ingress interface (no more than 50ms of traffic should be dropped).</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#sub-test-3","title":"Sub test 3","text":"<ul> <li>Repeat the same test by moving ACLs to the DUT egress interface.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<pre><code>acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address\nacl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol\nacl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address\n\nacl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address\nacl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol\nacl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address\n\nacl/interfaces/interface/ingress-acl-sets/ingress-acl-set\nacl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries\nacl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry\n\nacl/interfaces/interface/egress-acl-sets/egress-acl-set\nacl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries\nacl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<pre><code>acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets\nacl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/acl/otg_tests/acl_update_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>MFF</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/addpath/otg_tests/route_propagation_test/","title":"RT-1.3: BGP Route Propagation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/addpath/otg_tests/route_propagation_test/#summary","title":"Summary","text":"<p>BGP Route Propagation</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/addpath/otg_tests/route_propagation_test/#procedure","title":"Procedure","text":"<p>Establish eBGP sessions between:</p> <ul> <li>ATE port-1 and DUT port-1</li> <li>ATE port-2 and DUT port-2</li> <li>Configure Route-policy under BGP peer-group address-family</li> </ul> <p>For IPv4 and IPv6:</p> <ul> <li>Advertise prefixes from ATE port-1, observe received prefixes at ATE port-2.</li> <li>TODO: Specify default accept for received prefixes on DUT.</li> <li>TODO: Specify table based neighbor configuration to cover - validating the     supported capabilities from the DUT.<ul> <li>TODO: MRAI (minimum route advertisement interval), ensuring routes are     advertised within specified time.</li> <li>IPv4 routes with an IPv6 next-hop when negotiating RFC5549 - validating     that routes are accepted and advertised with the specified values.</li> <li>TODO: With ADD-PATH enabled, ensure that multiple routes are accepted     from a neighbor when advertised with individual path IDs, and that these     routes are advertised to ATE port-2.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/addpath/otg_tests/route_propagation_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>For prefix: /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor</p> <p>Parameters:</p> <ul> <li>afi-safis/afi-safi/add-paths/config/receive</li> <li>afi-safis/afi-safi/add-paths/config/send</li> <li>afi-safis/afi-safi/add-paths/config/send-max</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/addpath/otg_tests/route_propagation_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<p>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/supported-capabilities</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/addpath/otg_tests/route_propagation_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>BGP</p> <ul> <li>OPEN<ul> <li>Capabilities (Extended nexthop encoding capability (5), ADD-PATH (69))</li> </ul> </li> <li>UPDATE<ul> <li>Extended NLRI Encodings (RFC7911)</li> <li>Nexthop AFI (RFC5549)</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/afi_safi/oc_defaults/","title":"Index","text":"<ul> <li>When operating in \"openconfig mode\", NOS (network operating system) defaults should match what OC defines as the defaults i.e,<ul> <li>For BGP, there are no defaults for AFI-SAFI at the neighbor and peer-group levels. However at the global level the default is \"false\"</li> </ul> </li> <li>This test currently only verifies the defaults for ipv4-unicast and ipv6-unicast families. However, this test can be extended further to cover for other     AFI-SAFIs as well in future.</li> <li>The test will check for default implementations under the neighbor and peer-group hierarchies and also test for inheritance rules as was specified in pull/774 and pull/815.</li> </ul> <p>Topology: ATE (Port1) &lt;-EBGP-&gt; (Port1) DUT (Port2) &lt;-IBGP-&gt; (Port2) ATE   - Connect ATE Port1 to DUT port1 (EBGP peering)   - Connect ATE Port2 to DUT port2 (IBGP peering)</p> <p>Procedure:   - [Test case-1] AFI-SAFI configurations at \"neighbor level\":     - Push EBGP and IBGP OC configuration to the DUT        - Configuration should include corresponding IPv4 and IPv6 neighbor configurations.       - Ensure that only IPv4-Unicast enabled boolean is made \"true\" for IPv4 neighbor. \"IPv6-unicast enabled\" boolean is left to OC default for the IPv4 peer\".       - Ensure that only IPv6-Unicast enabled boolean is made \"true\" for IPv6 neighbor. \"IPv4-unicast enabled\" boolean is left to OC default for the IPv6 peer\".       - Ensure that there are no AFI-SAFI configurations at the global and peer-group levels.        - On the ATE side ensure that IPv4-unicast and IPv6-unicast AFI-SAFI are enabled==true for IPv4 and IPv6 neighbors.   - verification:       - For IPv4 neighbor, ensure that the IPv4 neighborship is up and IPv6-unicast capability is not negotiated.       - For IPv6 neighbor ensure that the IPv6 neighborship is up and IPv4-unicast capability is not negotiated.     - [Test case-2] IPv4-unicast and IPv6-Unicast AFI-SAFIs enabled at peer-group level:     - Configuration at the neighbor level is same as in [Test case-1] except for IPv4-unicast and IPv6-unicast being enabled at the peer-group level     - No configuration should be made at the global AFI-SAFI level     - verification:       - For IPv4 neighbor, ensure that the IPv4 neighborship is up and both IPv4-unicast and IPv6-unicast capabilities are negotiated.       - For IPv6 neighbor ensure that the IPv6 neighborship is up and both IPv4-unicast and IPv6-unicast capabilities are negotiated.   - [Test case-4] IPv4-unicast and IPv6-Unicast AFI-SAFIs enabled at Global level:     - Configuration at the neighbor level is same as in [Test case-1] except for IPv4-unicast and IPv6-unicast being enabled at the global level     - No configuration should be made at the peer-group AFI-SAFI level     - verification:       - For IPv4 neighbor, ensure that the IPv4 neighborship is up and both IPv4-unicast and IPv6-unicast capabilities are negotiated.       - For IPv6 neighbor ensure that the IPv6 neighborship is up and both IPv4-unicast and IPv6-unicast capabilities are negotiated.</p> <p>Config Parameter coverage:</p> <p>/network-instances/network-instance/protocols/protocol/bgp/global/config/as   /network-instances/network-instance/protocols/protocol/bgp/global/config/router-id   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/auth-password   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/neighbor-address   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/peer-as   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/neighbor-address   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/config/enabled</p> <p>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/auth-password   /network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/neighbor-address   /network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/peer-as   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/peer-group/peer-group-name   /network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi/config/enabled</p> <p>/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/config/enabled</p> <p>Telemetry Parameter coverage:   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/session-state   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/supported-capabilities   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/peer-type   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/peer-as   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/supported-capabilities</p> <p>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-type   /network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-as   /network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/local-as   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/peer-group</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/gracefulrestart/ate_tests/bgp_graceful_restart_test/","title":"RT-1.4: BGP Graceful Restart","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/gracefulrestart/ate_tests/bgp_graceful_restart_test/#summary","title":"Summary","text":"<p>BGP Graceful Restart</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/gracefulrestart/ate_tests/bgp_graceful_restart_test/#procedure","title":"Procedure","text":"<ul> <li>Establish eBGP sessions between:<ul> <li>ATE port-1 and DUT port-1</li> <li>ATE port-2 and DUT port-2</li> <li>Configure allow route-policy under BGP peer-group address-family</li> </ul> </li> <li>Validate received capabilities at DUT and ATE reflect support for graceful     restart.</li> <li>For IPv4 and IPv6 routes:<ul> <li>(Restarting speaker) Advertise prefixes between the ATE ports, through     the DUT. Trigger DUT session restart by disconnecting TCP session     between DUT and ATE (this may be achieved by using an ACL), determine     that packets are:<ul> <li>Forwarded between ATE port-1 and DUT port-1 for the duration of the     specified stale routes time.</li> <li>Dropped after the stale routes timer has expired.</li> <li>Forwarded again between ATE port-1 and DUT port-1 after the session     is re-established.</li> </ul> </li> <li>(Receiving speaker) Advertise prefixes between the ATE ports, through     the DUT. Trigger session restart by disconnecting the BGP session from     ATE port-2.<ul> <li>Ensure that prefixes are propagated to ATE port-2 during the     restart.</li> <li>Ensure that traffic can be forwarded between ATE port-1 and ATE     port-2 during stale routes time.</li> <li>Ensure that prefixes are withdrawn, and traffic cannot be forwarded     between ATE port-1 and port-2 after the stale routes time expires.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/gracefulrestart/ate_tests/bgp_graceful_restart_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>For prefixes:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor</li> </ul> <p>Parameters:</p> <ul> <li>graceful-restart/config/enabled</li> <li>graceful-restart/config/restart-time</li> <li>graceful-restart/config/stale-routes-time</li> <li>graceful-restart/config/helper-only</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/gracefulrestart/ate_tests/bgp_graceful_restart_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>afi-safis/afi-safi/afi-safi-name</li> <li>afi-safis/afi-safi/graceful-restart/state/advertised</li> <li>afi-safis/afi-safi/graceful-restart/state/peer-restart-time</li> <li>afi-safis/afi-safi/graceful-restart/state/received</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/","title":"RT-7: BGP default policies","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#summary","title":"Summary","text":"<p>Following expectation for default-policies at the peer-group and neighbor levels * For eBGP peers, when no policy is attached all routes should be rejected for import and export per RFC 8212.     * TODO: OC clarification to confirm the eBGP behavior, https://github.com/openconfig/public/issues/981</p> <ul> <li>For IBGP peers when no policy is attached including the default-policy, default should be import and export all BGP routes.<ul> <li>TODO:  OC clarification on iBGP behavior, https://github.com/openconfig/public/issues/981</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#topology","title":"Topology","text":"<pre><code>graph LR; \nA[OTG:Port1] &lt;-- EBGP --&gt; B[Port1:DUT:Port2];\nB &lt;-- IBGP+IS-IS --&gt; C[Port2:OTG];\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#procedure","title":"Procedure","text":"<ul> <li>DUT:Port1 has EBGP peering with ATE:Port1. Ensure ATE:Port1 advertises IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3. Please also configure IPv4-prefix7 and IPv6-prefix7 on ATE:Port1 but these shouldn't be advertised over EBGP to the DUT</li> <li>DUT:Port2 has IBGP peering with ATE:Port2 using its loopback interface. The loopback interface is reachable only via IS-IS. Ensure ATE:Port2 advertises IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6 over IBGP. Please also configure IPv4-prefix8 and IPv6-prefix8 on ATE:Port2 but these shouldnt be advertised over IBGP to the DUT</li> <li>Conduct following test procedures by applying policies at the Peer-group and Neighbor AFI-SAFI levels.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#rt-71-policy-definition-in-policy-chain-is-not-satisfied-and-default-policy-has-reject_route-action","title":"RT-7.1 : Policy definition in policy chain is not satisfied and Default Policy has REJECT_ROUTE action","text":"<ul> <li>Create a default-policy REJECT-ALL with action as REJECT_ROUTE and apply the same to both IPV4-unicast and IPV6-unicast AFI-SAFI</li> <li>Create policy EBGP-IMPORT-IPV4 that only accepts IPv4-prefix1 and IPv4-prefix2 and then terminates</li> <li>Create policy EBGP-IMPORT-IPV6 that only accepts IPv6-prefix1 and IPv6-prefix2 and then terminates</li> <li>Create policy EBGP-EXPORT-IPV4 that only allows IPv4-prefix4 and terminates</li> <li>Create policy EBGP-EXPORT-IPV6 that only allows IPv6-prefix4 and terminates</li> <li>Create policy IBGP-IMPORT-IPV4 that only accepts IPv4-prefix4 and IPv4-prefix5 and then terminates</li> <li>Create policy IBGP-IMPORT-IPV6 that only accepts IPv6-prefix4 and IPv6-prefix5 and then terminates</li> <li>Create policy IBGP-EXPORT-IPV4 that only allows IPv4-prefix1 and terminates</li> <li>Create policy IBGP-EXPORT-IPV6 that only allows IPv6-prefix1 and terminates</li> <li>Apply the above policies to the respective peering at the repective AFI-SAFI levels</li> <li>Add following static routes<ul> <li>Static route for IPv4-prefix7 and IPv6-prefix7 pointing at ATE:Port1</li> <li>Static route for IPv4-prefix8 and IPv6-prefix8 pointing at ATE:Port2</li> </ul> </li> <li>Following test expectations. If expectations not met, the test should fail.<ul> <li>DUT:Port1 should reject import of IPv4-prefix3 and IPv6-prefix3</li> <li>DUT:Port1 should reject export of IPv4-prefix5 and IPv6-prefix5</li> <li>DUT:Port2 should reject import of IPv4-prefix6 and IPv6-prefix6</li> <li>DUT:Port2 should reject export of IPv4-prefix2 and IPv6-prefix2</li> <li>IS-IS and static routes shouldn't be advertised to the EBGP and IBGP peers.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#rt-72-policy-definition-in-policy-chain-is-not-satisfied-and-default-policy-has-accept_route-action","title":"RT-7.2 : Policy definition in policy chain is not satisfied and Default Policy has ACCEPT_ROUTE action","text":"<ul> <li>Continue with the same configuration as RT-7.1</li> <li>Replace the default-policy REJECT-ALL with default-policy ACCEPT-ALL which has action ACCEPT_ROUTE.</li> <li>Ensure ACCEPT-ALL default-policy is applied to both IPv4-unicast and IPv6-unicast AFI-SAFI of both IBGP and EBGP peers</li> <li>Following test expectations. If expectations not met, the test should fail.<ul> <li>DUT:Port1 should accept import of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>DUT:Port1 should allow export of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should accept import of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should allow export of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>IS-IS and static routes shouldn't be advertised to the EBGP and IBGP peers.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#rt-73-no-policy-attached-either-at-the-peer-group-or-at-the-neighbor-level-and-default-policy-has-accept_route-action","title":"RT-7.3 : No policy attached either at the Peer-group or at the neighbor level and Default Policy has ACCEPT_ROUTE action","text":"<ul> <li>Continue with the same configuration as RT-7.2. However, do not attach any non-default import/export policies to the peers at either the peer-group or neighbor levels.</li> <li>Ensure that the ACCEPT-ALL default-policy with default action of ACCEPT_ROUTE is appled to both IPv4-unicast and IPv6-unicast AFI-SAFI of both IBGP and EBGP peers</li> <li>Following test expectations. If expectations not met, the test should fail.<ul> <li>DUT:Port1 should accept import of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>DUT:Port1 should allow export of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should accept import of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should allow export of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>IS-IS and static routes shouldn't be advertised to the EBGP and IBGP peers.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#rt-74-no-policy-attached-either-at-the-peer-group-or-at-the-neighbor-level-and-default-policy-has-reject_route-action","title":"RT-7.4 : No policy attached either at the Peer-group or at the neighbor level and Default Policy has REJECT_ROUTE action","text":"<ul> <li>Continue with the same configuration as RT-7.3. Ensure no non-default import/export policies are applied to the peers at either the peer-group or neighbor levels.</li> <li>Ensure that only the REJECT-ALL default-policy with default action of REJECT_ROUTE is appled to both IPv4-unicast and IPv6-unicast AFI-SAFI of both IBGP and EBGP peers</li> <li>Following test expectations. If expectations not met, the test should fail.<ul> <li>DUT:Port1 should reject import of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>DUT:Port1 should reject export of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should reject import of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should reject export of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>IS-IS and static routes shouldn't be advertised to the EBGP and IBGP peers.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#rt-75-no-policy-including-the-default-policy-is-attached-either-at-the-peer-group-or-at-the-neighbor-level-for-only-ibgp-peer","title":"RT-7.5 : No policy, including the default-policy is attached either at the Peer-group or at the neighbor level for only IBGP peer","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#todo-rt-75-should-be-automated-only-after-the-expected-behavior-is-confirmed-in-httpsgithubcomopenconfigpublicissues981","title":"TODO: RT-7.5 should be automated only after the expected behavior is confirmed in https://github.com/openconfig/public/issues/981","text":"<ul> <li>Continue with the same configuration as RT-7.4. However, do not attach any non-default OR default import/export policies to the IBGP peer at the peer-group or neighbor levels. This is true for both IPv4-unicast and IPv6-unicast AFI-SAFI.</li> <li>Ensure that only the ACCEPT-ALL IMPORT/EXPORT default-policy with default action of ACCEPT_ROUTE is appled to the EBGP peer on both IPv4-unicast and IPv6-unicast AFI-SAFI</li> <li>Following test expectations. If expectations not met, the test should fail.<ul> <li>DUT:Port1 should accept import of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>DUT:Port1 should accept export of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should accept import of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should allow export of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>IS-IS and static routes shouldn't be advertised to the EBGP and IBGP peers.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#rt-76-no-policy-including-the-default-policy-is-attached-either-at-the-peer-group-or-at-the-neighbor-level-for-both-ebgp-and-ibgp-peers","title":"RT-7.6 : No policy, including the default-policy is attached either at the Peer-group or at the neighbor level for both EBGP and IBGP peers","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#todo-rt-76-should-be-automated-only-after-the-expected-behavior-is-confirmed-in-httpsgithubcomopenconfigpublicissues981","title":"TODO: RT-7.6 should be automated only after the expected behavior is confirmed in https://github.com/openconfig/public/issues/981","text":"<ul> <li>Continue with the same configuration as RT-7.5. However, do not attach any non-default OR default import/export policies to the IBGP and EBGP peers at the peer-group or neighbor levels. This is true for both IPv4-unicast and IPv6-unicast AFI-SAFI.</li> <li>Following test expectations. If expectations not met, the test should fail.<ul> <li>DUT:Port1 should reject import of IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3</li> <li>DUT:Port1 should reject export of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 should accept import of IPv4-prefix4, IPv4-prefix5, IPv4-prefix6, IPv6-prefix4, IPv6-prefix5 and IPv6-prefix6</li> <li>DUT:Port2 wouldn't export routes to IPv4-prefix1, IPv4-prefix2, IPv4-prefix3, IPv6-prefix1, IPv6-prefix2 and IPv6-prefix3 since they are missing from the DUT's forwarding table.</li> <li>IS-IS and static routes shouldn't be advertised to the EBGP and IBGP peers.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li> <p>Defined Sets</p> <ul> <li>/routing-policy/defined-sets/prefix-sets/prefix-set/</li> <li>/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix</li> <li>/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range/exact</li> </ul> </li> <li> <p>Policy-Definition</p> <ul> <li>/routing-policy/policy-definitions/policy-definition/config/name</li> <li>/routing-policy/policy-definitions/policy-definition/statements/statement/config/name</li> <li>/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set</li> <li>/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options</li> <li>/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result/ACCEPT_ROUTE</li> <li>/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result/REJECT_ROUTE</li> </ul> </li> <li> <p>Path to Neighbor or Peer-Group level</p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/peer-group/</li> </ul> </li> <li> <p>Apply Policy at Neighbor or Peer-Group level</p> <ul> <li>afi-safis/afi-safi/apply-policy/config/import-policy</li> <li>afi-safis/afi-safi/apply-policy/config/export-policy</li> <li>afi-safis/afi-safi/apply-policy/config/default-import-policy/ACCEPT-ALL</li> <li>afi-safis/afi-safi/apply-policy/config/default-export-policy/ACCEPT-ALL</li> <li>afi-safis/afi-safi/apply-policy/config/default-import-policy/REJECT-ALL</li> <li>afi-safis/afi-safi/apply-policy/config/default-export-policy/REJECT-ALL</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/default_policies_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li> <p>Path to Neighbor or Peer-Group level:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group</li> </ul> </li> <li> <p>Paths under Neighbor and Peer-Group level:</p> <ul> <li>afi-safis/afi-safi/apply-policy/state/export-policy</li> <li>afi-safis/afi-safi/apply-policy/state/import-policy</li> <li>afi-safis/afi-safi/state/prefixes/installed</li> <li>afi-safis/afi-safi/state/prefixes/received</li> <li>afi-safis/afi-safi/state/prefixes/received-pre-policy</li> <li>afi-safis/afi-safi/state/prefixes/sent</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/route_installation_test/","title":"RT-1.2: BGP Policy &amp; Route Installation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/route_installation_test/#summary","title":"Summary","text":"<p>Base BGP policy configuration and route installation.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/route_installation_test/#procedure","title":"Procedure","text":"<ul> <li>Establish eBGP sessions between:<ul> <li>ATE port-1 and DUT port-1</li> </ul> </li> <li>For IPv4 and IPv6 routes:<ul> <li>Advertise IPv4 prefixes over IPv4 neighbor from ATE port-1, observe received prefixes at ATE port-2.</li> <li>Similarly advertise IPv6 prefixes over IPv6 neighbor from ATE port-1, observe received prefixes at ATE port-2.</li> <li>Specify table based policy configuration under peer-group AFI to cover<ul> <li>Default accept for policies.</li> <li>Default deny for policies.</li> <li>Explicitly specifying local preference.</li> <li>TODO: Explicitly specifying MED value.</li> <li>Explicitly prepending AS for advertisement with a specified AS     number.</li> </ul> </li> <li>Validate that traffic can be forwarded to all installed routes     between ATE port-1 and ATE port-2, validate that flows between all     denied routes cannot be forwarded.</li> <li>Validate that traffic is not forwarded to withdrawn routes between ATE     port-1 and ATE port-2.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/route_installation_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/routing-policy/policy-definitions/policy-definition/config/name</li> <li>/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref</li> <li>/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med</li> <li>/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/policybase/otg_tests/route_installation_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<p>For prefixes:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group</li> </ul> <p>Paths:</p> <ul> <li>afi-safis/afi-safi/apply-policy/state/export-policy</li> <li>afi-safis/afi-safi/apply-policy/state/import-policy</li> <li>afi-safis/afi-safi/state/prefixes/installed</li> <li>afi-safis/afi-safi/state/prefixes/received</li> <li>afi-safis/afi-safi/state/prefixes/received-pre-policy</li> <li>afi-safis/afi-safi/state/prefixes/sent</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/ate_tests/bgp_prefix_limit_test/","title":"RT-1.5: BGP Prefix Limit","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/ate_tests/bgp_prefix_limit_test/#summary","title":"Summary","text":"<p>BGP Prefix Limit</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/ate_tests/bgp_prefix_limit_test/#procedure","title":"Procedure","text":"<ul> <li>Configure eBGP session between ATE port-1 and DUT port-1,with an Accept-route all import-policy/export-policy under the neighbor AFI/SAFI.</li> <li>With maximum prefix limits of unlimited, and N.<ul> <li>Advertise prefixes of <code>limit - 1</code>, <code>limit</code>, <code>limit + 1</code>. Validate     session state meets expected value at ATE.</li> <li>Ensure that DUT marks session as prefix-limit exceeded for limit+1     prefixes.</li> </ul> </li> <li>Advertise prefixes to exceed configured limit, and to <code>limit - 1</code> following     session teardown, ensure session is re-established per the restart timer     (with ATE session marked as passive).</li> <li>With maximum-prefix warning-only configured, ensure that the routes that     were sent prior to the max-prefix being exceeded are retained in the routing     table by forwarding traffic to <code>prefix{0..n-1}</code> and <code>prefix{n}</code> where n is     the maximum prefix limit configured.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/ate_tests/bgp_prefix_limit_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>For prefixes:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor</li> </ul> <p>Parameters:</p> <ul> <li>afi-safis/afi-safi/ipv4-unicast/prefix-limit/config/max-prefixes</li> <li>afi-safis/afi-safi/ipv4-unicast/prefix-limit/config/restart-timer</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/ate_tests/bgp_prefix_limit_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>TODO: afi-safis/afi-safi/ipv[46]-unicast/prefix-limit/state/restart-timer</li> <li>TODO:     afi-safis/afi-safi/ipv[46]-unicast/prefix-limit/state/warning-threshold-pct</li> <li>TODO:     afi-safis/afi-safi/ipv[46]-unicast/prefix-limit/state/max-prefix-limit</li> <li>TODO:     afi-safis/afi-safi/ipv[46]-unicast/prefix-limit/state/prefix-limit-exceeded</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/ate_tests/bgp_prefix_limit_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/ate_tests/bgp_prefix_limit_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/otg_tests/bgp_prefix_limit_test/","title":"RT-1.5: BGP Prefix Limit","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/otg_tests/bgp_prefix_limit_test/#summary","title":"Summary","text":"<p>BGP Prefix Limit</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/otg_tests/bgp_prefix_limit_test/#procedure","title":"Procedure","text":"<ul> <li>Configure eBGP session between ATE port-1 and DUT port-1,with an Accept-route all import-policy/export-policy under the neighbor AFI/SAFI.</li> <li>With maximum prefix limits of unlimited, and N.<ul> <li>Advertise prefixes of <code>limit - 1</code>, <code>limit</code>, <code>limit + 1</code>. Validate     session state meets expected value at ATE.</li> <li>Ensure that DUT marks session as prefix-limit exceeded for limit+1     prefixes.</li> </ul> </li> <li>Advertise prefixes to exceed configured limit, and to <code>limit - 1</code> following     session teardown, ensure session is re-established per the restart timer     (with ATE session marked as passive).</li> <li>With maximum-prefix warning-only configured, ensure that the routes that     were sent prior to the max-prefix being exceeded are retained in the routing     table by forwarding traffic to <code>prefix{0..n-1}</code> and <code>prefix{n}</code> where n is     the maximum prefix limit configured.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/otg_tests/bgp_prefix_limit_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>For prefixes:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor</li> </ul> <p>Parameters:</p> <ul> <li>afi-safis/afi-safi/ipv4-unicast/prefix-limit/config/max-prefixes</li> <li>afi-safis/afi-safi/ipv4-unicast/prefix-limit/config/restart-timer</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/otg_tests/bgp_prefix_limit_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>TODO: afi-safis/afi-safi/ipv[46]-unicast/prefix-limit/state/restart-timer</li> <li>TODO:     afi-safis/afi-safi/ipv[46]-unicast/prefix-limit/state/warning-threshold-pct</li> <li>TODO:     afi-safis/afi-safi/ipv[46]-unicast/prefix-limit/state/max-prefix-limit</li> <li>TODO:     afi-safis/afi-safi/ipv[46]-unicast/prefix-limit/state/prefix-limit-exceeded</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/otg_tests/bgp_prefix_limit_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/prefixlimit/otg_tests/bgp_prefix_limit_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/routereflector/","title":"RT-1.8: BGP Route Reflector Test at scale","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/routereflector/#summary","title":"Summary","text":"<ul> <li>BGP route reflector capabilities check</li> <li>Ensure functionality of different OC paths for \"supported-capabilities\", \"BGP peer-type\", \"BGP Neighbor details\" and \"BGP transport session parameters\"</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/routereflector/#topology","title":"Topology","text":"<p>ATE (Port1) &lt;-EBGP-&gt; (Port1) DUT (Port2) &lt;-IS-IS/IBGP-&gt; (Port2) ATE, DUT (Port3) &lt;-IS-IS/IBGP-&gt; (Port3) ATE Connect ATE Port1 to DUT port1 (EBGP peering) *   Connect ATE Port2 to DUT port2 (For IS-IS adjacency and IBGP peer reachaility) *   Connect ATE Port3 to DUT port3 (For IS-IS adjacency and IBGP peer reachaility)</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/routereflector/#test-procedure","title":"Test Procedure","text":"<ul> <li>Establish IS-IS adjacency between ATE Port2 &lt;-&gt; DUT Port2, ATE Port3 &lt;-&gt; DUT Port3.</li> <li>Establish BGP sessions as follows between ATE and DUT.</li> <li>ATE port2 and ATE port3 are emulating RR clients peered with the DUT acting as the RR server. DUT's loopback address should be used  for the IBGP peering and \"transport/config/local-address\" OC path should be used on DUT to configure BGP transport address for IBGP peering. ATE addresses used for the IBGP peering (different from ATE Port1 and ATE Port2 addreses) and DUT loopback addresses should be reachable via IS-IS. Each of the ATEs should advertise 5M IPv4 and 2M IPv6 prefixes to the RR over the IBGP peering, with different path attributes like protocol next-hops, local-preference, communitiy and MED. Among these, 2M v4 and 1M v6 prefixes are unique. Among the 2M IPv4 prefixes as well, 1.5M are non RFC1918 or RFC6598 addresses and represent Internet prefixes. Similarly, 600k IPv6 prefixes will represent internet prefixes. These prefixes should be common between the 2xDUTs with different path-attributes for protocol next-hop, AS-Path and community. Balance 500k IPv4 and 400k IPv6 prefixes represent internal subnets and should include some prefixes that are unique to each of the ATEs. Remaining prefixes in the mix need to be common between the 2xATEs and should have identical path attributes except for the protocol next-hops.</li> <li>The DUT Port1 has eBGP peering with ATE Port 1 and is receiving 10M IPv4 and 3M IPv6 Internet routes with different path attributes like protocol next-hops, AS-Path, Origin, MED and communities. Out of these, only 1.5M IPv4 and 600k IPv6 prefixes are unique and will be programmed to the FIB.<ul> <li>The 1.5M IPv4 and 600k IPv6 unique prefixes representing internet addresses should be the same as the ones learnt by the DUT over the IBGP peering but with different path attributes like protocol Next-hops, communities etc.</li> <li>The DUT should automatically determine the BGP transport source address based on the nearest interface. Hence, the OC path \"transport/config/local-address\" shouldnt be used.</li> <li>The DUT should advertise these EBGP learnt prefixes over the 2xIBGP peering. [] Expectations are that the DUT will prefer EBGP learnt internet routes over the IBGP learnt routes. For the IBGP learnt internal prefixes, the DUT should advertise the same over the EBGP peering. [*] Expectations are that the DUT would advertise all internal IPv4 and IPv6 prefixes to the EBGP peers. </li> </ul> </li> <li>Validate session state on ATE ports and DUT using telemetry.<ul> <li>The check should also include accurately receiving values for the path \"transport/state/local-address\" for RRCs as well as for the EBGP peering.</li> <li>Validate accuracy of the peer-type leaf (neighbor/config/peer-type) for EBGP and IBGP peering.</li> </ul> </li> <li>Validate session state and capabilities received on DUT using telemetry.<ul> <li>For capabilities, just make sure that the length of the list \"neighbor/state/supported-capabilities\" is non-zero</li> </ul> </li> <li>Validate route receipt.<ul> <li>Ensure that the DUT advertises all the IBGP learnt routes to the EBGP peer. Pass expectation covered in context in [**] above</li> <li>Ensure that the DUT advertises all the EBGP learnt routes to the IBGP peers. Pass expectation covered in context in [*] above</li> <li>Ensure that the DUT as RR server advertises routes learnt from each of the RRC to the other.</li> </ul> </li> <li>Validate BGP route/path attributes below for each of the EBGP and IBGP learnt routes<ul> <li>Next-Hop</li> <li>Local Pref</li> <li>Communities</li> <li>AS-Path</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/routereflector/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-client</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/peer-type</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/transport/config/local-address</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/routereflector/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-client</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/peer-type</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/supported-capabilities</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/tests/local_bgp_test/","title":"RT-1.7: Local BGP Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/tests/local_bgp_test/#summary","title":"Summary","text":"<p>The local_bgp_test brings up two OpenConfig controlled devices and tests that for an eBGP session </p> <ul> <li>Established between them.</li> <li>Disconnected between them.</li> <li>Verify BGP neighbor parameters</li> </ul> <p>Enable an Accept-route all import-policy/export-policy for eBGP session under the neighbor AFI/SAFI.</p> <p>This test is suitable for running in a KNE environment.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/tests/local_bgp_test/#parameter-coverage","title":"Parameter Coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/global/config/as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/global/config/router-id</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/auth-password</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/local-as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/neighbor-address</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/peer-as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/neighbor-address</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/received/last-notification-error-code</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/session-state</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/supported-capabilities</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/hold-time</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/keepalive-interval</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/timers/otg_tests/bgp_keepalive_and_holdtimer_configuration_test/","title":"RT-1.10: BGP Keepalive and HoldTimer Configuration Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/timers/otg_tests/bgp_keepalive_and_holdtimer_configuration_test/#summary","title":"Summary","text":"<p>BGP Keepalive and HoldTimer Configuration Test</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/timers/otg_tests/bgp_keepalive_and_holdtimer_configuration_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Establish eBGP sessions as follows between ATE and DUT</p> <ul> <li>The DUT has eBGP peering with ATE port 1 and ATE port 2.</li> <li>Enable an Accept-route all import-policy/export-policy under the neighbor AFI/SAFI.</li> <li>The first pair is called the \"source\" pair, and the second the \"destination\" pair</li> </ul> </li> <li> <p>Validate BGP session state on DUT using telemetry.</p> </li> <li>Modify BGP timer values on iBGP peers to 10/30 and on the eBGP peering to 5/15.</li> <li>Verify that the sessions are established after soft reset.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/timers/otg_tests/bgp_keepalive_and_holdtimer_configuration_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/keepalive-interval</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/config/hold-time</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/timers/otg_tests/bgp_keepalive_and_holdtimer_configuration_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/keepalive-interval</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/timers/state/hold-time</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/timers/otg_tests/bgp_keepalive_and_holdtimer_configuration_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/bgp/timers/otg_tests/bgp_keepalive_and_holdtimer_configuration_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/example/tests/topology_test/","title":"example-0.1: Topology Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/example/tests/topology_test/#summary","title":"Summary","text":"<p>Tests that ports an be successfully configured in a basic topology.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/example/tests/topology_test/#procedure","title":"Procedure","text":"<ul> <li>Configure the ports on the DUT.</li> <li>Check that each port on the DUT has /config telemetry.</li> <li>Check that each port on the DUT has /state telemetry.</li> <li>Configure the ports on the ATE.</li> <li>Start control plane protocols on the ATE.</li> <li>Check that the link state on each DUT port is UP.</li> <li>Check that the link state on each ATE port is UP.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/example/tests/topology_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No configuration coverage.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/example/tests/topology_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/interfaces/interface/config</li> <li>/interfaces/interface/state</li> <li>/interfaces/interface/state/oper-status</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/example/tests/topology_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/example/tests/topology_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/ate_only/","title":"Index","text":"<p>cd ~/featureprofiles/feature/experimental/ate_only Change ateb2b.binding to match your environment as the test will assume they are b2b connected go test -v ateb2b_test.go -binding ateb2b.binding -testbed ateb2b.testbed</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/backup_nhg/otg_tests/backup_nhg_test/","title":"TE-11.1: Backup NHG: Single NH","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/backup_nhg/otg_tests/backup_nhg_test/#summary","title":"Summary","text":"<p>Ensure that backup NextHopGroup entries are honoured in gRIBI for NHGs containing a single NH.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/backup_nhg/otg_tests/backup_nhg_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2, and ATE port-3     to DUT port-3.</li> <li>Create a non-default <code>VRF-B</code> that contains no interfaces.</li> <li>Connect gRIBI client to DUT with persistence <code>PRESERVE</code>, redundancy     <code>SINGLE_PRIMARY</code>, with election ID 1.</li> <li> <p>Install the following gRIBI structure: (if not specifically mentioned, the     objects are installed in the DEFAULT VRF)</p> </li> <li> <p>NHG#1 --&gt; NH#1 {next-hop: ATEPort2IP}</p> </li> <li>NHG#2 --&gt; NH#2 {next-hop: ATEPort3IP}</li> <li>192.0.2.254/32 --&gt; NHG#1</li> <li>NHG#100 --&gt; NH#100 {network-instance:VRF-B}</li> <li>NHG#101 --&gt; [NH#101 {next-hop: 192.0.2.254}, backupNHG: NHG#100]</li> <li>198.51.100.0/32 {DEFAULT} --&gt; NHG#101</li> <li>198.51.100.0/32 {VRF-B} --&gt; NHG#2</li> <li>Validate:<ul> <li>AFT telemetry shows the installed NHGs and NHs.</li> <li>Traffic is forwarded to ATE port-2 from ATE port-1.</li> </ul> </li> <li>For each of the following cases, ensure that traffic switches to being     forwarded to ATE port-3:<ul> <li>Interface ATE port-2 is disabled.</li> <li>Interface DUT port-2 is disabled.</li> </ul> </li> <li>Remove the entry for 192.0.2.254/32.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/backup_nhg/otg_tests/backup_nhg_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No new configuration covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/backup_nhg/otg_tests/backup_nhg_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/backup_nhg/otg_tests/backup_nhg_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI<ul> <li>Modify<ul> <li>ModifyRequest<ul> <li>NextHopGroup<ul> <li>backup_nexthop_group</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/backup_nhg/otg_tests/backup_nhg_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/base_bgp_session_parameters/","title":"RT-1.1: Base BGP Session Parameters","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/base_bgp_session_parameters/#summary","title":"Summary","text":"<p>BGP session establishment between DUT - ATE and verifiying different session parameters.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/base_bgp_session_parameters/#topology","title":"Topology","text":"<pre><code>DUT port-1 -------- ATE port-1\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/base_bgp_session_parameters/#procedure","title":"Procedure","text":"<p>Test the abnormal termination of session using notification message:</p> <ul> <li> <p>Establish BGP session between DUT (AS 65540) and ATE (AS 65550). The DUT/ATE     peers should be configured with MD5 authentication using the same password.</p> <ul> <li>Ensure session state should be <code>ESTABLISHED</code>.</li> <li>Verify BGP capabilities: route refresh, ASN32 and MPBGP.</li> </ul> </li> <li> <p>Verify BGP session disconnect by sending notification message from ATE.</p> <ul> <li>Send <code>CEASE</code> notification from ATE.</li> <li>Ensure that DUT telemetry correctly reports the error code.</li> </ul> </li> </ul> <p>Test md5 password authentication on session establishment:</p> <ul> <li> <p>Configure matching passwords on DUT and ATE. Verify that BGP adjacency succeeds.</p> </li> <li> <p>Configure mismatched passwords on DUT and ATE. Verify that BGP adjacency fails.</p> </li> </ul> <p>Test the normal session establishment and termination:</p> <ul> <li> <p>Establish BGP session for the following cases:</p> <ul> <li>eBGP using DUT AS 65540 and ATE AS 65550.<ul> <li>Specifies global AS 65540 on the DUT.</li> <li>Specifies global AS 65536 and neighbor AS 65540 on the DUT.     Verify that ATE sees peer AS 65540.</li> </ul> </li> <li>iBGP using DUT AS 65536 and ATE AS 65536.<ul> <li>Specifies global AS 65536 on the DUT.</li> <li>Specifies both global and neighbor AS 65536 on the DUT.</li> </ul> </li> </ul> <p>And include the following session parameters for all cases:</p> <ul> <li>Explicitly specified Router ID.</li> <li>Explicit holdtime interval and keepalive interval.</li> <li>Explicit connect retry interval.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/base_bgp_session_parameters/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/global</li> </ul> </li> <li> <p>For Parameters:</p> <ul> <li>config/as</li> <li>config/router-id</li> <li>config/peer-as</li> <li>config/local-as</li> <li>config/description</li> <li>timers/config/hold-time</li> <li>timers/config/keepalive-interval</li> <li>timers/config/minimum-route-advertisement-interval</li> </ul> </li> <li> <p>For prefixes:    </p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/base_bgp_session_parameters/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/bgp/</li> </ul> </li> <li> <p>For Parameters:</p> <ul> <li>state/last-established</li> <li>state/messages/received/NOTIFICATION</li> <li>state/negotiated-hold-time</li> <li>state/supported-capabilities</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/base_bgp_session_parameters/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li> <p>BGP</p> <ul> <li> <p>OPEN</p> <ul> <li>Version</li> <li>My Autonomous System</li> <li>BGP Identifier</li> <li>Hold Time</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn/","title":"RT-1.19: BGP 2-Byte and 4-Byte ASN support","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn/#summary","title":"Summary","text":"<p>BGP 2-Byte and 4-Byte ASN support</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn/#procedure","title":"Procedure","text":"<ul> <li>Establish BGP sessions as follows and verify all the sessions are established<ul> <li>ATE (2-byte) - DUT (4-byte) - eBGP IPv4 with ASN &lt; 65535 on DUT side</li> <li>ATE (2-byte) - DUT (4-byte) - eBGP IPv6 with ASN &lt; 65535 on DUT side</li> <li>ATE (4-byte) - DUT (4-byte) - eBGP IPv4</li> <li>ATE (4-byte) - DUT (4-byte) - eBGP IPv6</li> <li>ATE (2-byte) - DUT (4-byte) - iBGP IPv4 with ASN &lt; 65535 on DUT side</li> <li>ATE (4-byte) - DUT (4-byte) - iBGP IPv6 with ASN &lt; 65535 on DUT side</li> <li>ATE (4-byte) - DUT (4-byte) - iBGP IPv4</li> <li>ATE (4-byte) - DUT (4-byte) - iBGP IPv6</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/global/config/as</li> <li>/neighbors/neighbor/config/peer-as</li> <li>/neighbors/neighbor/config/local-as</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/global/config/as</li> <li>/neighbors/neighbor/config/peer-as</li> <li>/neighbors/neighbor/config/local-as</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn_policy_test/","title":"RT-1.24: BGP 2-Byte and 4-Byte ASN support with policy","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn_policy_test/#summary","title":"Summary","text":"<p>BGP 2-Byte and 4-Byte ASN support with policy</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn_policy_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Establish BGP sessions as follows and verify all the sessions are established:</p> <ul> <li>ATE (2-byte) - DUT (4-byte) - eBGP IPv4 with ASN &lt; 65535 on DUT side</li> <li>ATE (2-byte) - DUT (4-byte) - eBGP IPv6 with ASN &lt; 65535 on DUT side</li> <li>ATE (4-byte) - DUT (4-byte) - eBGP IPv4</li> <li>ATE (4-byte) - DUT (4-byte) - eBGP IPv6</li> <li>ATE (2-byte) - DUT (4-byte) - iBGP IPv4 with ASN &lt; 65535 on DUT side</li> <li>ATE (4-byte) - DUT (4-byte) - iBGP IPv6 with ASN &lt; 65535 on DUT side</li> <li>ATE (4-byte) - DUT (4-byte) - iBGP IPv4</li> <li>ATE (4-byte) - DUT (4-byte) - iBGP IPv6</li> </ul> </li> <li> <p>Configure below policies and verify prefix count:</p> <ul> <li>Policy to reject prefix with prefix filter</li> <li>Policy to reject prefix with community filter</li> <li>Policy to reject prefix with regex filter to match as-path</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn_policy_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/global/config/as</li> <li>/neighbors/neighbor/config/peer-as</li> <li>/neighbors/neighbor/config/local-as</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_2byte_4byte_asn_policy_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/global/config/as</li> <li>/neighbors/neighbor/config/peer-as</li> <li>/neighbors/neighbor/config/local-as</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_always_compare_med/","title":"RT-1.12: BGP always compare MED","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_always_compare_med/#summary","title":"Summary","text":"<p>BGP always compare MED </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_always_compare_med/#procedure","title":"Procedure","text":"<ul> <li>Establish BGP sessions as follows between ATE and DUT.<ul> <li>ATE emulates three eBGP neighbors peering the DUT.<ul> <li>DUT Port1 (AS 65501) ---iBGP 1--- ATE Port1 (AS 65501)</li> <li>DUT Port2 (AS 65501) ---eBGP 1--- ATE Port2 (AS 65502)</li> <li>DUT Port3 (AS 65501) ---eBGP 2--- ATE Port3 (AS 65503)</li> </ul> </li> </ul> </li> <li>Associate eBGP neighbors #1 and #2 with MED values of 100 and 50 on the advertised routes.</li> <li>Enable \u201calways-compare-med\u201d knob on the DUT.</li> <li>Validate traffic flowing to the prefixes received from eBGP neighbor #2 from DUT (ATE Port3).</li> <li>Disable MED settings on DUT and ATE ports. </li> <li>Validate the change of traffic flow because of the change (ATE Port2).</li> <li>Validate session state and capabilities received on DUT using telemetry.     </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_always_compare_med/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/route-selection-options/config/always-compare-med </li> <li>/global/afi-safis/afi-safi/route-selection-options/config/always-compare-med </li> <li>/global/route-selection-options/config/always-compare-med </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_always_compare_med/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/global/afi-safis/afi-safi/route-selection-options/state/always-compare-med </li> <li>/global/route-selection-options/state/always-compare-med </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_always_compare_med/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_always_compare_med/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_long_lived_graceful_restart/","title":"RT-1.14: BGP Long-Lived Graceful Restart","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_long_lived_graceful_restart/#summary","title":"Summary","text":"<p>BGP Long-Lived Graceful Restart</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_long_lived_graceful_restart/#procedure","title":"Procedure","text":"<ul> <li>Establish BGP sessions as follows between ATE and DUT<ul> <li>ATE  Port-1  --------  DUT  Port-1. </li> <li>DUT  Port-2  --------  ATE  Port-2.</li> </ul> </li> <li>Validate received capabilities at DUT and ATE reflect support for graceful restart at the default      timer values.</li> <li>For IPv4 and IPv6 routes:<ul> <li>Advertise prefixes from ATE to DUT. </li> <li>Trigger DUT session restart by disconnecting TCP session between DUT - ATE Port2 and determine that:<ul> <li>Forwarded traffic between between ATE port-1 and DUT port-1 for the duration of the     specified stale routes time (default), during the stale state traffic shouldnt be impacted.\u00a0</li> <li>Dropped after the stale routes timer has expired.</li> <li>Forwarded again between ATE port-1 and DUT port-1 after the session is re-established. </li> </ul> </li> <li>Enable Long-Lived Graceful Restart on a per-bgp neighbor basis on DUT.      Specify the LLGR timer to be configured to be 600 seconds. Trigger DUT session restart.  <ul> <li>Ensure that the stale prefixes are not withdrawn until the end of the LLGR timer value.\u00a0</li> <li>Ensure that prefixes are withdrawn, and traffic cannot be forwarded between ATE port-1      and port-2 after the LLGR timer expiry. </li> </ul> </li> <li>Induce<ul> <li>Import policy changes </li> <li>Export policy changes </li> <li>Add 5 more BGP peers </li> <li>Remove 5 more BGP peers(block the BGP using filter) </li> <li>Routing Process restart </li> </ul> </li> <li>During above mentioned changes, LLGR shouldn't be impacted and persist during/after the      changes.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_long_lived_graceful_restart/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/global/graceful-restart</li> <li>/global/graceful-restart/config </li> <li>/global/graceful-restart/config/enabled </li> <li>/global/graceful-restart/config/restart-time </li> <li>/global/graceful-restart/config/stale-routes-time </li> <li>/global/graceful-restart/config/helper-only </li> <li>/global/afi-safis/afi-safi/graceful-restart </li> <li>/global/afi-safis/afi-safi/graceful-restart/config </li> <li>/global/afi-safis/afi-safi/graceful-restart/config/enabled </li> <li>/neighbors/neighbor/graceful-restart </li> <li>/neighbors/neighbor/graceful-restart/config </li> <li>/neighbors/neighbor/graceful-restart/config/enabled </li> <li>/neighbors/neighbor/graceful-restart/config/restart-time </li> <li>/neighbors/neighbor/graceful-restart/config/stale-routes-time </li> <li>/neighbors/neighbor/graceful-restart/config/helper-only </li> <li>/neighbors/neighbor/afi-safis/afi-safi/graceful-restart </li> <li>/neighbors/neighbor/afi-safis/afi-safi/graceful-restart/config </li> <li>/neighbors/neighbor/afi-safis/afi-safi/graceful-restart/config/enabled </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_long_lived_graceful_restart/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/global/graceful-restart/state </li> <li>/global/graceful-restart/state/enabled </li> <li>/global/graceful-restart/state/restart-time </li> <li>/global/graceful-restart/state/stale-routes-time </li> <li>/global/graceful-restart/state/helper-only </li> <li>/global/afi-safis/afi-safi/graceful-restart/state </li> <li>/global/afi-safis/afi-safi/graceful-restart/state/enabled </li> <li>/neighbors/neighbor/graceful-restart/state </li> <li>/neighbors/neighbor/graceful-restart/state/enabled </li> <li>/neighbors/neighbor/graceful-restart/state/restart-time </li> <li>/neighbors/neighbor/graceful-restart/state/stale-routes-time </li> <li>/neighbors/neighbor/graceful-restart/state/helper-only </li> <li>/neighbors/neighbor/graceful-restart/state/peer-restart-time </li> <li>/neighbors/neighbor/graceful-restart/state/peer-restarting </li> <li>/neighbors/neighbor/graceful-restart/state/local-restarting </li> <li>/neighbors/neighbor/graceful-restart/state/mode </li> <li>/neighbors/neighbor/afi-safis/afi-safi/graceful-restart/state </li> <li>/neighbors/neighbor/afi-safis/afi-safi/graceful-restart/state/enabled </li> <li>/neighbors/neighbor/afi-safis/afi-safi/graceful-restart/state/received </li> <li>/neighbors/neighbor/afi-safis/afi-safi/graceful-restart/state/advertised </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_long_lived_graceful_restart/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_long_lived_graceful_restart/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_remove_private_as/","title":"RT-1.11: BGP remove private AS","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_remove_private_as/#summary","title":"Summary","text":"<p>BGP remove private AS</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_remove_private_as/#procedure","title":"Procedure","text":"<ul> <li>Establish BGP sessions as follows between ATE and DUT.<ul> <li>ATE emulates two eBGP neighbors peering with the DUT using public AS numbers.<ul> <li>DUT Port1 (AS 500) ---eBGP--- ATE Port1 (AS 100)</li> <li>DUT Port2 (AS 500) ---eBGP--- ATE Port2 (AS 200)</li> </ul> </li> <li>Inject routes with AS_PATH modified to have private AS number 65501 from eBGP neighbor #1      (ATE Port1).</li> <li>Validate received routes on ATE Port2 should have AS Path \"500 100 65501\".</li> <li>Configure \"remove private AS\" with type PRIVATE_AS_REMOVE_ALL  on DUT.    </li> <li>Validate that private AS numbers are stripped before advertisement to the eBGP peer ATE Port2.</li> <li>AS path for received routes on ATE Port2 should be \"500 100\".   </li> <li>TODO: different patterns of private AS should be tested.<ul> <li>AS Path SEQ - 65501, 65507, 65554</li> <li>AS Path SEQ - 65501, 600</li> <li>AS Path SEQ - 800, 65501, 600     ## TODO : https://github.com/openconfig/featureprofiles/issues/1659     ## SET mode is not working in ATE. </li> <li>AS Path SET - 800, 65505, 600 </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_remove_private_as/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/remove-private-as</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_remove_private_as/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/as4-path/as4-segment/state</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_remove_private_as/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/ate_tests/bgp_remove_private_as/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_afi_safi_defaults/","title":"RT-1.23: BGP AFI SAFI OC DEFAULTS","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_afi_safi_defaults/#summary","title":"Summary","text":"<p>BGP AFI SAFI OC DEFAULTS TEST</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_afi_safi_defaults/#procedure","title":"Procedure","text":"<ul> <li>When operating in \"openconfig mode\", NOS (network operating system) defaults should match what OC      defines as the defaults i.e,</li> <li>For BGP, there are no defaults for AFI-SAFI at the neighbor and peer-group levels. However at the     global level the default is \"false\"</li> <li>This test currently only verifies the defaults for ipv4-unicast and ipv6-unicast families.         However, this test can be extended further to cover for other AFI-SAFIs as well in future. </li> <li> <p>The test will check for default implementations under the neighbor and peer-group hierarchies and      also test for inheritance rules as was specified in pull/774 and pull/815.</p> </li> <li> <p>Topology:</p> <ul> <li>ATE (Port1) &lt;-EBGP-&gt; (Port1) DUT (Port2) &lt;-IBGP-&gt; (Port2) ATE<ul> <li>Connect ATE Port1 to DUT port1 (EBGP peering)</li> <li>Connect ATE Port2 to DUT port2 (IBGP peering)</li> </ul> </li> </ul> </li> <li> <p>[Test case-1] AFI-SAFI configurations at \"neighbor level\":</p> <ul> <li> <p>Push EBGP and IBGP OC configuration to the DUT </p> <ul> <li>Configuration should include corresponding IPv4 and IPv6 neighbor configurations.</li> <li>Ensure that only IPv4-Unicast enabled boolean is made \"true\" for IPv4 neighbor.       \"IPv6-unicast enabled\" boolean is left to OC default for the IPv4 peer\".</li> <li>Ensure that only IPv6-Unicast enabled boolean is made \"true\" for IPv6 neighbor.      \"IPv4-unicast enabled\" boolean is left to OC default for the IPv6 peer\".</li> <li>Ensure that there are no AFI-SAFI configurations at the global and peer-group levels. </li> <li>On the ATE side ensure that IPv4-unicast and IPv6-unicast AFI-SAFI are enabled==true for      IPv4 and IPv6 neighbors.</li> </ul> </li> <li> <p>Verification:</p> <ul> <li>For IPv4 neighbor, ensure that the IPv4 neighborship is up and IPv6-unicast capability is      not negotiated.</li> <li>For IPv6 neighbor ensure that the IPv6 neighborship is up and IPv4-unicast capability is      not negotiated.</li> </ul> </li> </ul> </li> <li> <p>[Test case-2] IPv4-unicast and IPv6-Unicast AFI-SAFIs enabled at peer-group level:</p> <ul> <li>Configuration at the neighbor level is same as in [Test case-1] except for IPv4-unicast and      IPv6-unicast being enabled at the peer-group level</li> <li> <p>No configuration should be made at the global AFI-SAFI level</p> </li> <li> <p>Verification:</p> <ul> <li>For IPv4 neighbor, ensure that the IPv4 neighborship is up and both IPv4-unicast and      IPv6-unicast capabilities are negotiated.</li> <li>For IPv6 neighbor ensure that the IPv6 neighborship is up and both IPv4-unicast and      IPv6-unicast capabilities are negotiated.</li> </ul> </li> </ul> </li> <li> <p>[Test case-3] IPv4-unicast and IPv6-Unicast AFI-SAFIs enabled at Global level:</p> <ul> <li>Configuration at the neighbor level is same as in [Test case-1] except for IPv4-unicast and      IPv6-unicast being enabled at the global level</li> <li> <p>No configuration should be made at the peer-group AFI-SAFI level</p> </li> <li> <p>Verification:</p> <ul> <li>For IPv4 neighbor, ensure that the IPv4 neighborship is up and both IPv4-unicast and      IPv6-unicast capabilities are negotiated.</li> <li>For IPv6 neighbor ensure that the IPv6 neighborship is up and both IPv4-unicast and      IPv6-unicast capabilities are negotiated.  </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_afi_safi_defaults/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/global/config/as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/global/config/router-id</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/auth-password</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/      neighbor-address</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/peer-as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/neighbor-address</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/     config/enabled</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/     auth-password</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/     neighbor-address</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/peer-as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/config/peer-group/     peer-group-name</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/     afi-safi/config/enabled</li> <li>/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi/config/enabled</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_afi_safi_defaults/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/session-state</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/     supported-capabilities</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/peer-type</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/peer-as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/     supported-capabilities</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-type</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/peer-as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/state/local-as</li> <li>/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/peer-group</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_afi_safi_defaults/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_afi_safi_defaults/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_always_compare_med/","title":"RT-1.12: BGP always compare MED","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_always_compare_med/#summary","title":"Summary","text":"<p>BGP always compare MED </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_always_compare_med/#procedure","title":"Procedure","text":"<ul> <li>Establish BGP sessions as follows between OTG and DUT.<ul> <li>OTG emulates three eBGP neighbors peering the DUT.<ul> <li>DUT Port1 (AS 65501) ---iBGP 1--- OTG Port1 (AS 65501)</li> <li>DUT Port2 (AS 65501) ---eBGP 1--- OTG Port2 (AS 65502)</li> <li>DUT Port3 (AS 65501) ---eBGP 2--- OTG Port3 (AS 65503)</li> </ul> </li> </ul> </li> <li>Associate eBGP neighbors #1 and #2 with MED values of 100 and 50 on the advertised routes.</li> <li>Enable \u201calways-compare-med\u201d knob on the DUT.</li> <li>Validate traffic flowing to the prefixes received from eBGP neighbor #2 from DUT (OTG Port3).</li> <li>Disable MED settings on DUT and OTG ports. </li> <li>Validate the change of traffic flow because of the change (OTG Port2).</li> <li>Validate session state and capabilities received on DUT using telemetry.     </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_always_compare_med/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/route-selection-options/config/always-compare-med </li> <li>/global/afi-safis/afi-safi/route-selection-options/config/always-compare-med </li> <li>/global/route-selection-options/config/always-compare-med </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_always_compare_med/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/global/afi-safis/afi-safi/route-selection-options/state/always-compare-med </li> <li>/global/route-selection-options/state/always-compare-med </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_always_compare_med/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_always_compare_med/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_remove_private_as/","title":"RT-1.11: BGP remove private AS","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_remove_private_as/#summary","title":"Summary","text":"<p>BGP remove private AS</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_remove_private_as/#procedure","title":"Procedure","text":"<ul> <li>Establish BGP sessions as follows between ATE and DUT.</li> <li>ATE port 1 emulates two eBGP neighbors peering the DUT.</li> <li>eBGP neighbor # 1 is injecting routes with AS_PATH modified to have private AS numbers.</li> <li>Validate that private AS numbers are stripped before advertisement to the eBGP neighbor on ATE     port 2.</li> <li>Tested AS-Path Patterns:<ul> <li>PRIV_AS1</li> <li>PRIV_AS1 PRIV_AS2</li> <li>AS1 PRIV_AS1 PRIV_AS2</li> <li>PRIV_AS1 AS1</li> <li>AS1 PRIV_AS1 AS2</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_remove_private_as/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/config/remove-private-as</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_remove_private_as/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/as4-path/as4-segment/state</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_remove_private_as/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_remove_private_as/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_tcp_mss_path_mtu/","title":"RT-1.21: BGP TCP MSS and PMTUD","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_tcp_mss_path_mtu/#summary","title":"Summary","text":"<ul> <li>Validate changes in TCP MSS value is allowed and takes effect.</li> <li>Validate DUT's PMTUD compliance.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_tcp_mss_path_mtu/#topology","title":"Topology","text":"<ul> <li>ATE:port1 &lt;-&gt; port1:DUT1:Port2 &lt;-&gt; port1:DUT2</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_tcp_mss_path_mtu/#procedure","title":"Procedure","text":"<ul> <li>Establish BGP sessions as follows:<ul> <li>ATE:port1 --- eBGP-IPv4/IPv6 ---- DUT1:port1.</li> <li>ATE:port1 ---- iBGP IPv4 ---- DUT2:port1.</li> </ul> </li> <li>Verify that the default TCP MSS value is set below the default interface MTU value.</li> <li>Change the Interface MTU on the DUT1:port1 port as well as ATE:port1 to 5040B</li> <li>Configure IP TCP MSS value of 4096 bytes on the DUT1:port1.</li> <li>Re-establish the EBGP sessions by tcp reset.</li> <li>Verify that the TCP MSS value is set to 4096 bytes for the IPv4 and IPv6 EBGP sessions.</li> <li>Establish iBGP session with MD5 enabled between ATE:port1 and DUT2:port1.</li> <li>Ensure that the MTU on the DUT1:port1 towards ATE1:port1 is left at default (1500B) while the ATE1:port1 interface towards DUT1:port1 is set at 5040B. Please also make sure that the DUT2:port1 MTU is set at 5040B as well.</li> <li>Enable PMTUD on DUT2:port1. </li> <li>Re-establish the IBGP sessions by tcp reset.</li> <li>Validate that the min MSS value has been adjusted to be below 1500 bytes on the tcp session.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_tcp_mss_path_mtu/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/neighbors/neighbor/transport/config/tcp-mss </li> <li>/neighbors/neighbor/transport/config/mtu-discovery </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_tcp_mss_path_mtu/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/neighbors/neighbor/transport/state/tcp-mss </li> <li>/neighbors/neighbor/transport/state/mtu-discovery </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_tcp_mss_path_mtu/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/bgp/otg_tests/bgp_tcp_mss_path_mtu/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/","title":"TE-11.3: Backup NHG: Actions","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/#summary","title":"Summary","text":"<p>Validate gRIBI Backup NHG actions.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/#topology","title":"Topology","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2, ATE port-3 to     DUT port-3, and ATE port-4 to DUT port-4.</li> <li>Create a 3 non-default VRF:<ul> <li><code>VRF-A</code> that includes DUT port-1.</li> <li><code>VRF-B</code> that includes no interface.</li> <li><code>VRF-C</code> that includes no interface.</li> </ul> </li> <li><code>OuterDstIP_1</code>, <code>OuterSrcIP_1</code>, <code>OuterDstIP_2</code>, <code>OuterSrcIP_2</code>: IPinIP outer     IP addresses.</li> <li><code>InnerDstIP_1</code>, <code>InnerSrcIP_1</code>: IPinIP inner IP addresses.</li> <li><code>VIP_1</code>, <code>VIP_2</code>: IP addresses used for recursive resolution.</li> <li><code>ATEPort2IP</code>: testbed assigned interface IP to ATE port 2</li> <li><code>ATEPort3IP</code>: testbed assigned interface IP to ATE port 3</li> <li>All the NHG and NH objects injected by gRIBI are in the DEFAULT VRF.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/#setups","title":"Setups","text":"<p>Different test scenarios requires different setups.</p> <ul> <li> <p>Setup#1</p> <ul> <li>Make sure DUT port-2, port-3 and port-4 are up.</li> <li>Make sure there is a static route in the default VRF for <code>InnerDstIP_1</code>,     pointing to ATE port-4.</li> <li>Connect a gRIBI client to DUT with session parameters     <code>{persistence=PRESERVE Redundancy=SINGLE_PRIMARY}</code></li> <li>gRIBI Flush the DUT.</li> <li> <p>Inject the following gRIBI structure to the DTU:</p> <pre><code>VIP_1/32 {DEFAULT VRF} --&gt; NHG#1 --&gt; NH#1 {next-hop: ATEPort2IP}\nNHG#100 --&gt; NH#100 {decap, network-instance:DEFAULT}\nNHG#101 --&gt; [NH#101 {next-hop: VIP1}, backupNHG: NHG#100]\nOuterDstIP_1/32 {VRF-A} --&gt; NHG#101\n</code></pre> </li> </ul> </li> <li> <p>Setup#2</p> <ul> <li>Make sure DUT port-2, port-3 and port-4 are up.</li> <li>Make sure there is a static route in the default VRF for <code>InnerDstIP_1</code>,     pointing to ATE port-4.</li> <li>Connect a gRIBI client to DUT with session parameters     <code>{persistence=PRESERVE Redundancy=SINGLE_PRIMARY}</code></li> <li>gRIBI Flush the DUT.</li> <li> <p>Inject the following gRIBI structure to the DTU:</p> <pre><code>VIP_1/32 {DEFAULT VRF} --&gt; NHG#1 --&gt; NH#1 {next-hop: ATEPort2IP}\nVIP_2/32 {DEFAULT VRF} --&gt; NHG#2 --&gt; NH#2 {next-hop: ATEPort3IP}\n\nNHG#100 --&gt; NH#100 {network-instance:VRF-B}\nNHG#101 --&gt; [NH#101 {next-hop: VIP1}, backupNHG: NHG#100]\nOuterDstIP_1/32 {VRF-A} --&gt; NHG#101\n\nNHG#103 --&gt; NH#103 {decap, network-instance:DEFAULT}\nNHG#102 --&gt; [NH#102 {decap-encap, src:`OuterSrcIP_2`, dst:`OuterDstIP_2`, network-instance: VRF-C}, backupNHG: NHG#103]\nOuterDstIP_1/32 {VRF-B} --&gt; NHG#102\n\nNHG#104 --&gt; [NH#104 {next-hop: VIP-2}, backupNHG: NHG#103]\nOuterDstIP_2/32 {VRF-C} --&gt; NHG#104\n</code></pre> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/#procedure","title":"Procedure","text":"<ul> <li> <p>TEST#1 - (next-hop viability triggers decap in backup NHG):</p> <ol> <li> <p>Deploy Setup#1 as above.</p> </li> <li> <p>Send IPinIP traffic to <code>OuterDstIP_1</code> with inner IP as <code>InnerDstIP_1</code>,     and validate that ATE port-2 receives the IPinIP traffic.</p> </li> <li> <p>Shutdown DUT port-2 interface, and validate that ATE port-4 receives the     decapsulated traffic with <code>InnerDstIP_1</code>.</p> </li> </ol> </li> <li> <p>Test#2 - (tunnel viability triggers decap and encap in the backup NHG):</p> <ul> <li> <p>Deploy Setup#2 as above.</p> </li> <li> <p>Send IPinIP traffic to <code>OuterDstIP_1</code>. Validate that ATE port-2 receives     the IPinIP traffic with outer IP as <code>OuterDstIP_1</code>.</p> </li> <li> <p>Shutdown DUT port-2 interface, and validate that ATE port-3 receives the     IPinIP traffic with outer destination IP as <code>OuterDstIP_2</code>, and outer     source IP as <code>OuterSrcIP_2</code></p> </li> <li> <p>Shutdown DUT port-3 interface, and validate that ATE port-4 receives the     traffic with decapsulated traffic with destination IP as <code>InnerDstIP_1</code>     at ATE port-4.</p> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No new configuration covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/backup_nhg_action/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/dut_daemon_failure/","title":"TE-8.1: DUT Daemon Failure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/dut_daemon_failure/#summary","title":"Summary","text":"<p>Ensure that gRIBI entries are persisted over daemon failure.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/dut_daemon_failure/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</p> </li> <li> <p>Establish a gRIBI client connection to the DUT (SINGLE_PRIMARY and PRESERVE     mode) and make it become leader.</p> <ul> <li>Inject an IPv4Entry for 203.0.113.0/24 pointed to a NHG containing a NH     of ATE port-2. Ensure that traffic with a destination in 203.0.113.0/24     can be forwarded between ATE port-1 and port-2. Verify through AFT     telemetry that the route is installed.</li> </ul> </li> <li> <p>Kill gRIBI daemon on DUT using gNOI test command (gNOI KillProcessRequest).</p> </li> <li> <p>Validate:</p> <ul> <li> <p>Traffic can continue to be forwarded between ATE port-1 and port-2.</p> </li> <li> <p>Through AFT telemetry that the route entries remain present.</p> </li> <li> <p>Following daemon restart, the gRIBI client connection can be     re-established.</p> </li> <li> <p>Issuing a gRIBI Get RPC results in 203.0.113.0/24 being returned.</p> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/dut_daemon_failure/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gRIBI<ul> <li>ModifyRequest</li> <li>GetRequest</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/dut_daemon_failure/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>AFT<ul> <li>/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix/</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/fib_failed_due_to_hw_res_exhaust_test/","title":"TE-9.1: FIB FAILURE DUE TO HARDWARE RESOURCE EXHAUST","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/fib_failed_due_to_hw_res_exhaust_test/#summary","title":"Summary","text":"<p>Validate gRIBI FIB_FAILED functionality.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/fib_failed_due_to_hw_res_exhaust_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</p> </li> <li> <p>Establish a gRIBI connection (SINGLE_PRIMARY and PRESERVE mode) to the DUT.</p> </li> <li> <p>Establish BGP session between ATE Port1 --- DUT Port1. Inject unique BGP routes to exhaust FIB on DUT.</p> </li> <li> <p>Continuously injecting the following gRIB structure until FIB FAILED is received.      Each DstIP and VIP should be unique and of /32. All the NHG and NH should be unique (of unique ID).     DstIP/32 -&gt; NHG -&gt; NH {next-hop:} -&gt; VIP/32 -&gt; NHG -&gt; NH {next-hop: AtePort2Ip}</p> </li> <li> <p>Expect FIB_PROGRAMMED message until the first FIB_FAILED message received.</p> </li> <li> <p>Validate that traffic for the FIB_FAILED route will not get forwarded. </p> </li> <li> <p>Pick any route that received FIB_PROGRAMMED. Validate that traffic hitting the route should be forwarded to port2 </p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/fib_failed_due_to_hw_res_exhaust_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI<ul> <li>Flush</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/fib_failed_due_to_hw_res_exhaust_test/#config-parameter-coverage","title":"Config parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/fib_failed_due_to_hw_res_exhaust_test/#telemery-parameter-coverage","title":"Telemery parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_addition_during_failover_test/","title":"TE-13.1: gRIBI route ADD during Failover","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_addition_during_failover_test/#summary","title":"Summary","text":"<p>Validate gRIBI route persistence during SSO</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_addition_during_failover_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</p> </li> <li> <p>Create 64 L3 sub-interfaces under DUT port-2 and corresponding 64 L3 sub-interfaces on ATE port-2.</p> </li> <li> <p>Establish <code>gRIBI client</code> connection with DUT negotiating <code>FIB_ACK</code> as the requested ack_type.</p> </li> <li> <p>Install 64 L3 sub-interfaces IP to NextHopGroup(NHGID: <code>1</code>) pointing to ATE port-2 as the nexthop.</p> </li> <li> <p>Inject <code>1000</code> IPv4Entries(<code>IPBlock1: 198.18.196.1/22</code>) in default VRF with NHGID: <code>1</code>.</p> </li> <li> <p>Validate that the entries are installed as FIB_PROGRAMMED using Get RPC.</p> </li> <li> <p>Send traffic from ATE port-1 to prefixes in IPBlock1, ensure traffic flows 100% and reaches ATE port-2, stop the traffic.</p> </li> <li> <p>Start injecting another 1000 IPv4Entries(<code>IPBlock2: 198.18.100.1/22</code>) in default VRF with NHGID: #1. </p> </li> <li> <p>Check for gRIBI core dumps in the DUT and validate that none are present.</p> </li> <li> <p>Concurrently, trigger a supervisor switchover using gNOI <code>SwitchControlProcessor</code> while <code>IPBlock2</code> entries are only partially installed.</p> </li> <li> <p>Check for gRIBI core dumps in the DUT and validate that none are present post failover</p> </li> <li> <p>Following reconnection of the gRIBI client to a new master supervisor, validate if partially ACKed entries of <code>IPBlock2</code> are present as FIB_PROGRAMMED using a Get RPC.</p> </li> <li> <p>Re-inject <code>IPBlock2</code> in default VRF with NHGID: #1.</p> </li> <li> <p>Send traffic from ATE port-1 to prefixes in <code>IPBlock1</code>, ensure traffic flows 100% and reaches ATE port-2.</p> </li> <li> <p>Send traffic from ATE port-1 to prefixes in <code>IPBlock2</code> and ensure traffic flows 100% and reaches ATE port-2. </p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_addition_during_failover_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gNOI:<ul> <li>System<ul> <li>SwitchControlProcessor</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_addition_during_failover_test/#config-parameter-coverage","title":"Config parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_addition_during_failover_test/#telemery-parameter-coverage","title":"Telemery parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_removal_during_failover_test/","title":"TE-13.2: gRIBI route DELETE during Failover","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_removal_during_failover_test/#summary","title":"Summary","text":"<p>Validate gRIBI route flush during SSO</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_removal_during_failover_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</p> </li> <li> <p>Create 64 L3 sub-interfaces under DUT port-2 and corresponding 64 L3 sub-interfaces on ATE port-2.</p> </li> <li> <p>Establish <code>gRIBI client</code> connection with DUT negotiating <code>FIB_ACK</code> as the requested ack_type.</p> </li> <li> <p>Install 64 L3 sub-interfaces IP to NextHopGroup(NHGID: <code>1</code>) pointing to ATE port-2 as the nexthop.</p> </li> <li> <p>Inject <code>1000</code> IPv4Entries(IPBlock1: <code>198.18.196.1/22</code>) in default VRF with NHGID: <code>1</code>.</p> </li> <li> <p>Validate that the entries are installed as FIB_PROGRAMMED using getRPC.</p> </li> <li> <p>Send traffic from ATE port-1 to prefixes in IPBlock1 and ensure traffic flows 100% and reaches ATE port-2.</p> </li> <li> <p>Start flushing  IPv4Entries((IPBlock1: <code>198.18.196.1/22</code>) in default VRF with NHGID: <code>1</code>. Concurrently, trigger a supervisor switchover using gNOI <code>SwitchControlProcessor</code>  while IPBlock1 entries are only partially installed.</p> </li> <li> <p>Following reconnection of the <code>gRIBI client</code> to a new master supervisor, validate if partially deleted entries of IPBlock1  are not present in the FIB using a get RPC.</p> </li> <li> <p>Check for coredumps in the DUT and validate that none are present post failover.</p> </li> <li> <p>Re-inject IPBlock1 in default VRF with NHGID: <code>1</code>.</p> </li> <li> <p>Send traffic from ATE port-1 to prefixes in IPBlock1 and ensure traffic flows 100% and reaches ATE port-2.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_removal_during_failover_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gNOI:<ul> <li>System<ul> <li>SwitchControlProcessor</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_removal_during_failover_test/#config-parameter-coverage","title":"Config parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/gribi/otg_tests/route_removal_during_failover_test/#telemery-parameter-coverage","title":"Telemery parameter coverage","text":"<ul> <li> <p>CHASSIS:</p> <ul> <li>/components/component[name=]/state/last-reboot-time <li>/components/component[name=]/state/last-reboot-reason <li> <p>CONTROLLER_CARD:</p> <ul> <li>/components/component[name=]/state/redundant-role <li>/components/component[name=]/state/last-switchover-time <li>/components/component[name=]/state/last-switchover-reason/trigger <li>/components/component[name=]/state/last-switchover-reason/details <li>/components/component[name=]/state/last-reboot-time <li>/components/component[name=]/state/last-reboot-reason"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/interface_loopback_aggregate/otg_tests/interface_loopback_aggregate/","title":"RT-5.6: Interface Loopback mode","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/interface_loopback_aggregate/otg_tests/interface_loopback_aggregate/#summary","title":"Summary","text":"<p>Ensure Interface mode can be set to loopback mode and can be added as part of static LAG.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/interface_loopback_aggregate/otg_tests/interface_loopback_aggregate/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/interface_loopback_aggregate/otg_tests/interface_loopback_aggregate/#testcase-1","title":"TestCase-1:","text":"<ul> <li>Configure DUT port-1 to OTG port-1.</li> <li>Admin down OTG port-1.</li> <li>Verify DUT port-1 is down.</li> <li>On DUT port-1, set interface \u201cloopback mode\u201d to \u201cFACILITY\u201d.</li> <li>Add port-1 as part of Static LAG (lacp mode static(on)).</li> <li>Validate that port-1 operational status is \u201cUP\u201d.</li> <li>Validate on DUT that LAG interface status is \u201cUP\u201d.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/interface_loopback_aggregate/otg_tests/interface_loopback_aggregate/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/interfaces/interface/config/loopback-mode</li> <li>/interfaces/interface/ethernet/config/port-speed</li> <li>/interfaces/interface/ethernet/config/duplex-mode</li> <li>/interfaces/interface/ethernet/config/aggregate-id</li> <li>/interfaces/interface/aggregation/config/lag-type</li> <li>/interfaces/interface/aggregation/config/min-links</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/interface_loopback_aggregate/otg_tests/interface_loopback_aggregate/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/interfaces/interface/state/loopback-mode</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/interface_loopback_aggregate/otg_tests/interface_loopback_aggregate/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/interface_loopback_aggregate/otg_tests/interface_loopback_aggregate/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/my_station_mac/otg_tests/my_station_mac_test/","title":"TE-1.2: My Station MAC","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/my_station_mac/otg_tests/my_station_mac_test/#summary","title":"Summary","text":"<p>Ensure my MAC entries installed on the DUT are honored and used for routing.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/my_station_mac/otg_tests/my_station_mac_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2.</li> <li>Configure MyStationMAC whose value is 00:1A:11:00:00:01.</li> <li>Configure a traffic flow from ATE port-1 to ATE port-2.</li> <li>The destination MAC for the flow source is set to MyStationMAC 00:1A:11:00:00:01.</li> <li>Validate that packets are forwarded without drops.</li> <li>Remove the MyStationMAC configuration. </li> <li>Validate that traffic is blackholed.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/my_station_mac/otg_tests/my_station_mac_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/system/mac-address/config/routing-mac.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/my_station_mac/otg_tests/my_station_mac_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/system/mac-address/state/routing-mac.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/interface/my_station_mac/otg_tests/my_station_mac_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/base_adjacencies_test/","title":"RT-2.1: Base IS-IS Process and Adjacencies","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/base_adjacencies_test/#summary","title":"Summary","text":"<p>Base IS-IS functionality and adjacency establishment.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/base_adjacencies_test/#procedure","title":"Procedure","text":"<ul> <li>Basic fields test<ul> <li>Configure DUT:port1 for an IS-IS session with ATE:port1.</li> <li>Read back the configuration to ensure that all fields are readable and     have been set properly (or correctly have their default value).</li> <li>Check that all relevant counters are readable and are 0 since the     adjacency has not yet been established.</li> <li>Push ATE configuration for the other end of the adjacency, and wait for     the adjacency to form.</li> <li>Check that the various state fields of the adjacency are reported     correctly.</li> <li>Check that error counters are still 0 and that packet counters have all     increased.</li> </ul> </li> <li>Hello padding test<ul> <li>Configure IS-IS between DUT:port1 and ATE:port1 for each possible value     of hello padding (DISABLED, STRICT, etc.)</li> <li>Confirm in each case that that adjacency forms and the correct values     are reported back by the device.</li> <li>TODO: LOOSE padding test</li> </ul> </li> <li>Authentication test<ul> <li>Configure IS-IS between DUT:port1 and ATE:port1 With authentication     disabled, then enabled in TEXT mode, then enabled in MD5 mode.</li> <li>Confirm in each case that that adjacency forms and the correct values     are reported back by the device.</li> </ul> </li> <li>Routing test<ul> <li>With ISIS level authentication enabled and hello authentication enabled:<ul> <li>Ensure that IPv4 and IPv6 prefixes that are advertised as attached     prefixes within each LSP are correctly installed into the DUT     routing table, by ensuring that packets are received to the attached     prefix when forwarded from ATE port-1.</li> <li>Ensure that IPv4 and IPv6 prefixes that are advertised as part of an     (emulated) neighboring system are installed into the DUT routing     table, and validate that packets are sent and received to them.</li> </ul> </li> <li>With a known LSP content, ensure that the telemetry received from the     device for the LSP matches the expected content.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/base_adjacencies_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>TODO: global/config/authentication-check</li> <li>global/config/net</li> <li>global/config/level-capability</li> <li>global/config/hello-padding</li> <li>global/afi-safi/af/config/enabled</li> <li>levels/level/config/level-number</li> <li>levels/level/config/enabled</li> <li>levels/level/authentication/config/enabled</li> <li>levels/level/authentication/config/auth-mode     levels/level/authentication/config/auth-password</li> <li>levels/level/authentication/config/auth-type</li> <li>interfaces/interface/config/interface-id</li> <li>interfaces/interface/config/enabled</li> <li>interfaces/interface/config/circuit-type</li> <li>interfaces/interface/timers/config/csnp-interval</li> <li>interfaces/interface/timers/config/lsp-pacing-interval</li> <li>interfaces/interface/levels/level/config/level-number</li> <li>interfaces/interface/levels/level/timers/config/hello-interval</li> <li>interfaces/interface/levels/level/timers/config/hello-multiplier</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-mode</li> <li>network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/auth-password</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-type</li> <li>interfaces/interface/levels/level/hello-authentication/config/enabled</li> <li>interfaces/interface/afi-safi/af/config/afi-name</li> <li>interfaces/interface/afi-safi/af/config/safi-name</li> <li>interfaces/interface/afi-safi/af/config/metric</li> <li>interfaces/interface/afi-safi/af/config/enabled</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/base_adjacencies_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/system-id</li> <li>interfaces/interface/levels/level/afi-safi/af/state/afi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>interfaces/interface/levels/level/afi-safi/af/state/safi-name</li> <li>interfaces/interface/levels/level/afi-safis/afi-safi/state/metric</li> <li>interfaces/interface/levels/level/packet-counters/cnsp/dropped</li> <li>interfaces/interface/levels/level/packet-counters/cnsp/processed</li> <li>interfaces/interface/levels/level/packet-counters/cnsp/received</li> <li>interfaces/interface/levels/level/packet-counters/cnsp/sent</li> <li>interfaces/interface/levels/level/packet-counters/iih/dropped</li> <li>interfaces/interface/levels/level/packet-counters/iih/processed</li> <li>interfaces/interface/levels/level/packet-counters/iih/received</li> <li>interfaces/interface/levels/level/packet-counters/iih/retransmit</li> <li>interfaces/interface/levels/level/packet-counters/iih/sent</li> <li>interfaces/interface/levels/level/packet-counters/lsp/dropped</li> <li>interfaces/interface/levels/level/packet-counters/lsp/processed</li> <li>interfaces/interface/levels/level/packet-counters/lsp/received</li> <li>interfaces/interface/levels/level/packet-counters/lsp/retransmit</li> <li>interfaces/interface/levels/level/packet-counters/lsp/sent</li> <li>interfaces/interface/levels/level/packet-counters/psnp/dropped</li> <li>interfaces/interface/levels/level/packet-counters/psnp/processed</li> <li>interfaces/interface/levels/level/packet-counters/psnp/received</li> <li>interfaces/interface/levels/level/packet-counters/psnp/retransmit</li> <li>interfaces/interface/levels/level/packet-counters/psnp/sent</li> <li>interfaces/interfaces/circuit-counters/state/adj-changes</li> <li>interfaces/interfaces/circuit-counters/state/adj-number</li> <li>interfaces/interfaces/circuit-counters/state/auth-fails</li> <li>interfaces/interfaces/circuit-counters/state/auth-type-fails</li> <li>interfaces/interfaces/circuit-counters/state/id-field-len-mismatches</li> <li>interfaces/interfaces/circuit-counters/state/lan-dis-changes</li> <li>interfaces/interfaces/circuit-counters/state/max-area-address-mismatch</li> <li>interfaces/interfaces/circuit-counters/state/rejected-adj</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/area-address</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/dis-system-id</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/local-extended-system-id</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/multi-topology</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-circuit-type</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-extended-system-id</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-snpa</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/nlpid</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/priority</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/remaining-hold-time</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/restart-status</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/restart-support</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/restart-suppress</li> <li>levels/level/system-level-counters/state/auth-fails</li> <li>levels/level/system-level-counters/state/auth-type-fails</li> <li>levels/level/system-level-counters/state/corrupted-lsps</li> <li>levels/level/system-level-counters/state/database-overloads</li> <li>levels/level/system-level-counters/state/exceeded-max-seq-nums</li> <li>levels/level/system-level-counters/state/id-len-mismatch</li> <li>levels/level/system-level-counters/state/lsp-errors</li> <li>levels/level/system-level-counters/state/max-area-address-mismatches</li> <li>levels/level/system-level-counters/state/own-lsp-purges</li> <li>levels/level/system-level-counters/state/seq-num-skips</li> <li>levels/level/system-level-counters/state/spf-runs</li> </ul> </li> <li> <p>For LSDB - subpaths of</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/...</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/base_adjacencies_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>IS-IS:<ul> <li>LSP messages<ul> <li>TLV 1 (Area Addresses)</li> <li>TLV 10 (Authentication)</li> <li>TLV 22 (Extended IS reach)</li> <li>TLV 135 (Extended IP Reachability)</li> <li>TLV 137 (Dynamic Name)</li> <li>TLV 232 (IPv6 Reachability)</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/base_adjacencies_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/isis_change_lsp_lifetime_test/","title":"RT-2.10: IS-IS change LSP lifetime","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/isis_change_lsp_lifetime_test/#summary","title":"Summary","text":"<ul> <li>Changing the lsp lifetime and verifying isis lsp parameters</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/isis_change_lsp_lifetime_test/#procedure","title":"Procedure","text":"<pre><code>* Configure IS-IS for ATE port-1 and DUT port-1.\n* Modify the default lifetime of the LSP PDU.\n* The default lifetime of the LSP PDU is 1200 seconds.\n    This parameter can be updated using the LSP lifetime parameter.\n    LSP lifetime indicates how long the LSP PDU originated by the DUT should remain in the network. \n    The DUT regenerates the LSP PDU typically ~300 seconds before its expiration.\n* Verify that IS-IS adjacency for IPv4 and IPV6 address family is coming up.\n* Verify that IPv4 and IPv6 prefixes that are advertised by ATE correctly installed into DUTs route and forwarding table.\n* Verify that the updated LSP lifetime is reflected in isis database output.\n* Verify that the remaining lifetime of the lsp is remaining lifetime = configured lifetime - time passed since the LSP PDU generation.\n* Verify that once the new LSP PDU is generated the sequence number and checksum of the new LSP PDU is updated\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/isis_change_lsp_lifetime_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/timers/config/lsp-lifetime-interval </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/isis_change_lsp_lifetime_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/timers/state/lsp-lifetime-interval</li> <li>levels/level/link-state-database/lsp/state/remaining-lifetime</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/lsp_updates_test/","title":"RT-2.2: IS-IS LSP Updates","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/lsp_updates_test/#summary","title":"Summary","text":"<p>Ensure that IS-IS updates reflect parameter changes on DUT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/lsp_updates_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Configure L2 IS-IS adjacency between ATE port-1 and DUT port-1, and ATE     port-2 and DUT port-2.</p> </li> <li> <p>Validate that received LSDB on ATE has:</p> <ul> <li> <p>TODO: Overload bit unset by default, change overload bit to set via DUT     configuration, and ensure that the overload bit is advertised as set (as     observed by the ATE). Ensure that DUT telemetry reflects the overload     bit is set.</p> </li> <li> <p>TODO: Metric is set to the specified value for ATE port-1 facing DUT     port via configuration, update value in configuration, and ensure that     ATE and DUT telemetry reflects the change.</p> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/lsp_updates_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>For prefix: /network-instances/network-instance/protocols/protocol/isis/</p> <p>Parameters:</p> <ul> <li>global/lsp-bit/overload-bit/config/set-bit</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/lsp_updates_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li> <p>/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/metric</p> </li> <li> <p>/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/lsp_updates_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>IS-IS<ul> <li>LSP<ul> <li>Flags - overload bit (5)</li> <li>TLV 22 metric field.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/ate_tests/lsp_updates_test/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/base_adjacencies_test/","title":"RT-2.1: Base IS-IS Process and Adjacencies","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/base_adjacencies_test/#summary","title":"Summary","text":"<p>Base IS-IS functionality and adjacency establishment.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/base_adjacencies_test/#procedure","title":"Procedure","text":"<ul> <li>Basic fields test<ul> <li>Configure DUT:port1 for an IS-IS session with ATE:port1.</li> <li>Read back the configuration to ensure that all fields are readable and     have been set properly (or correctly have their default value).</li> <li>Check that all relevant counters are readable and are 0 since the     adjacency has not yet been established.</li> <li>Push ATE configuration for the other end of the adjacency, and wait for     the adjacency to form.</li> <li>Check that the various state fields of the adjacency are reported     correctly.</li> <li>Check that error counters are still 0 and that packet counters have all     increased.</li> </ul> </li> <li>Hello padding test<ul> <li>Configure IS-IS between DUT:port1 and ATE:port1 for each possible value     of hello padding (DISABLED, STRICT, etc.)</li> <li>Confirm in each case that that adjacency forms and the correct values     are reported back by the device.</li> </ul> </li> <li>Authentication test<ul> <li>Configure IS-IS between DUT:port1 and ATE:port1 With authentication     disabled, then enabled in TEXT mode, then enabled in MD5 mode.</li> <li>Confirm in each case that that adjacency forms and the correct values     are reported back by the device.</li> </ul> </li> <li>Routing test</li> <li>With ISIS level authentication enabled and hello authentication enabled:<ul> <li>Ensure that IPv4 and IPv6 prefixes that are advertised as attached         prefixes within each LSP are correctly installed into the DUT         routing table, by ensuring that packets are received to the attached         prefix when forwarded from ATE port-1.</li> <li>Ensure that IPv4 and IPv6 prefixes that are advertised as part of an         (emulated) neighboring system are installed into the DUT routing         table, and validate that packets are sent and received to them.</li> <li>With a known LSP content, ensure that the telemetry received from the     device for the LSP matches the expected content.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/base_adjacencies_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>TODO: global/config/authentication-check</li> <li>global/config/net</li> <li>global/config/level-capability</li> <li>global/config/hello-padding</li> <li>global/afi-safi/af/config/enabled</li> <li>levels/level/config/level-number</li> <li>levels/level/config/enabled</li> <li>levels/level/authentication/config/enabled</li> <li>levels/level/authentication/config/auth-mode     levels/level/authentication/config/auth-password</li> <li>levels/level/authentication/config/auth-type</li> <li>interfaces/interface/config/interface-id</li> <li>interfaces/interface/config/enabled</li> <li>interfaces/interface/config/circuit-type</li> <li>interfaces/interface/timers/config/csnp-interval</li> <li>interfaces/interface/timers/config/lsp-pacing-interval</li> <li>interfaces/interface/levels/level/config/level-number</li> <li>interfaces/interface/levels/level/timers/config/hello-interval</li> <li>interfaces/interface/levels/level/timers/config/hello-multiplier</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-mode</li> <li>network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/auth-password</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-type</li> <li>interfaces/interface/levels/level/hello-authentication/config/enabled</li> <li>interfaces/interface/afi-safi/af/config/afi-name</li> <li>interfaces/interface/afi-safi/af/config/safi-name</li> <li>interfaces/interface/afi-safi/af/config/metric</li> <li>interfaces/interface/afi-safi/af/config/enabled</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/base_adjacencies_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/system-id</li> <li>interfaces/interface/levels/level/afi-safi/af/state/afi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>interfaces/interface/levels/level/afi-safi/af/state/safi-name</li> <li>interfaces/interface/levels/level/afi-safis/afi-safi/state/metric</li> <li>interfaces/interface/levels/level/packet-counters/cnsp/dropped</li> <li>interfaces/interface/levels/level/packet-counters/cnsp/processed</li> <li>interfaces/interface/levels/level/packet-counters/cnsp/received</li> <li>interfaces/interface/levels/level/packet-counters/cnsp/sent</li> <li>interfaces/interface/levels/level/packet-counters/iih/dropped</li> <li>interfaces/interface/levels/level/packet-counters/iih/processed</li> <li>interfaces/interface/levels/level/packet-counters/iih/received</li> <li>interfaces/interface/levels/level/packet-counters/iih/retransmit</li> <li>interfaces/interface/levels/level/packet-counters/iih/sent</li> <li>interfaces/interface/levels/level/packet-counters/lsp/dropped</li> <li>interfaces/interface/levels/level/packet-counters/lsp/processed</li> <li>interfaces/interface/levels/level/packet-counters/lsp/received</li> <li>interfaces/interface/levels/level/packet-counters/lsp/retransmit</li> <li>interfaces/interface/levels/level/packet-counters/lsp/sent</li> <li>interfaces/interface/levels/level/packet-counters/psnp/dropped</li> <li>interfaces/interface/levels/level/packet-counters/psnp/processed</li> <li>interfaces/interface/levels/level/packet-counters/psnp/received</li> <li>interfaces/interface/levels/level/packet-counters/psnp/retransmit</li> <li>interfaces/interface/levels/level/packet-counters/psnp/sent</li> <li>interfaces/interfaces/circuit-counters/state/adj-changes</li> <li>interfaces/interfaces/circuit-counters/state/adj-number</li> <li>interfaces/interfaces/circuit-counters/state/auth-fails</li> <li>interfaces/interfaces/circuit-counters/state/auth-type-fails</li> <li>interfaces/interfaces/circuit-counters/state/id-field-len-mismatches</li> <li>interfaces/interfaces/circuit-counters/state/lan-dis-changes</li> <li>interfaces/interfaces/circuit-counters/state/max-area-address-mismatch</li> <li>interfaces/interfaces/circuit-counters/state/rejected-adj</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/area-address</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/dis-system-id</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/local-extended-system-id</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/multi-topology</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-circuit-type</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-extended-system-id</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/neighbor-snpa</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/nlpid</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/priority</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/remaining-hold-time</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/restart-status</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/restart-support</li> <li>interfaces/interfaces/levels/level/adjacencies/adjacency/state/restart-suppress</li> <li>levels/level/system-level-counters/state/auth-fails</li> <li>levels/level/system-level-counters/state/auth-type-fails</li> <li>levels/level/system-level-counters/state/corrupted-lsps</li> <li>levels/level/system-level-counters/state/database-overloads</li> <li>levels/level/system-level-counters/state/exceeded-max-seq-nums</li> <li>levels/level/system-level-counters/state/id-len-mismatch</li> <li>levels/level/system-level-counters/state/lsp-errors</li> <li>levels/level/system-level-counters/state/max-area-address-mismatches</li> <li>levels/level/system-level-counters/state/own-lsp-purges</li> <li>levels/level/system-level-counters/state/seq-num-skips</li> <li>levels/level/system-level-counters/state/spf-runs</li> </ul> </li> <li> <p>For LSDB - subpaths of</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/...</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/base_adjacencies_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>IS-IS:<ul> <li>LSP messages<ul> <li>TLV 1 (Area Addresses)</li> <li>TLV 10 (Authentication)</li> <li>TLV 22 (Extended IS reach)</li> <li>TLV 135 (Extended IP Reachability)</li> <li>TLV 137 (Dynamic Name)</li> <li>TLV 232 (IPv6 Reachability)</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/base_adjacencies_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_change_lsp_lifetime_test/","title":"RT-2.10: IS-IS change LSP lifetime","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_change_lsp_lifetime_test/#summary","title":"Summary","text":"<ul> <li>Changing the lsp lifetime and verifying isis lsp parameters</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_change_lsp_lifetime_test/#topology","title":"Topology","text":"<ul> <li>ATE:port1 &lt;-&gt; port1:DUT:port2 &lt;-&gt; ATE:port2</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_change_lsp_lifetime_test/#procedure","title":"Procedure","text":"<pre><code>* Configure IS-IS for ATE port-1 and DUT port-1.\n* Modify the default lifetime of the LSP PDU.\n* The default lifetime of the LSP PDU is 1200 seconds.\n    This parameter can be updated using the LSP lifetime parameter.\n    LSP lifetime indicates how long the LSP PDU originated by the DUT should remain in the network. \n    The DUT regenerates the LSP PDU typically ~300 seconds before its expiration.\n* Change the LSP lifetime to 500secs    \n* Verify that IS-IS adjacency for IPv4 and IPV6 address family is coming up.\n* Verify that IPv4 and IPv6 prefixes that are advertised by ATE correctly installed into DUTs route and forwarding table.\n* Verify that the updated LSP lifetime is reflected in isis database output.\n* Verify that the remaining lifetime of the lsp is remaining lifetime = configured lifetime - time passed since the LSP PDU generation.\n* Verify that once the new LSP PDU is generated the sequence number and checksum of the new LSP PDU is updated\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_change_lsp_lifetime_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/timers/config/lsp-lifetime-interval </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_change_lsp_lifetime_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/timers/state/lsp-lifetime-interval</li> <li>levels/level/link-state-database/lsp/state/remaining-lifetime</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_drain_test/","title":"RT-2.12: IS-IS Drain Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_drain_test/#summary","title":"Summary","text":"<p>Ensure that IS-IS metric change can drain traffic from a DUT trunk interface</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_drain_test/#procedure","title":"Procedure","text":"<ul> <li>Connect three ATE ports to the DUT</li> <li>Port-2 and port-3 each makes a one-member trunk port with the same ISIS metric 10 configured for the trunk interfaces (trunk-2 and trunk-3).  </li> <li>Configure a destination network-a connected to trunk-2 and trunk-3.</li> <li>Send 10K IPv4 traffic flows from ATE port-1 to network-a. Validate that traffic is going via trunk-2 and trunk-3 and there is no traffic loss</li> <li>Change the ISIS metric of trunk-2 to 1000 value. Validate that 100% of the traffic is going out of only trunk-3 and there is no traffic loss.</li> <li>Revert back the ISIS metric on trunk-2. Validate that the traffic is going via both trunk-2 and trunk-3, and there is no traffic loss.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_drain_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_drain_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_drain_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>IS-IS<ul> <li>LSP<ul> <li>TLV 22 metric field.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_drain_test/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_hello_padding_enable_test/","title":"RT-2.6: IS-IS Hello-Padding  enabled at interface level","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_hello_padding_enable_test/#summary","title":"Summary","text":"<ul> <li>Base IS-IS functionality and adjacency establishment.</li> <li>Verifies isis adjacency by changing MTU.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_hello_padding_enable_test/#procedure","title":"Procedure","text":"<ul> <li>Configure IS-IS for ATE port-1 and DUT port-1.</li> <li>Configure DUT with global hello-padding enabled.</li> <li>Ensure that adjacencies are established with:<ul> <li>Interface level hello padding is enabled.</li> <li>Verify that IPv4 and IPv6 IS-ISIS adjacency comes up fine.</li> <li>Verify the output of ST path displaying the status of ISIS hello padding.</li> <li>If we change the MTU on either side, then adjacency should not come up.</li> <li>Verify that IPv4 and IPv6 prefixes that are advertised by ATE correctly installed into DUTs route and forwarding table.</li> <li>TODO-Verify the Hellos are sent with Padding during adjacency turn-up if the padding is enabled adaptively/sometimes.</li> <li>Ensure that IPv4 and IPv6 prefixes that are advertised as part of an (emulated) neighboring system are installed into the DUT routing table, and validate that packets are sent and received to them.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_hello_padding_enable_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/config/authentication-check</li> <li>global/config/net</li> <li>global/config/level-capability</li> <li>global/config/hello-padding</li> <li>global/afi-safi/af/config/enabled</li> <li>levels/level/config/level-number</li> <li>levels/level/config/enabled</li> <li>levels/level/authentication/config/enabled</li> <li>levels/level/authentication/config/auth-mode</li> <li>levels/level/authentication/config/auth-password</li> <li>levels/level/authentication/config/auth-type</li> <li>interfaces/interface/config/interface-id</li> <li>interfaces/interface/config/enabled</li> <li>interfaces/interface/config/circuit-type</li> <li>interfaces/interface/timers/config/csnp-interval</li> <li>interfaces/interface/timers/config/lsp-pacing-interval</li> <li>interfaces/interface/levels/level/config/level-number</li> <li>interfaces/interface/levels/level/timers/config/hello-interval</li> <li>interfaces/interface/levels/level/timers/config/hello-multiplier</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-mode</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-password</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-type</li> <li>interfaces/interface/levels/level/hello-authentication/config/enabled</li> <li>interfaces/interface/afi-safi/af/config/afi-name</li> <li>interfaces/interface/afi-safi/af/config/safi-name</li> <li>interfaces/interface/afi-safi/af/config/metric</li> <li>interfaces/interface/afi-safi/af/config/enabled</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_hello_padding_enable_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/state/hello-padding</li> <li>interfaces/interface/state/hello-padding</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/area-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/priority</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress</li> <li>interfaces/interface/levels/level/afi-safi/af/state/afi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>interfaces/interface/levels/level/afi-safi/af/state/safi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>levels/level/system-level-counters/state/auth-fails</li> <li>levels/level/system-level-counters/state/auth-type-fails</li> <li>levels/level/system-level-counters/state/corrupted-lsps</li> <li>levels/level/system-level-counters/state/database-overloads</li> <li>levels/level/system-level-counters/state/exceed-max-seq-nums</li> <li>levels/level/system-level-counters/state/id-len-mismatch</li> <li>levels/level/system-level-counters/state/lsp-errors</li> <li>levels/level/system-level-counters/state/manual-address-drop-from-area </li> <li>levels/level/system-level-counters/state/max-area-address-mismatches</li> <li>levels/level/system-level-counters/state/own-lsp-purges</li> <li>levels/level/system-level-counters/state/part-changes </li> <li>levels/level/system-level-counters/state/seq-num-skips</li> <li>levels/level/system-level-counters/state/spf-runs</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_level_passive_test/","title":"RT-2.11: IS-IS Passive is enabled at the area level","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_level_passive_test/#summary","title":"Summary","text":"<ul> <li>Verify isis adjacency with passive enabled under level.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_level_passive_test/#topology","title":"Topology","text":"<ul> <li>ATE:port1 &lt;-&gt; port1:DUT:port2 &lt;-&gt; ATE:port2</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_level_passive_test/#procedure","title":"Procedure","text":"<ul> <li>Configure IS-IS for ATE port-1 and DUT port-1.</li> <li>Configure DUT interface with IS-IS passive configured at area level 2.<ul> <li>Verify that IS-IS adjacency is not coming up in level-2 area for IPv4 and IPV6 address families.</li> </ul> </li> <li>Undo the IS-IS passive configuration under level 2<ul> <li>Verify that IS-IS adjacency for IPv4 and IPV6 address families are coming up in the level-2 area.</li> <li>Verify that IPv4 and IPv6 prefixes that are advertised by ATE are correctly installed into DUTs route and forwarding table.</li> <li>Ensure that IPv4 and IPv6 prefixes that are advertised as part of an (emulated) neighboring system are installed into the DUT routing table, and validate that packets are sent and received to them.</li> <li>TODO-Verify the output of ST path displaying the interface as passive in ISIS database/adj table</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_level_passive_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/config/authentication-check</li> <li>global/config/net</li> <li>global/config/level-capability</li> <li>global/config/hello-padding</li> <li>global/afi-safi/af/config/enabled</li> <li>levels/level/config/level-number</li> <li>levels/level/config/enabled</li> <li>levels/level/authentication/config/enabled</li> <li>levels/level/authentication/config/auth-mode</li> <li>levels/level/authentication/config/auth-password</li> <li>levels/level/authentication/config/auth-type</li> <li>interfaces/interface/config/interface-id</li> <li>interfaces/interface/config/enabled</li> <li>interfaces/interface/config/circuit-type</li> <li>interfaces/interface/config/passive</li> <li>interfaces/interface/timers/config/csnp-interval</li> <li>interfaces/interface/timers/config/lsp-pacing-interval</li> <li>interfaces/interface/levels/level/config/level-number</li> <li>interfaces/interface/levels/level/config/passive</li> <li>interfaces/interface/levels/level/timers/config/hello-interval</li> <li>interfaces/interface/levels/level/timers/config/hello-multiplier</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-mode</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-password</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-type</li> <li>interfaces/interface/levels/level/hello-authentication/config/enabled</li> <li>interfaces/interface/afi-safi/af/config/afi-name</li> <li>interfaces/interface/afi-safi/af/config/safi-name</li> <li>interfaces/interface/afi-safi/af/config/metric</li> <li>interfaces/interface/afi-safi/af/config/enabled</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_level_passive_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>interfaces/interface/state/passive</li> <li>interfaces/interface/levels/level/state/passive</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/area-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/priority</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress</li> <li>interfaces/interface/levels/level/afi-safi/af/state/afi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>interfaces/interface/levels/level/afi-safi/af/state/safi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>levels/level/system-level-counters/state/auth-fails</li> <li>levels/level/system-level-counters/state/auth-type-fails</li> <li>levels/level/system-level-counters/state/corrupted-lsps</li> <li>levels/level/system-level-counters/state/database-overloads</li> <li>levels/level/system-level-counters/state/exceed-max-seq-nums</li> <li>levels/level/system-level-counters/state/id-len-mismatch</li> <li>levels/level/system-level-counters/state/lsp-errors</li> <li>levels/level/system-level-counters/state/manual-address-drop-from-area </li> <li>levels/level/system-level-counters/state/max-area-address-mismatches</li> <li>levels/level/system-level-counters/state/own-lsp-purges</li> <li>levels/level/system-level-counters/state/part-changes </li> <li>levels/level/system-level-counters/state/seq-num-skips</li> <li>levels/level/system-level-counters/state/spf-runs</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_passive_test/","title":"RT-2.7: IS-IS Passive is enabled at interface level","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_passive_test/#summary","title":"Summary","text":"<ul> <li>Base IS-IS functionality and adjacency establishment.</li> <li>Ensure that IS-IS adjacency is not coming up on the passive interface</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_passive_test/#procedure","title":"Procedure","text":"<ul> <li> <p>TestIsisInterfacePassive</p> <ul> <li>Configure IS-IS for ATE port-1 and DUT port-1.</li> <li>Configure DUT interface as ISIS passive interface.</li> <li>Ensure that IS-IS adjacency is not coming up on the passive interface.</li> <li>TODO-Verify the output of ST path displaying the interface as passive in ISIS database/adj table</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_passive_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/config/authentication-check</li> <li>global/config/net</li> <li>global/config/level-capability</li> <li>global/config/hello-padding</li> <li>global/afi-safi/af/config/enabled</li> <li>levels/level/config/level-number</li> <li>levels/level/config/enabled</li> <li>levels/level/authentication/config/enabled</li> <li>levels/level/authentication/config/auth-mode</li> <li>levels/level/authentication/config/auth-password</li> <li>levels/level/authentication/config/auth-type</li> <li>interfaces/interface/config/interface-id</li> <li>interfaces/interface/config/enabled</li> <li>interfaces/interface/config/circuit-type</li> <li>interfaces/interface/config/passive</li> <li>interfaces/interface/timers/config/csnp-interval</li> <li>interfaces/interface/timers/config/lsp-pacing-interval</li> <li>interfaces/interface/levels/level/config/level-number</li> <li>interfaces/interface/levels/level/config/passive</li> <li>interfaces/interface/levels/level/timers/config/hello-interval</li> <li>interfaces/interface/levels/level/timers/config/hello-multiplier</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-mode</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-password</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-type</li> <li>interfaces/interface/levels/level/hello-authentication/config/enabled</li> <li>interfaces/interface/afi-safi/af/config/afi-name</li> <li>interfaces/interface/afi-safi/af/config/safi-name</li> <li>interfaces/interface/afi-safi/af/config/enabled</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_interface_passive_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>interfaces/interface/state/passive</li> <li>interfaces/interface/levels/level/state/passive </li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/area-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/priority</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress</li> <li>interfaces/interface/levels/level/afi-safi/af/state/afi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>interfaces/interface/levels/level/afi-safi/af/state/safi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>levels/level/system-level-counters/state/auth-fails</li> <li>levels/level/system-level-counters/state/auth-type-fails</li> <li>levels/level/system-level-counters/state/corrupted-lsps</li> <li>levels/level/system-level-counters/state/database-overloads</li> <li>levels/level/system-level-counters/state/exceed-max-seq-nums</li> <li>levels/level/system-level-counters/state/id-len-mismatch</li> <li>levels/level/system-level-counters/state/lsp-errors</li> <li>levels/level/system-level-counters/state/manual-address-drop-from-area </li> <li>levels/level/system-level-counters/state/max-area-address-mismatches</li> <li>levels/level/system-level-counters/state/own-lsp-purges</li> <li>levels/level/system-level-counters/state/part-changes </li> <li>levels/level/system-level-counters/state/seq-num-skips</li> <li>levels/level/system-level-counters/state/spf-runs</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_enabled_test/","title":"RT-2.9: IS-IS  metric style wide enabled","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_enabled_test/#summary","title":"Summary","text":"<ul> <li>Base IS-IS functionality and adjacency establishment.</li> <li>Verifies route metric with wide metric enabled on DUT.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_enabled_test/#procedure","title":"Procedure","text":"<pre><code>*   Configure IS-IS for ATE port-1 and DUT port-1.\n*   Enable wide metric style on ATE and DUT.\n*   Advertise ISIS prefixes from ATE with wide metrics (value &gt; 63).\n*   Verify that IS-IS adjacency for IPv4 and IPV6 address family is coming up.\n*   Verify that IPv4 and IPv6 prefixes that are advertised by ATE correctly installed into DUTs route and forwarding table.\n*   TODO-Verify that the metrics of the IPv4 and IPv6 prefixes is  correctly reflected\n*   Ensure that IPv4 and IPv6 prefixes that are advertised as part of an (emulated) neighboring system are installed into the DUT routing table, and validate that packets are sent and received to them.\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_enabled_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/config/authentication-check</li> <li>global/config/net</li> <li>global/config/level-capability</li> <li>global/config/hello-padding</li> <li>global/afi-safi/af/config/enabled</li> <li>levels/level/config/level-number</li> <li>levels/level/config/enabled</li> <li>levels/level/config/metric-style</li> <li>levels/level/authentication/config/enabled</li> <li>levels/level/authentication/config/auth-mode</li> <li>levels/level/authentication/config/auth-password</li> <li>levels/level/authentication/config/auth-type</li> <li>interfaces/interface/config/interface-id</li> <li>interfaces/interface/config/enabled</li> <li>interfaces/interface/config/circuit-type</li> <li>interfaces/interface/config/passive</li> <li>interfaces/interface/timers/config/csnp-interval</li> <li>interfaces/interface/timers/config/lsp-pacing-interval</li> <li>interfaces/interface/levels/level/config/level-number</li> <li>interfaces/interface/levels/level/config/passive</li> <li>interfaces/interface/levels/level/timers/config/hello-interval</li> <li>interfaces/interface/levels/level/timers/config/hello-multiplier</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-mode</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-password</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-type</li> <li>interfaces/interface/levels/level/hello-authentication/config/enabled</li> <li>interfaces/interface/afi-safi/af/config/afi-name</li> <li>interfaces/interface/afi-safi/af/config/safi-name</li> <li>interfaces/interface/afi-safi/af/config/enabled</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_enabled_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>levels/level/state/metric-style </li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/area-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/priority</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress</li> <li>interfaces/interface/levels/level/afi-safi/af/state/afi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>interfaces/interface/levels/level/afi-safi/af/state/safi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>levels/level/system-level-counters/state/auth-fails</li> <li>levels/level/system-level-counters/state/auth-type-fails</li> <li>levels/level/system-level-counters/state/corrupted-lsps</li> <li>levels/level/system-level-counters/state/database-overloads</li> <li>levels/level/system-level-counters/state/exceed-max-seq-nums</li> <li>levels/level/system-level-counters/state/id-len-mismatch</li> <li>levels/level/system-level-counters/state/lsp-errors</li> <li>levels/level/system-level-counters/state/manual-address-drop-from-area </li> <li>levels/level/system-level-counters/state/max-area-address-mismatches</li> <li>levels/level/system-level-counters/state/own-lsp-purges</li> <li>levels/level/system-level-counters/state/part-changes </li> <li>levels/level/system-level-counters/state/seq-num-skips</li> <li>levels/level/system-level-counters/state/spf-runs</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_not_enabled_test/","title":"RT-2.8: IS-IS  metric style wide not enabled","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_not_enabled_test/#summary","title":"Summary","text":"<ul> <li>Base IS-IS functionality and adjacency establishment.</li> <li>Verifies route metric with wide metric disabled on DUT.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_not_enabled_test/#procedure","title":"Procedure","text":"<ul> <li> <p>TestISISWideMetricNotEnabled</p> <ul> <li>Configure IS-IS for ATE port-1 and DUT port-1.</li> <li>Do not configure metric style wide under the area level.</li> <li>Enable wide metric style on ATE.</li> <li>Advertise ISIS prefixes from ATE with wide metrics (value &gt; 63).</li> <li>Verify that IS-IS adjacency for IPv4 and IPV6 address family is coming up.</li> <li>Verify that IPv4 and IPv6 prefixes that are advertised by ATE correctly installed into DUTs route and forwarding table.</li> <li>TODO-Verify that the metrics of the IPv4 and IPv6 prefixes is 63.</li> <li>Ensure that IPv4 and IPv6 prefixes that are advertised as part of an (emulated) neighboring system are installed into the DUT routing table, and validate that packets are sent and received to them.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_not_enabled_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>global/config/authentication-check</li> <li>global/config/net</li> <li>global/config/level-capability</li> <li>global/config/hello-padding</li> <li>global/afi-safi/af/config/enabled</li> <li>levels/level/config/level-number</li> <li>levels/level/config/enabled</li> <li>levels/level/config/metric-style</li> <li>levels/level/authentication/config/enabled</li> <li>levels/level/authentication/config/auth-mode</li> <li>levels/level/authentication/config/auth-password</li> <li>levels/level/authentication/config/auth-type</li> <li>interfaces/interface/config/interface-id</li> <li>interfaces/interface/config/enabled</li> <li>interfaces/interface/config/circuit-type</li> <li>interfaces/interface/config/passive</li> <li>interfaces/interface/timers/config/csnp-interval</li> <li>interfaces/interface/timers/config/lsp-pacing-interval</li> <li>interfaces/interface/levels/level/config/level-number</li> <li>interfaces/interface/levels/level/config/passive</li> <li>interfaces/interface/levels/level/timers/config/hello-interval</li> <li>interfaces/interface/levels/level/timers/config/hello-multiplier</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-mode</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-password</li> <li>interfaces/interface/levels/level/hello-authentication/config/auth-type</li> <li>interfaces/interface/levels/level/hello-authentication/config/enabled</li> <li>interfaces/interface/afi-safi/af/config/afi-name</li> <li>interfaces/interface/afi-safi/af/config/safi-name</li> <li>interfaces/interface/afi-safi/af/config/enabled</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/isis_metric_style_wide_not_enabled_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li> <p>For prefix:</p> <ul> <li>/network-instances/network-instance/protocols/protocol/isis/</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li>levels/level/state/metric-style </li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/area-address</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/priority</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support</li> <li>interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress</li> <li>interfaces/interface/levels/level/afi-safi/af/state/afi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>interfaces/interface/levels/level/afi-safi/af/state/safi-name</li> <li>interfaces/interface/levels/level/afi-safi/af/state/metric</li> <li>levels/level/system-level-counters/state/auth-fails</li> <li>levels/level/system-level-counters/state/auth-type-fails</li> <li>levels/level/system-level-counters/state/corrupted-lsps</li> <li>levels/level/system-level-counters/state/database-overloads</li> <li>levels/level/system-level-counters/state/exceed-max-seq-nums</li> <li>levels/level/system-level-counters/state/id-len-mismatch</li> <li>levels/level/system-level-counters/state/lsp-errors</li> <li>levels/level/system-level-counters/state/manual-address-drop-from-area </li> <li>levels/level/system-level-counters/state/max-area-address-mismatches</li> <li>levels/level/system-level-counters/state/own-lsp-purges</li> <li>levels/level/system-level-counters/state/part-changes </li> <li>levels/level/system-level-counters/state/seq-num-skips</li> <li>levels/level/system-level-counters/state/spf-runs</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/lsp_updates_test/","title":"RT-2.2: IS-IS LSP Updates","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/lsp_updates_test/#summary","title":"Summary","text":"<p>Ensure that IS-IS updates reflect parameter changes on DUT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/lsp_updates_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Configure L2 IS-IS adjacency between ATE port-1 and DUT port-1, and ATE     port-2 and DUT port-2.</p> </li> <li> <p>Validate that received LSDB on ATE has:</p> <ul> <li> <p>TODO: Overload bit unset by default, change overload bit to set via DUT     configuration, and ensure that the overload bit is advertised as set (as     observed by the ATE). Ensure that DUT telemetry reflects the overload     bit is set.</p> </li> <li> <p>TODO: Metric is set to the specified value for ATE port-1 facing DUT     port via configuration, update value in configuration, and ensure that     ATE and DUT telemetry reflects the change.</p> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/lsp_updates_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>For prefix: /network-instances/network-instance/protocols/protocol/isis/</p> <p>Parameters:</p> <ul> <li>global/lsp-bit/overload-bit/config/set-bit</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/lsp_updates_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li> <p>/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/metric</p> </li> <li> <p>/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/lsp_updates_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>IS-IS<ul> <li>LSP<ul> <li>Flags - overload bit (5)</li> <li>TLV 22 metric field.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/isis/otg_tests/lsp_updates_test/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/otg_only/","title":"Index","text":"<p>FOR SW ports 1. cd ~/featureprofiles/feature/experimental/otg_only 2. Deploy the b2b topology with \"kne_cli create otgb2b.textproto\" 3. Run the test with      go test -v otgb2b_test.go -kne-topo otgb2b.textproto -testbed otgb2b.testbed</p> <p>FOR HW ports 1. cd ~/featureprofiles/feature/experimental/otg_only 2. Deploy the 3 containers used in otg-hw setup with:     docker compose -f docker-compose.yml --profile all up -d 3. Modify the otghw.binding file to match your setup. 4. Run the test with:      go test -v otgb2b_test.go -binding otghw.binding -testbed otgb2b.testbed 5. Remove the 3 containers used in otg-hw setup with:     docker compose -f docker-compose.yml --profile all down</p> <p>FOR UHD Ports 1. setup should already be deployed with b2b ports 2. Modify the otgb2b-uhd.binding file to match your setup. 3. Run the Test with:  go test -v otgb2b_test.go -binding otgb2b-uhd.binding -testbed otgb2b.testbed</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/","title":"P4RT Implementation Guide","text":"<p>This document specifies the requirements for p4rt test implementation.</p> <ol> <li> <p>Use the cisco-open/go-p4 library.</p> </li> <li> <p>The client should import or make use of the following WBB information in the     following Google compatible format:</p> <ol> <li>WBB P4 Protobuf file:     https://github.com/openconfig/featureprofiles/blob/main/feature/experimental/p4rt/wbb.p4info.pb.txt</li> </ol> </li> <li> <p>Tests should create new P4RT clients using the <code>p4rt_client.NewP4RTClient()</code>     function, which sets up the <code>StreamTermErr</code> channel required to check errors     when the p4rt stream terminates.</p> </li> <li> <p>Tests should make use of Ondatra Raw API <code>dut.RawAPIs().P4RT(t)</code>     during client instantiation.</p> </li> <li> <p>Tests should log Stream Termination errors populated in the     <code>client.StreamTermErr</code> channel using the <code>p4rtutils.StreamTermErr()</code> helper     if there are errors in GetArbitration response or GetPacket response.</p> <pre><code>client.StreamChannelCreate(&amp;streamParameter)\nif err := client.StreamChannelSendMsg(&amp;streamName, &amp;p4_v1.StreamMessageRequest{\n    Update: &amp;p4_v1.StreamMessageRequest_Arbitration{\n        Arbitration: &amp;p4_v1.MasterArbitrationUpdate{\n            DeviceId: streamParameter.DeviceId,\n            ElectionId: &amp;p4_v1.Uint128{\n                High: streamParameter.ElectionIdH,\n                Low:  streamParameter.ElectionIdL - uint64(index),\n            },\n        },\n    },\n}); err != nil {\n    return fmt.Errorf(\"errors seen when sending ClientArbitration message: %v\", err)\n}\nif _, _, arbErr := client.StreamChannelGetArbitrationResp(&amp;streamName, 1); arbErr != nil {\n    if err := p4rtutils.StreamTermErr(client.StreamTermErr); err != nil {\n        return err\n    }\n    return fmt.Errorf(\"errors seen in ClientArbitration response: %v\", arbErr)\n        }\n</code></pre> </li> <li> <p>Tests should get the P4RT Node Name by walking the Components OC tree.     Components of type <code>INTEGRATED_CIRCUIT</code> should have child Components of type     <code>PORT</code>. These PORT Components can be mapped to currently reserved Interfaces     using the <code>hardware-port</code> leaf in the Interfaces tree. Such an     implementation already exists in <code>p4rtutils</code> library:     <code>p4rtutils.P4RTNodesByPort()</code>.</p> </li> <li> <p>If P4RT Node Names cannot be resolved by walking the Components tree, use     deviation flag <code>--deviation_explicit_p4rt_node_component</code> and pass the node     names through args <code>--arg_p4rt_node_name_1</code>, <code>--arg_p4rt_node_name_2</code>.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/base_p4rt/","title":"P4RT-1.1: Base P4RT Functionality","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/base_p4rt/#summary","title":"Summary","text":"<p>Validate that the P4RT server can accept basic configuration and Read/Write RPCs.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/base_p4rt/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</p> </li> <li> <p>Configure P4RT id and node-id with two different interfaces on different FAPs.</p> </li> <li> <p>Send the WBB P4Info via the SetForwardingConfigPipeline.</p> </li> <li> <p>Send RPC Write to install the WBBIngressaclTable for GDP, LLDP and traceroute with meters attached.</p> </li> <li> <p>Verify if the RPC write is success.</p> </li> <li> <p>Send RPC Read to read back the installed table entries.</p> </li> <li> <p>Validate the read Response for each of table entries GDP, LLDP and traceroute.</p> </li> <li> <p>Repeat the same steps for another FAP and verify the Table entries. </p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/base_p4rt/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/components/component/integrated-circuit/config/node-id</li> <li>/interfaces/interface/config/id</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/base_p4rt/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/base_p4rt/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>No new Protocol/RPC covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetin_test/","title":"P4RT-3.1: Google Discovery Protocol: PacketIn","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetin_test/#summary","title":"Summary","text":"<p>Verify that GDP packets are punted with correct metadata.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetin_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</li> <li>Enable the P4RT server on the device.</li> <li>Connect two P4RT clients in a master/secondary configuration.</li> <li>Configure the forwarding pipeline and install the P4RT table entry required for GDP.</li> <li>Send a GDP packet from the ATE and verify that it is received on the master and not the secondary client.</li> <li>Verify that the packet has the ingress_singleton_port metadata set and it corresponds to the interface ID of the port that the packet was received on.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetin_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No new configuration covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetin_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetin_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetout_test/","title":"P4RT-3.2: Google Discovery Protocol: PacketOut","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetout_test/#summary","title":"Summary","text":"<p>Verify that GDP packets can be sent by the controller.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetout_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</li> <li>Enable the P4RT server on the device.</li> <li>Connect two P4RT clients in a master/secondary configuration.</li> <li>Configure the forwarding pipeline and install the P4RT table entry required for GDP.</li> <li>Send a GDP packet from the master with egress_singleton_port set to one of the connected interfaces.</li> <li>Verify that the GDP packet is received on the ATE port connected to the indicated interface.</li> <li>Repeat sending the packet in the same way but from the secondary connection.</li> <li>Verify that the packet is not received on the ATE.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetout_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No new configuration covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetout_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/google_discovery_protocol_packetout_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetin_test/","title":"P4RT-7.1: LLDP: PacketIn","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetin_test/#summary","title":"Summary","text":"<p>Verify that LLDP packets are punted with correct metadata.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetin_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</li> <li>Disable on-box processing of LLDP.</li> <li>Enable the P4RT server on the device.</li> <li>Connect a P4RT client and configure the forwarding pipeline. Install the P4RT table entry required for LLDP.</li> <li>Send an LLDP packet from the ATE and verify that it is received by the client.</li> <li>Verify that the packet has the ingress_singleton_port metadata set and it corresponds to the interface ID of the port that the packet was received on.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetin_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No new configuration covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetin_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetin_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetout_test/","title":"P4RT-7.2: LLDP: PacketOut","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetout_test/#summary","title":"Summary","text":"<p>Verify that LLDP packets can be sent by the controller.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetout_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</li> <li>Disable on-box processing of LLDP.</li> <li>Enable the P4RT server on the device.</li> <li>Connect a P4RT client and configure the forwarding pipeline. Install the P4RT table entry required for LLDP.</li> <li>Send an LLDP packet from the client with egress_singleton_port set to one of the connected interfaces.</li> <li>Verify that the LLDP packet is received on the ATE port connected to the indicated interface.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetout_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No new configuration covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetout_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/lldp_packetout_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/performance_test/","title":"P4RT-6.1: Required Packet I/O rate: Performance","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/performance_test/#summary","title":"Summary","text":"<p>Verify that both Packetin and Packetout traffic is handled by the P4RT server at the required rate.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/performance_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2.</li> <li>Enable the P4RT server on the device.</li> <li>Connect a P4RT client and configure the forwarding pipeline. InstallP4RT table  entries required for traceroute, GDP and LLDP.</li> <li>Setup packetin GDP, LLDP and traceroute traffic from the ATE at the rate 200kbps, 100kbps and 324 pps respectively. </li> <li>Setup packetout packets for GDP, LLDP and traceroute from the P4RT client.</li> <li>Start both packetin and packetout traffic at the same rate simultaneously. </li> <li>Verify no packetloss for both directions of traffic.</li> <li>Verify the metadata ID and the value for all three traffic types on the P4RT client for packetin. </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/performance_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/integrated-circuit/config/node-id</li> <li>/interfaces/interface/config/id</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/performance_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/performance_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>No new Protocol/RPC covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetin_test/","title":"P4RT-5.1: Traceroute: PacketIn","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetin_test/#summary","title":"Summary","text":"<p>Verify that Traceroute packets are punted with correct metadata.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetin_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2.</li> <li>TODO: Install the set of routes on the device.</li> <li>Enable the P4RT server on the device.</li> <li>Connect a P4RT client and configure the forwarding pipeline. InstallP4RT table  entries required for traceroute.</li> <li>Send IPv4 packets from the ATE with TTL=1 and verify that packets with TTL=1 are received by the client.</li> <li>Send IPv6 packets from the ATE with HopLimit=1 and verify that packets with HopLimit=1 are received by the client.</li> <li>Verify that the packets have both ingress_singleton_port and egress_singleton_port metadata set.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetin_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/integrated-circuit/config/node-id</li> <li>/interfaces/interface/config/id</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetin_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No new telemetry covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetin_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>No new Protocol/RPC covered.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetout_test/","title":"P4RT-5.2: Traceroute Packetout","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetout_test/#summary","title":"Summary","text":"<p>Verify that traceroute packets can be sent by the controller.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetout_test/#submit-to-ingress-specific-behavior","title":"Submit to ingress specific behavior","text":"<p>The egress port value must be set to a non empty value but will not be used. The setting must not be interpreted as the actual egress port id.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetout_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2</p> </li> <li> <p>Install a set of routes on the device in both the default and TE VRFs.</p> </li> <li> <p>Enable the P4RT server on the device..</p> </li> <li> <p>Connect a P4RT client and configure the forwarding pipeline.</p> </li> <li> <p>Send IPv4 traceroute packets from the client with varying size.</p> </li> <li> <p>Verify that the packet is received on the ATE on the port corresponding to the routing table in the default VRF.</p> </li> <li> <p>Send an IPv6 traceroute packets from the client with varying size and verify that it is received correctly by the ATE.</p> </li> <li> <p>Repeat for each packet metadata combination shown in the table below.</p> </li> </ul> egress_port submit_to_ingress padding expected behaviour DUT port-2 0x0 0x0 traffic received on ATE port-2 DUT port-2 0x0 traffic received on ATE port-2 DUT port-2 traffic received on ATE port-2 DUT port-2 0x1 0x0 traffic received on ATE port-1 0x1 traffic received on ATE port-1 0x1 0x0 traffic received on ATE port-1 \"TBD BY SWITCH\" 0x1 0x0 traffic received on ATE port-1 \"TBD BY SWITCH\" 0x1 traffic received on ATE port-1 DUT port-2 0x1 traffic received on ATE port-1 \"TBD BY SWITCH\" 0x0 0x0 no traffic received \"TBD BY SWITCH\" 0x0 no traffic received \"TBD BY SWITCH\" 0x0 no traffic received \"TBD BY SWITCH\" no traffic received 0x0 0x0 no traffic received 0x0 no traffic received 0x0 no traffic received no traffic received <ul> <li> <p>Validate:</p> <ul> <li>Traffic received over the appropriate ATE port.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetout_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>No new configuration covered.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/otg_tests/traceroute_packetout_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>No new telemetry covered.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/tests/metadata_validation_test/","title":"P4RT-2.2: P4RT Metadata Validation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/tests/metadata_validation_test/#summary","title":"Summary","text":"<p>Validate the P4RT server handles Metadata set in Table Entry correctly.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/tests/metadata_validation_test/#procedure","title":"Procedure","text":"<ul> <li>Enable P4RT on a single FAP by configuring an ID on the device and one or     more interfaces.</li> <li>Instantiate a <code>primary</code> P4RT client and execute Client Arbitration and Set     the Forwarding Pipeline using the <code>wbb.p4info.pb.txt</code> file.</li> <li>Write a <code>TableEntry</code> with <code>Metadata</code> field set and validate correct     <code>Metadata</code> is retrieved in <code>ReadRequest</code> for the below scenarios:<ul> <li>Using Update Type as <code>INSERT</code>, Write a TableEntry with the <code>Metadata</code>     field set, and then validate correct <code>Metadata</code> is returned using Read.</li> <li>Using Update Type as <code>MODIFY</code>, update the existing TableEntry with a     change in the <code>Metadata</code> field, and then validate correct <code>Metadata</code> is     returned using Read.</li> <li>Using Update Type as <code>DELETE</code>, delete the existing TableEntry and then     validate the deletion of the TableEntry using Read.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/tests/metadata_validation_test/#notes","title":"Notes","text":"<ul> <li>P4RT Proto</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/tests/p4rt_election/","title":"P4RT-2.1: P4RT Election","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/tests/p4rt_election/#summary","title":"Summary","text":"<p>Validate the P4RT server handles primary election and failover.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/p4rt/tests/p4rt_election/#procedure","title":"Procedure","text":"<ul> <li>Enable P4RT on a single FAP by configuring an ID on the device and one or     more interfaces.</li> <li>Verify that the right clients become primary. Verify that primary can read &amp;     write and that non-primary can only read through the following scenarios:<ul> <li>Become Primary<ol> <li>Connect two P4RT clients with different election IDs.</li> <li>Verify client with the higher election ID (primary) receives a     successful MasterArbitrationUpdate.</li> <li>Verify primary client can read as well as write.</li> </ol> </li> <li>Fail to become Primary<ol> <li>Connect two P4RT clients with different election IDs.</li> <li>Verify client with the lower election ID (secondary) receives a     successful MasterArbitrationUpdate.</li> <li>Verify secondary client can read but not write.</li> </ol> </li> <li>Replace Primary<ol> <li>Connect two P4RT clients with different election IDs.</li> <li>Verify client with the lower election ID (secondary) receives a     successful MasterArbitrationUpdate.</li> <li>Verify secondary client can read but not write.</li> <li>TODO: Trigger MasterArbitrationUpdate using the secondary client     with an election ID higher than that of primary client.</li> <li>TODO: Verify that the old secondary client now becomes primary and     able to read and write.</li> <li>TODO: Verify that <code>status</code> field of <code>new primary</code> client's     MasterArbitrationUpdate response is set to <code>google.rpc.OK</code>.</li> <li>TODO: Verify that <code>election_id</code> field of <code>new primary</code> client's     MasterArbitrationUpdate response is set to the highest election_id.</li> <li>TODO: Verify that old primary is now only able to read and not     write.</li> <li>TODO: Verify that <code>status</code> field of <code>old primary</code> client's     MasterArbitrationUpdate response is set to     <code>google.rpc.ALREADY_EXISTS</code>.</li> <li>TODO: Verify that <code>election_id</code> field of <code>old primary</code> client's     MasterArbitrationUpdate response is set to <code>new primary</code> client's     election_id.</li> </ol> </li> <li>Replace Primary after Failure<ol> <li>Connect two P4RT clients with different election IDs.</li> <li>Verify primary client can read and write.</li> <li>Stop primary client by closing the stream.</li> <li>Trigger MasterArbitrationUpdate using the secondary client with an     election ID equal to that of primary client.</li> <li>Verify that old secondary client now becomes primary and able to     read and write.</li> </ol> </li> <li>TODO: Fail To become Primary after Primary Disconnect<ol> <li>Connect two P4RT clients with different election IDs.</li> <li>Verify primary client can read and write.</li> <li>Stop primary client by closing the Stream.</li> <li>Verify that the secondary client can only read and not write.</li> <li>Verify that <code>status</code> field of <code>secondary</code> client's     MasterArbitrationUpdate response is set to <code>google.rpc.NOT_FOUND</code>.</li> </ol> </li> <li>Reconnect Primary<ol> <li>Connect two P4RT clients with different election IDs.</li> <li>Verify primary client can read and write.</li> <li>Stop primary client by closing the stream.</li> <li>Connect a new P4RT client with election ID higher that old primary     election ID.</li> <li>verify that new primary client is able to read and write.</li> </ol> </li> <li>Double Primary<ol> <li>Connect two P4RT clients with different election IDs.</li> <li>Verify primary client can read and write.</li> <li>TODO: Trigger MasterArbitrationUpdate using the secondary client     with an election ID equal to that of primary client.</li> <li>TODO: Verify secondary client stream terminates with     <code>google.rpc.INVALID_ARGUMENT</code>.</li> <li>Connect a new P4RT client with election ID equal to that of primary     client.</li> <li>Verify new client's stream terminates with     <code>google.rpc.INVALID_ARGUMENT</code>.</li> </ol> </li> <li>Unset Election ID<ol> <li>Connect two P4RT clients with an <code>unset</code> election ID and no other     active P4RT clients for the corresponding device_id. (<code>unset</code> and     <code>zero</code> electionIDs are two different scenarios and a <code>zero</code>     electionID is considered as being Set)</li> <li>Verify that the clients are able to read and not write using Get and     Set ForwardingPipelineConfig requests.</li> </ol> </li> <li>TODO: Long Evolution<ol> <li>Connect five P4RT clients to the same device_id with election_id's     1,2,3,4,5</li> <li>Verify primary client is able to read and write.</li> <li>Trigger MasterArbitrationUpdate from client with <code>election_id=1</code> and     make it primary using <code>election_id=6</code>.</li> <li>Verify that client with <code>election_id=6</code> is able to read and write.</li> <li>Verify that client with <code>election_id=5</code> is able to read and not     write.</li> <li>Repeat steps <code>c</code>, <code>d</code>, <code>e</code> for the below client and election_id     combinations:<ul> <li>MasterArbitrationUpdate from client with <code>election_id=2</code> and     make it primary using <code>election_id=7</code> and verify correct read &amp;     writes for clients with <code>election_id=6</code> &amp; <code>election_id=7</code>.</li> <li>MasterArbitrationUpdate from client with <code>election_id=3</code> and     make it primary using <code>election_id=8</code> and verify correct read &amp;     writes for clients with <code>election_id=7</code> &amp; <code>election_id=8</code>.</li> <li>MasterArbitrationUpdate from client with <code>election_id=4</code> and     make it primary using <code>election_id=9</code> and verify correct read &amp;     writes for clients with <code>election_id=8</code> &amp; <code>election_id=9</code>.</li> <li>MasterArbitrationUpdate from client with <code>election_id=5</code> and     make it primary using <code>election_id=10</code> and verify correct read &amp;     writes for clients with <code>election_id=9</code> &amp; <code>election_id=10</code>.</li> </ul> </li> </ol> </li> </ul> </li> <li>TODO: Enable P4RT on an additional FAP and verify that the same set of     scenarios work independently of the first FAP</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/breakout_configuration/","title":"PLT-1.1: Interface breakout Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/breakout_configuration/#summary","title":"Summary","text":"<p>Validate Interface breakout configuration.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/breakout_configuration/#procedure","title":"Procedure","text":"<ul> <li>This test is carried out for different breakout types</li> <li>Connect DUT with ATE to all interfaces in the breakout port</li> <li>Configure each interface with test IP addressing</li> <li>Verify correct interface state and speed reported</li> <li>Verify that DUT responds to ARP/ICMP on all tested interfaces</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/breakout_configuration/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/port/breakout-mode/groups/group/index</li> <li>/components/component/port/breakout-mode/groups/group/config</li> <li>/components/component/port/breakout-mode/groups/group/config/index</li> <li>/components/component/port/breakout-mode/groups/group/config/num-breakouts</li> <li>/components/component/port/breakout-mode/groups/group/config/breakout-speed</li> <li>/components/component/port/breakout-mode/groups/group/config/num-physical-channels</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/breakout_configuration/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<pre><code>*   interfaces/interface/state\n*   interfaces/interface/ethernet/stateOutput power thresholds:\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/breakout_configuration/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<ul> <li>Breakout types - 4x100G, 2x100G and 4x10G</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/optics_thresholds_test/","title":"gNMI-1.14: Telemetry: Optics Thresholds","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/optics_thresholds_test/#summary","title":"Summary","text":"<p>Validate optics high and low thresholds for input power, output power, temperature and bias-current.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/optics_thresholds_test/#procedure","title":"Procedure","text":"<ul> <li>Connect at least one optical ethernet interface to ATE.</li> <li>Check all the transceivers with inslalled optcs.</li> <li>Validate that the following optics threshold telemetry paths exist for each optics.<ul> <li>Output power thresholds:<ul> <li>/components/component/Ethernet/properties/property/laser-tx-power-low-alarm-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-tx-power-high-alarm-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-tx-power-low-warn-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-tx-power-high-warn-threshold/state/value</li> </ul> </li> <li>Input power threshold:<ul> <li>/components/component/Ethernet/properties/property/laser-rx-power-low-alarm-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-rx-power-high-alarm-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-rx-power-low-warn-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-rx-power-high-warn-threshold/state/value</li> </ul> </li> <li>Optics temperature threshold:<ul> <li>/components/component/Ethernet/properties/property/laser-temperature-low-alarm-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-temperature-high-alarm-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-temperature-low-warn-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-temperature-high-warn-threshold/state/value</li> </ul> </li> <li>Optics bias-current threshold:<ul> <li>/components/component/Ethernet/properties/property/laser-bias-current-low-alarm-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-bias-current-high-alarm-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-bias-current-low-warn-threshold/state/value</li> <li>/components/component/Ethernet/properties/property/laser-bias-current-high-warn-threshold/state/value</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/optics_thresholds_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>None</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/optics_thresholds_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<pre><code>*   Output power thresholds:\n    *   /components/component/Ethernet/properties/property/laser-tx-power-low-alarm-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-tx-power-high-alarm-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-tx-power-low-warn-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-tx-power-high-warn-threshold/state/value\n*   Input power threshold:\n    *   /components/component/Ethernet/properties/property/laser-rx-power-low-alarm-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-rx-power-high-alarm-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-rx-power-low-warn-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-rx-power-high-warn-threshold/state/value\n*   Optics temperature threshold:\n    *   /components/component/Ethernet/properties/property/laser-temperature-low-alarm-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-temperature-high-alarm-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-temperature-low-warn-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-temperature-high-warn-threshold/state/value\n*   Optics bias-current threshold:\n    *   /components/component/Ethernet/properties/property/laser-bias-current-low-alarm-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-bias-current-high-alarm-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-bias-current-low-warn-threshold/state/value\n    *   /components/component/Ethernet/properties/property/laser-bias-current-high-warn-threshold/state/value\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/platform/tests/optics_thresholds_test/#notes","title":"Notes:","text":"<ul> <li>The model for optics threshold paths is not finalized. We may need to update those paths after the model is finalized.    </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/base_vrf_selection/","title":"RT-3.1: Policy based VRF selection","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/base_vrf_selection/#testcase-summary","title":"Testcase summary","text":"<p>Test different VRF selection policies.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/base_vrf_selection/#topology","title":"Topology","text":"<ul> <li> <p>Connect ATE Port-1 to DUT Port-1, and ATE Port-2 to DUT Port-2.</p> </li> <li> <p>Configure DUT with ingress interface as Port-1 and egress interface as Port-2. DUT Port-2 is connected to ATE Port-2 and is configured for VLAN-10 and VLAN-20 such that sub-interfaces Port-2.10 and Port-2.20 are part of VLAN 10 and VLAN 20 respectively.</p> </li> <li> <p>Configure DUT with network-instance \u201cVRF-10\u201d of type L3VRF and assign Port2.10 to network-instance \"VRF-10\".</p> </li> <li> <p>Configure DUT network-instance \u201cDEFAULT\u201d of type DEFAULT_INSTANCE. DUT-Port1 and DUT Port-2.20 should be part of \"DEFAULT\" Network w/o requiring      explicit configuration.</p> </li> <li> <p>Configure ATE to advertise following IP addresses.</p> <pre><code>*   IPv4: ATE-DEST-IPv4-VLAN10 in VLAN10\n*   IPv4: ATE-DEST-IPv4-VLAN20 in VLAN20\n*   IPv6: ATE-DEST-IPv6 in VLAN20\n</code></pre> </li> <li> <p>Configure DUT with following static routes for each VRF.</p> <pre><code> *   Static route in VRF-10: ATE-DEST-IPv4-VLAN10 next-hop DUT:Port-2.10\n *   Static route in VRF DEFAULT: ATE-DEST-IPv4-VLAN20 next-hop DUT:Port-2.20\n *   Static route in VRF DEFAULT: ATE-DEST-IPv6 next-hop DUT:Port-2.20\n</code></pre> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/base_vrf_selection/#procedure","title":"Procedure","text":"<ul> <li> <p>Test-Case 1</p> <pre><code>*   Configure DUT to match on IPinIP protocol (protocol number 4) in the outer IPv4 header and punt it to \n    network-instance VRF-10. All other traffic should be punted to the Default VRF. These will be, native IPv4, \n    native IPv6 and IPv6inIP (protocol 41 in the outer IPv4 header) traffic with and without \"198.18.0.1\"\n    as source.\n\n*   Start flows, Flow#1, Flow#3, Flow#6, Flow#8, Flow#9 and Flow#10 and validate packet forwarding. Drop of any \n    flows is considered as a failure.\n</code></pre> </li> <li> <p>Test-Case 2</p> <pre><code>*   Configure DUT to match on IPinIP protocol (protocol number 4 in the outer IPv4 header) with specific outer \n    IPv4 source address as \"198.18.0.1\" and punt it to network-instance VRF-10. All other traffic should be \n    punted to the Default VRF. These will be, IPinIP w/o source as \"198.18.0.1\", native IPv4, native IPv6 and \n    IPv6inIP (protocol 41 in the outer IPv4 header) traffic with and without \"198.18.0.1\" as source.\n\n*   Start flows, Flow#2, Flow#3, Flow#6, Flow#8, Flow#9 and Flow#10 and validate packet forwarding. Drop of any \n    flows is considered as a failure.\n</code></pre> </li> <li> <p>Test-Case 3</p> <pre><code>*   Configure DUT to match on IPv6inIP protocol (protocol number 41 in the outer IPv4 header) and punt it to \n    network-instance VRF-10. All other traffic should be punted to the Default VRF. These will be, native IPv4, \n    native IPv6 and IPinIP (protocol 4 in the outer IPv4 header) traffic with and without \"198.18.0.1\"\n    as source.\n\n*   Start flows, Flow#2, Flow#4, Flow#5, Flow#7, Flow#9 and Flow#10 and validate packet forwarding. Drop of any \n    flows is considered as a failure.\n</code></pre> </li> <li> <p>Test-Case 4</p> <pre><code>*  Configure DUT to match on IPv6inIP protocol (protocol number 41 in the outer IPv4 header) with specific \n   outer IPv4 source address \"198.18.0.1\" and punt it to the network-instance VRF-10. \n   All other traffic should be punted to the Default VRF. These will be, IPv6inIP without source as \n   \"198.18.0.1\", native IPv4, native IPv6 and IPinIP (protocol 4 in the outer IPv4 header) traffic \n   with and without \"198.18.0.1\" as source.\n\n*   Start flows, Flow#2, Flow#4, Flow#6, Flow#7, Flow#9 and Flow#10 and validate packet forwarding. Drop of any \n    flows is considered as a failure.\n</code></pre> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/base_vrf_selection/#flows","title":"Flows","text":"<ul> <li> <p>IPinIP</p> <pre><code>*   Flow#1: IPinIP with outer source as not \"198.18.0.1\" and outer destination as ATE-DEST-IPv4-VLAN10\n*   Flow#2: IPinIP with outer source as not \"198.18.0.1\" and outer destination as ATE-DEST-IPv4-VLAN20\n*   Flow#3: IPinIP with outer source as \"198.18.0.1\" and outer destination as ATE-DEST-IPv4-VLAN10\n*   Flow#4: IPinIP with outer source as \"198.18.0.1\" and outer destination as ATE-DEST-IPv4-VLAN20\n</code></pre> </li> <li> <p>IPv6inIP</p> <pre><code>*   Flow#5: IPv6inIP with outer source as not \"198.18.0.1\" and outer destination as ATE-DEST-IPv4-VLAN10\n*   Flow#6: IPv6inIP with outer source as not \"198.18.0.1\" and outer destination as ATE-DEST-IPv4-VLAN20\n*   Flow#7: IPv6inIP with outer source as \"198.18.0.1\" and outer destination as ATE-DEST-IPv4-VLAN10\n*   Flow#8: IPv6inIP with outer source as \"198.18.0.1\" and outer destination as ATE-DEST-IPv4-VLAN20\n</code></pre> </li> <li> <p>Native IPv4</p> <pre><code>*   Flow#9: Native IPv4 flow with any source address and destination as ATE-DEST-IPv4-VLAN20\n</code></pre> </li> <li> <p>Native IPv6</p> <pre><code>*   Flow#10: Native IPv6 flow with any source address and destination as ATE-DEST-IPv6-VLAN20\n</code></pre> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/","title":"RT-3.2: Multiple  Rules for VRF Selection","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/#summary","title":"Summary","text":"<p>Ensure that multiple protocol and dscp based VRF selection rules are matched correctly.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/#procedure","title":"Procedure","text":"<p>Configure DUT with 1 input interface connected to ATE port-1, and a second interface (output) connected to ATE port-2 with VLAN-based subinterfaces, with the following assignments: </p> <ul> <li>network-instance \u201c10\u201d corresponding to VLAN 10, default route via VLAN 10 subinterface. </li> <li>network-instance \u201c20\u201d corresponding to VLAN 20, default route via VLAN 20 subinterface. </li> <li>network-instance \u201c30\u201d corresponding to VLAN 30, default route via VLAN 30 subinterface. </li> </ul> <p>Configure DUT with the following rules and determine measurement: </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/#case-1","title":"Case #1:","text":"<ul> <li> <p>Rules: </p> <ul> <li>Protocol IPinIP, DSCP 10 to network-instance 10 </li> <li>Protocol IPinIP, DSCP 20 to network-instance 20 </li> <li>Protocol IPinIP, DSCP 30 to network-instance 30 </li> </ul> </li> </ul> <p>Ensure packets with only expected DSCPs reach each egress port. </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/#case-2","title":"Case #2:","text":"<ul> <li> <p>Rules: </p> <ul> <li>Protocol IPinIP, DSCP 10, 11, 12 to network-instance 10 </li> <li>Protocol IPinIP, DSCP 20, 21, 22 to network-instance 20 </li> <li>Protocol IPinIP, DSCP 30, 31, 32 to network-instance 30 </li> </ul> </li> </ul> <p>Ensure packets with only expected DSCPs reach each egress port. </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/#case-3","title":"Case #3:","text":"<ul> <li> <p>Rules: </p> <ul> <li>Protocol IPinIP, DSCP 10, 11, 12 to network-instance 10 </li> <li>Protocol IPinIP, DSCP 10, 11, 12 to network-instance 20 </li> </ul> </li> </ul> <p>It's ok that some NOS does not support this config (duplicated matching conditions) and rejects it. If the DUT does accept the config, ensure that the first matching take precedence (packets are only received in network-instance 10).</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/#case-4","title":"Case #4:","text":"<ul> <li>Rules: <ul> <li>Protocol IPinIP to network-instance 10 </li> <li>Protocol IPinIP, DSCP 20 to network-instance 20 </li> </ul> </li> </ul> <p>Ensure that unspecified fields are wildcard and IPinIP packets are only received at VLAN 10 subinterface. </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/config/type</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/policy-id</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/sequence-id</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp-set</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/network-instance</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-id</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-vrf-selection-policy</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/policy/policy_vrf_selection/otg_tests/protocol_dscp_rules_for_vrf_selection_test/#paths","title":"Paths","text":"<ul> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4</li> <li>/openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-vrf-selection-policy </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/replay/tests/diff_command_trees/","title":"Replay-1.1: Record/replay diff command trees test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/replay/tests/diff_command_trees/#summary","title":"Summary","text":"<p>This is an example record/replay test. It is meant to reproduce a \"couldn't diff the command trees\" error when applying certain gNMI config on Arista devices.</p> <p>At this time, no vendor is expected to run this test.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/replay/tests/presession_test/","title":"Replay-1.0: Record/replay presession test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/replay/tests/presession_test/#summary","title":"Summary","text":"<p>This is an example record/replay test. At this time, no vendor is expected to run this test.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/security/aaa/kne_tests/tls_authentication_over_grpc_test/","title":"SEC-3.1: Authentication","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/security/aaa/kne_tests/tls_authentication_over_grpc_test/#summary","title":"Summary","text":"<p>Ensure that user-name/password based authentication is performed at SSH/console and gRPC connections.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/security/aaa/kne_tests/tls_authentication_over_grpc_test/#procedure","title":"Procedure","text":"<ul> <li>For SSH/console<ul> <li>Configure user login/password through CLI, and ensure they are honored     for SSH over management port as discussed in the previous section.</li> <li>Ensure that the same login/password credentials are also honored from     the console as discussed in the previous section.</li> </ul> </li> <li>For gRPC layer<ul> <li>TODO: Set the user and password using AAA CLI on the device, configured     to authenticate using TACACS+ with a fallback of the local database.</li> <li>Use the username/password in the metadata of all gNMI requests as     explained in Openconfig gNMI authentication.<ul> <li>TODO: if SPIFFE-id comes in before PVT, test with SPIFFE-id.     SPIFFE-id will carry the username in X.509 certificate as opposed to     metadata.</li> <li>Ensure gNMI set/get requests are accepted only with the correct     username/password.</li> <li>Ensure gNMI set/get requests are denied with incorrect login or     incorrect password.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/security/aaa/kne_tests/tls_authentication_over_grpc_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/security/aaa/kne_tests/tls_authentication_over_grpc_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/security/aaa/kne_tests/tls_authentication_over_grpc_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/security/aaa/kne_tests/tls_authentication_over_grpc_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>FFF</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/ate_tests/drained_configuration_convergence_time/","title":"gNMI-1.3: Benchmarking: Drained Configuration Convergence Time","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/ate_tests/drained_configuration_convergence_time/#summary","title":"Summary","text":"<p>Measure performance of drained configuration being applied.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/ate_tests/drained_configuration_convergence_time/#procedure","title":"Procedure","text":"<p>Configure DUT with maximum number of IS-IS adjacencies, and BGP peers - with physical interfaces between ATE and DUT for IS-IS peers.</p> <p>First port is used as ingress port to send routes from ATE to DUT.</p> <p>For each of the following configurations, generate complete device configuration and measure time for the operation to complete (as defined in the case):     *   TODO: IS-IS overload:         *   At t=0, send Set to DUT marking IS-IS overload bit.         *   Measure time between t=0 and all IS-IS sessions on ATE to             report DUT as overloaded.     *   IS-IS metric change:         *   At t=0, send Set to DUT marking IS-IS metric as changed for             all IS-IS interfaces.         *   Measure time between t=0 and all IS-IS sessions on ATE to             report changed metric.     *   BGP AS_PATH prepend:         *   At t=0, send Set to DUT changing BGP policy for each session             to prepend AS_PATH.         *   Measure time between t=0 and all BGP received routes on ATE             to report change in as path.     *   TODO: BGP MED manipulation.          *   At t=0, send Set to DUT changing BGP policy for each session to             set MED to non-default value.         *   Measure time between t=0 and all BGP received routes on ATE to             report changed metric.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/ate_tests/drained_configuration_convergence_time/#config-parameter-coverage","title":"Config Parameter coverage","text":"<pre><code>*   BGP\n    *   /routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med\n    *   /routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n\n    *   /routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/as-number\n\n*   ISIS\n    *   /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/metric\n    *   /network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/ate_tests/drained_configuration_convergence_time/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<pre><code>*   ISIS\n    *   /interfaces/interfaces/levels/level/adjacencies/adjacency/state/adjacency-state\n*   BGP    \n    *   /afi-safis/afi-safi/state/prefixes/sent\n    *   /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/tests/full_configuration_replace_test/","title":"gNMI-1.2: Benchmarking: Full Configuration Replace","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/tests/full_configuration_replace_test/#summary","title":"Summary","text":"<p>Measure performance of full configuration replace.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/tests/full_configuration_replace_test/#procedure","title":"Procedure","text":"<p>Configure DUT with:  - The number of interfaces needed for the benchmarking test.  - One BGP peer per interface.  - One ISIS adjacency per interface. Measure time required for Set operation to complete.  Modify descriptions of a subset of interfaces within the system. Measure time for Set to complete.</p> <p>Notes: This test does not measure the time to an entirely converged state, only to completion of the gNMI update.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/tests/full_configuration_replace_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/gnmi/benchmarking/tests/full_configuration_replace_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/health/tests/system_generic_health_check/","title":"Health-1.1: Generic Health Check","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/health/tests/system_generic_health_check/#summary","title":"Summary","text":"<p>Generic Health Check</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/health/tests/system_generic_health_check/#procedure","title":"Procedure","text":"<ul> <li>Capture the generic health check of the DUT, used modularly in pre/post and during various different tests:<ul> <li>No system/kernel/process/component coredumps</li> <li>No high CPU spike or usage on control or forwarding plane</li> <li>No high memory utilization or usage on control or forwarding plane</li> <li>No processes/daemons high CPU/Memory utilization</li> <li>No generic drop counters<ul> <li>QUEUE drops<ul> <li>Interfaces</li> <li>VOQ</li> </ul> </li> <li>Fabric drops</li> <li>ASIC drops</li> </ul> </li> <li>No flow control frames tx/rx</li> <li>No CRC or Layer 1 errors on interfaces</li> <li>No config commit errors</li> <li>No system level alarms</li> <li>In spec hardware should be in proper state<ul> <li>No hardware errors</li> <li>Major Alarms</li> </ul> </li> <li>No HW component or SW processes crash</li> </ul> </li> <li>TODO:<ul> <li>DDOS/COPP violations</li> <li>No memory leaks</li> <li>No system errors or logs</li> <li>No CRC or Layer 1 errors fabric links</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/health/tests/system_generic_health_check/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/health/tests/system_generic_health_check/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/components/component/state/oper-status</li> <li>/components/component/cpu/utilization/state/avg</li> <li>/components/component/state/memory</li> <li>/system/processes/process/state/cpu-utilization</li> <li>/system/processes/process/state/memory-utilization</li> <li>/qos/interfaces/interface/input/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts</li> <li>/interfaces/interface/state/counters/in-discards</li> <li>/interfaces/interface/state/counters/in-errors</li> <li>/interfaces/interface/state/counters/in-multicast-pkts</li> <li>/interfaces/interface/state/counters/in-unknown-protos</li> <li>/interfaces/interface/state/counters/out-discards</li> <li>/interfaces/interface/state/counters/out-errors</li> <li>/interfaces/interface/state/oper-status</li> <li>/interfaces/interface/state/admin-status</li> <li>/interfaces/interface/state/counters/out-octets</li> <li>/interfaces/interface/state/description</li> <li>/interfaces/interface/state/type</li> <li>/interfaces/interface/state/counters/out-octets/in-fcs-errors</li> <li>/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards</li> <li>/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors</li> <li>/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos</li> <li>/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards</li> <li>/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors</li> <li>/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets/in-fcs-errors</li> <li>/interfaces/interface/ethernet/state/counters/in-mac-pause-frames</li> <li>/interfaces/interface/ethernet/state/counters/out-mac-pause-frames</li> <li>/interfaces/interface/ethernet/state/counters/in-crc-errors</li> <li>/interfaces/interface/ethernet/state/counters/in-block-errors</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription</li> <li>/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/system/health/tests/system_generic_health_check/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_acl_based_test/","title":"TUN-1.9: GRE inner packet DSCP","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_acl_based_test/#summary","title":"Summary","text":"<p>Verify the DSCP value of original packet header after GRE acl based tunnel encapsulation.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_acl_based_test/#procedure","title":"Procedure","text":"<ul> <li>Configure DUT with ingress and egress routed interfaces.</li> <li>Configure acl based tunnel configuration with action as encapsulation.</li> <li>Attach the filter on ingress interface.</li> <li>Configure the static route for the tunnel end point destination.</li> <li>Capture packet on ATE on the recieving end(port-2).</li> <li>verify dscp value of original packet after encapsulation.</li> <li>verify that no traffic drops in all flows.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_acl_based_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name</li> <li>/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-type</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_acl_based_test/#validation-coverage","title":"Validation coverage","text":"<ul> <li>No packet drop should be oberserved.</li> <li>Capture the packet on recieving end and verify the orginal DSCP value. Orginal value should not be altered.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_ipv6_gre_encapsulation_test/","title":"TUN-1.4: Interface based IPv6 GRE Encapsulation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_ipv6_gre_encapsulation_test/#summary","title":"Summary","text":"<p>Validate Interface based Ipv6 GRE Tunnel Config.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_ipv6_gre_encapsulation_test/#procedure","title":"Procedure","text":"<ul> <li>Validate the GRE configuration</li> <li>GRE Tunnel interfaces configuration options<ul> <li>Tunnel source</li> <li>Tunnel source should be able to configure with unnumbered interface address</li> <li>Tunnel Destination</li> <li>Directly on Tunnel interface or Tunnel Group</li> </ul> </li> <li>Configure such 32 tunnel interfaces</li> <li>Configure static route with IPv6 NH pointing to Tunnel interfaces</li> <li>Send 1000 IPv6 flows from tester on ATE-PORT1 connected to DUT-PORT1</li> <li>Enable the packet capture on ATE ingress port to verify the GRE header of encapped traffic</li> <li>Verify the tunnel interfaces counters to confirm the traffic encapsulation</li> <li>After encapsulation, traffic should be load balanced/hash to all available L3 ECMP or LAG or combination of both features</li> <li>Validate system for:</li> <li>TODO: Health-1.1</li> <li>TODO: No feature related error or drop counters incrementing, discussion with vendors required to highlight additional fields to monitor based on implementation and architecture</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_ipv6_gre_encapsulation_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>Prefix: wbb://software/interfaces/tunnel/</li> <li>Parameters:</li> <li>gre/</li> <li>gre/decap-group/</li> <li>gre/dest/</li> <li>gre/dest/address/</li> <li>gre/dest/address/ipv6/</li> <li>gre/dest/nexthop-group/</li> <li>gre/source/</li> <li>gre/source/address/</li> <li>gre/source/address/ipv6/</li> <li>gre/source/interface/</li> <li>Prefix:</li> <li>wbb://software/routing/nexthop-group/</li> <li> <p>wbb://software/routing/nexthop-group/gre/</p> </li> <li> <p>Prefix:</p> </li> <li>wbb://software/routing/static/</li> <li>Parameters:</li> <li>ipv6/</li> <li>ipv6/admin-dist/</li> <li>ipv6/nexthop/</li> <li>ipv6/nexthop/null/</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_ipv6_gre_encapsulation_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>Prefix:</li> <li>wbb://software/interfaces/tunnel/</li> <li>wbb://software/interfaces/tunnel/gre/</li> <li>Needs to define</li> <li>ST for Tunnel counters</li> <li>ST for packet capture on DUT and ATE to read:</li> <li>Packet metadata</li> <li>IP Source</li> <li>IP Destination</li> <li>IP Protocol number</li> <li>state/counters/in-pkts</li> <li>state/counters/in-octets</li> <li>state/counters/in-error-pkts</li> <li>state/counters/in-forwarded-pkts</li> <li>state/counters/in-forwarded-octets</li> <li>state/counters/in-discarded-pkts</li> <li>state/counters/out-pkts</li> <li>state/counters/out-octets</li> <li>state/counters/out-error-pkts</li> <li>state/counters/out-forwarded-pkts</li> <li>state/counters/out-forwarded-octets</li> <li>state/counters/out-discarded-pkt</li> <li>Fragmentation and assembly counters Filter counters Output to display the traffic is spread across the different tunnel subnet ranges/NH groups/Interfaces</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/","title":"TUN-1.6: Tunnel End Point Resize for Ecapsulation - Interface Based GRE Tunnel","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#summary","title":"Summary","text":"<ul> <li>Tunnel End Point Resize test for Interface Based GRE Tunnels to ensure inflight increase or decrease in tunnel endpoints do not cause packet drops for encap function.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#topology","title":"Topology","text":"<pre><code>graph LR; \nA[OTG:Port1] --&gt; B[Port1:DUT:Port2\\lag1];\nB --&gt; C[Port2\\lag1:OTG];\nD[DUT:Port3\\lag1] --&gt; E[Port3\\lag1:OTG];\nf[DUT:Port4\\lag2] --&gt; G[Port4\\lag2:OTG];\nH[DUT:Port5\\lag2] --&gt; I[Port5\\lag2:OTG];\nJ[DUT:Port6] --&gt; K[Port6:OTG];\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#subtest-1-setup-tunnels-as-per-requirements","title":"Subtest-1: Setup Tunnels as per requirements","text":"<ol> <li>The test should configure 32 GRE tunnel interfaces per address family and each should be configured with different /32 and /128 tunnel destination prefixes of the same /27 and /64 prefix range. Each of these tunnel interfaces should use the loopback address as the source-address for their respective address-families. Hence, we will have total 64xtunnel interfaces, 32 per address-family as source and destination addresses of the tunnels.</li> <li>Add static routes to provide reachability for the /27 IPv4 and /64 IPv6 tunnel destination prefixes in bullet#1 above to point at lag1, lag2 and port6 for ECMP.</li> <li>Configure dualstack IPv4 and an IPv6 addresses for each of the 64xtunnel interfaces. The IP addresses can be of /30 and /127 prefix-lengths.</li> <li>Pick 2 different /24 IPv4 and /64 IPv6 subnets each to emulate destination of payload traffic to be tunneled. Note: This is for the destination prefixes of the flows generated by OTG:Port1.</li> <li>Add 128 different v4 and v6 static routes (64 for each address-family) for the 2 sets of /24 IPv4 and /64 IPv6 payload prefixes in bullet#4 above. The static routes should be such that, the first set of 1x /24 IPv4 and 1x /64 IPv6 prefixes should point at the 32x tunnel interfaces configured w/ IPv4 tunnel destination and the second set of 1x /24 IPv4 and 1x /64 IPv6 prefixes should point at the 32x tunnel interfaces w/ IPv6 tunnel destinations.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#verification","title":"Verification:","text":"<ul> <li>Ensure all tunnel interfaces are up</li> <li>Ensure all LAG and singleton interfaces are up</li> <li>Run Health-1.1. checks</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#subtest-2-gather-baseline-stats-by-passing-traffic","title":"Subtest-2: Gather baseline stats by passing traffic","text":"<ul> <li>Start with the configuration in Subtest-1 above.</li> <li>The test should send 2000 IPv4 and 2000 1Pv6 flows from the ATE:Port1 to the \"tunnel payload destination prefixes\". These flows should equally be split between the 2x /24 IPv4 and 2x /64 IPv6 destination prefixes mentioned in Subtest-1 bullet#4 above. The flows should use variations in the following,         * Source IP address         * Source Port         * Destination IP adresses.         * Destination Port         * Payload protocol</li> <li>Incoming traffic on DUT:PORT1 should be load shared across all 64 Tunnel interfaces for encapsulation and then routed out the combination of lag and singleton interfaces, i.e. lag1, lag2 and Port6.</li> <li>Follow all the \"verifications\" steps in [*] below</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#subtest-3-removal-of-static-routes-to-prevent-using-some-of-the-tunnels","title":"Subtest-3: Removal of static routes to prevent using some of the tunnels","text":"<ul> <li>Start with the state in Subtest-2 above with active traffic flow.</li> <li>Reduce the number of Tunnel interfaces, e.g. from 32 to 16 for each of the tunnel destination group by address-family:         * If the static routes are used to forward traffic to tunnel, please disable or delete the static routes in this test to simulate the reduction in available paths.</li> <li>Incoming traffic on DUT:PORT1 should now be load shared across all remaining 16 Tunnel interfaces per tunnel-destination by address-family.</li> <li>Follow all the verifications steps in [*] below.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#subtest-4-restore-static-routes-to-start-using-all-32-tunnels","title":"Subtest-4: Restore static routes to start using all 32 tunnels","text":"<ul> <li>Start from the condition in Subtest-3 above with inflight traffic from OTG:Port1.</li> <li>Increase number of Tunnel interfaces, e.g. From 16 to 32 per tunnel-destination by address-family.</li> <li>Incoming traffic on DUT:PORT1 should now be load shared across all 32 Tunnel interfaces per tunnel-destination by address-family. Follow all the verifications steps in [*] below</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#subtest-5-gnmi-configuration-push-test-to-validate-tunnel-configuration-as-a-single-atomic-operation","title":"Subtest-5: gNMI configuration push test to validate tunnel configuration as a single atomic operation","text":"<ul> <li>Start w/o any tunnel interface and corresponding static routes configuration </li> <li>Use a single gNMI.Replace operation to configure 32 tunnel interfaces and corresponding routes in a single request.</li> <li>Start traffic. Follow verification steps in [*] below to confirm success</li> <li>While the traffic flow is happening, make another gNMI.Replace operation for just 16 tunnels and corresponding static routes</li> <li>Follow the verification steps in [*] below for success.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#verification-steps","title":"[*] Verification steps","text":"<ul> <li>Verify the next hop counters for packets being diverted or sent for encapsulation. Test should fail if drops recorded.</li> <li>Verify the tunnel interfaces counters to confirm traffic encapsulation. Test should fail if the counts dont match the original count of packets sent by OTG</li> <li>Verify the tunnel interfaces for optimal load balancing of traffic/flow. Acceptable deviation is &lt;=3%</li> <li>Verify the tunnel interfaces for optimal load balancing of traffic/flow. Acceptable deviation is &lt;=3%. This is true for tunnel destinations of both address families.</li> <li>Validate system for:         * Health-1.1. checks.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>TODO: OpenConfig definition required for Tunnel protocol under interfaces/interfaces/interface/tunnel/ as GRE, IP-IP, GUE etc.   *   interfaces/interfaces/interface/tunnel/config/dest/  *   interfaces/interfaces/interface/tunnel/config/src/  *   interfaces/interfaces/interface/tunnel/ipv4/addresses/address/config/ip  *   interfaces/interfaces/interface/tunnel/ipv4/addresses/address/config/prefix-length  *   interfaces/interfaces/interface/tunnel/ipv6/addresses/address/config/ip  *   interfaces/interfaces/interface/tunnel/ipv6/addresses/address/config/prefix-length</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/experimental/tunnel/otg_tests/tunnel_interface_based_resize_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/interfaces/interface/tunnel/state/src</li> <li>/interfaces/interface/tunnel/state/dst</li> <li>/interfaces/interface/tunnel/ipv4/addresses/address/state/ip</li> <li>/interfaces/interface/tunnel/ipv4/addresses/address/state/prefix-length</li> <li>/interfaces/interface/tunnel/ipv6/addresses/address/state/ip</li> <li>/interfaces/interface/tunnel/ipv6/addresses/address/state/prefix-length</li> <li>Following stats for lag and singleton interfaces as well as for tunnel/ipv4/state/ and tunnel/ipv6/state/         *   state/counters/in-pkts          *   state/counters/in-octets          *   state/counters/out-pkts          *   state/counters/out-octets          *   state/counters/in-error-pkts          *   state/counters/in-forwarded-pkts          *   state/counters/in-forwarded-octets          *   state/counters/in-discarded-pkts          *   state/counters/out-error-pkts          *   state/counters/out-forwarded-pkts          *   state/counters/out-forwarded-octets          *   state/counters/out-discarded-pkts</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/ate_tests/telemetry_port_speed_test/","title":"gNMI-1.5: Telemetry: Port Speed Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/ate_tests/telemetry_port_speed_test/#summary","title":"Summary","text":"<p>Validate port speed telemetry used by controller infrastructure.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/ate_tests/telemetry_port_speed_test/#procedure","title":"Procedure","text":"<ul> <li>For each port speed to be supported by the device:<ul> <li>Connect single port to ATE, validate that the port speed reported in     telemetry is the expected port speed.</li> <li>Turn port down at ATE, validate that operational status of the port is     reported as down.</li> </ul> </li> <li>For each port speed to be supported by the device:<ul> <li>Connect N ports between ATE and DUT configured as part of a LACP bundle.     Validate /interfaces/interface/aggregation/state/lag-speed is reported     as N*port speed.</li> <li>Disable each port at ATE and determine that the effective speed is     reduced by the expected amount.</li> <li>Turn ports sequentially up at the ATE, and determine that the effective     speed is increased as expected.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/ate_tests/telemetry_port_speed_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>TBD</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/ate_tests/telemetry_port_speed_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<p>/interfaces/interface/state/oper-status /interfaces/interface/ethernet/state/port-speed /interfaces/interface/aggregation/state/lag-speed</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/ate_tests/telemetry_port_speed_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>No new protocol coverage.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/ate_tests/telemetry_port_speed_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_basic_check_test/","title":"gNMI-1.10: Telemetry: Basic Check","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_basic_check_test/#summary","title":"Summary","text":"<p>Validate basic telemetry paths required.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_basic_check_test/#procedure","title":"Procedure","text":"<p>In the automated ondatra test, verify the presence of the telemetry paths of the following features:</p> <ul> <li> <p>Ethernet interface</p> <ul> <li>Check the telemetry port-speed exists with correct speed.<ul> <li>/interfaces/interfaces/interface/ethernet/state/port-speed </li> </ul> </li> <li>Check the telemetry mac-address with correct format.<ul> <li>/interfaces/interfaces/interface/ethernet/state/mac-address</li> </ul> </li> </ul> </li> <li> <p>Interface status</p> <ul> <li>Check admin-status and oper-status exist and correct.<ul> <li>/interfaces/interfaces/interface/state/admin-status</li> <li>/interfaces/interfaces/interface/state/oper-status</li> </ul> </li> </ul> </li> <li> <p>Interface physical channel</p> <ul> <li>Check interface physical-channel exists.<ul> <li>/interfaces/interface/state/physical-channel</li> </ul> </li> </ul> </li> <li> <p>Interface status change</p> <ul> <li>Check admin-status and oper-status are correct after interface flapping.<ul> <li>/interfaces/interfaces/interface/state/admin-status</li> <li>/interfaces/interfaces/interface/state/oper-status</li> </ul> </li> </ul> </li> <li> <p>Interface hardware-port</p> <ul> <li>Check hardware-port exists<ul> <li>/interfaces/interfaces/interface/state/hardware-port</li> </ul> </li> <li>Check that [hardware-port leaf]  (https://github.com/openconfig/public/blob/0c9fb6b0ab96fdd96bb9e88365abe11e51a11e62/release/models/platform/openconfig-platform-port.yang#L306) exists as a component in the Device's component tree and has a type as PORT<ul> <li>For example,  /components/component[name=]/state/type == oc.PlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS_PORT <li>Use the parent leaf of the hardware-port component to traverse the component tree to verify an ancestor of type CHASSIS exists.   Components in between the PORT and the CHASSIS  may vary in quantity and type.</li> <li> <p>Interface counters</p> <ul> <li>Check the presence of the following interface counters.<ul> <li>/interfaces/interface/state/counters/in-octets</li> <li>/interfaces/interface/state/counters/in-unicast-pkts</li> <li>/interfaces/interface/state/counters/in-broadcast-pkts</li> <li>/interfaces/interface/state/counters/in-multicast-pkts</li> <li>/interfaces/interface/state/counters/in-discards</li> <li>/interfaces/interface/state/counters/in-errors</li> <li>/interfaces/interface/state/counters/in-fcs-errors</li> <li>/interfaces/interface/state/counters/out-unicast-pkts</li> <li>/interfaces/interface/state/counters/out-broadcast-pkts</li> <li>/interfaces/interface/state/counters/out-multicast-pkts</li> <li>/interfaces/interface/state/counters/out-octets</li> <li>/interfaces/interface/state/counters/out-discards</li> <li>/interfaces/interface/state/counters/out-errors</li> </ul> </li> </ul> </li> <li> <p>Send the traffic over the DUT.</p> <ul> <li>Check some counters are updated correctly.</li> </ul> </li> <li> <p>Component</p> <ul> <li>Check the following component paths exists<ul> <li>/components/component/integrated-circuit/state/node-id</li> <li>/components/component/state/parent</li> </ul> </li> </ul> </li> <li> <p>CPU component state</p> <ul> <li>Check the following component paths exists<ul> <li>(type=CPU) /components/component/state/description</li> <li>(type=CPU) /components/component/state/mfg-name</li> </ul> </li> </ul> </li> <li> <p>Controller card last-reboot-time and reason</p> <ul> <li>Check the following component paths exists<ul> <li>(type=CONTROLLER_CARD)     /components/component[name=]/state/last-reboot-time <li>(type=CONTROLLER_CARD)     /components/component[name=]/state/last-reboot-reason <li> <p>Active Controller Card Software version</p> <ul> <li>Check the following component path and value exists.<ul> <li>/system/state/software-version</li> </ul> </li> </ul> </li> <li> <p>Controller Card Software versions</p> <ul> <li>Check the following component path and value exists for component type     <code>OPERATING_SYSTEM</code> that is present/installed, and whose parent component type is <code>CONTROLLER_CARD</code>.<ul> <li>/components/component/state/software-version</li> </ul> </li> </ul> </li> <li> <p>LACP</p> <ul> <li>Check the bundle interface member path and LACP counters and status.<ul> <li>/lacp/interfaces/interface/members/member</li> </ul> </li> </ul> </li> <li> <p>AFT</p> <ul> <li>Check the following AFT path exists.<ul> <li>TODO: /network-instances/network-instance/afts</li> </ul> </li> </ul> </li> <li> <p>P4RT</p> <ul> <li>Enable p4-runtime.</li> <li>configure interface port ID with minimum and maximum uint32 values.</li> <li>Check the following path exists with correct interface ID.<ul> <li>/interfaces/interfaces/state/id</li> </ul> </li> <li>configure FAP device ID with minimum and maximum uint64 values.</li> <li>Check the following path exists with correct node ID.<ul> <li>/components/component/integrated-circuit/state/node-id</li> </ul> </li> </ul> </li>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_basic_check_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No configuration coverage.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_basic_check_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/interfaces/interface/state/admin-status</li> <li>/lacp/interfaces/interface/members/member</li> <li>/interfaces/interface/ethernet/state/mac-address</li> <li>/interfaces/interface/state/hardware-port /interfaces/interface/state/id</li> <li>/interfaces/interface/state/oper-status</li> <li>/interfaces/interface/ethernet/state/port-speed</li> <li>/interfaces/interface/state/physical-channel</li> <li>/components/component/integrated-circuit/state/node-id</li> <li>/components/component/state/parent</li> <li>/interfaces/interface/state/counters/in-octets</li> <li>/interfaces/interface/state/counters/in-unicast-pkts</li> <li>/interfaces/interface/state/counters/in-broadcast-pkts</li> <li>/interfaces/interface/state/counters/in-multicast-pkts</li> <li>/interfaces/interface/state/counters/in-discards</li> <li>/interfaces/interface/state/counters/in-errors</li> <li>/interfaces/interface/state/counters/in-fcs-errors</li> <li>/interfaces/interface/state/counters/out-unicast-pkts</li> <li>/interfaces/interface/state/counters/out-broadcast-pkts</li> <li>/interfaces/interface/state/counters/out-multicast-pkts</li> <li>/interfaces/interface/state/counters/out-octets</li> <li>/interfaces/interface/state/counters/out-discards</li> <li>/interfaces/interface/state/counters/out-errors</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_basic_check_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_basic_check_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_interface_packet_counters_test/","title":"gNMI-1.11: Telemetry: Interface Packet Counters","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_interface_packet_counters_test/#summary","title":"Summary","text":"<p>Validate interfaces counters including both IPv4 and IPv6 counters.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_interface_packet_counters_test/#procedure","title":"Procedure","text":"<p>In the automated ondatra test, verify the presence of the telemetry paths of the following features:</p> <ul> <li> <p>Configure IPv4 and IPv6 addresses under subinterface:</p> <ul> <li>/interfaces/interface/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled</li> </ul> <p>Validate that IPv4 and IPv6 addresses are enabled:</p> <ul> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/enabled</li> </ul> </li> <li> <p>For the parent interface counters in-pkts and out-pkts:</p> <p>Check the presence of packet counter paths and monitor counters every 30 seconds:</p> <ul> <li>/interfaces/interface[name=]/state/counters/in-pkts <li>/interfaces/interface[name=]/state/counters/out-pkts <li> <p>Subinterfaces counters:</p> <p>Check the presence of packet counter paths:</p> <ul> <li>TODO:     /interfaces/interface[name=]/subinterfaces/subinterface[index=]/ipv4/state/counters/in-pkts <li>TODO:     /interfaces/interface[name=]/subinterfaces/subinterface[index=]/ipv4/state/counters/out-pkts <li>TODO:     /interfaces/interface[name=]/subinterfaces/subinterface[index=]/ipv6/state/counters/in-discarded-pkts <li>TODO:     /interfaces/interface[name=]/subinterfaces/subinterface[index=]/ipv6/state/counters/out-discarded-pkts <li> <p>Ethernet interface counters</p> <p>Check the presence of counter path including in-maxsize-exceeded:</p> <ul> <li>TODO: /interfaces/interface/ethernet/state/counters/in-maxsize-exceeded</li> <li>/interfaces/interface/ethernet/state/counters/in-mac-pause-frames</li> <li>/interfaces/interface/ethernet/state/counters/out-mac-pause-frames</li> <li>/interfaces/interface/ethernet/state/counters/in-crc-errors</li> <li>/interfaces/interface/ethernet/state/counters/in-fragment-frames</li> <li>/interfaces/interface/ethernet/state/counters/in-jabber-frames</li> </ul> </li> <li> <p>Interface CPU and management</p> <p>Check the presence of CPU and management paths:</p> <ul> <li>TODO: /interfaces/interface/state/cpu</li> <li>TODO: /interfaces/interface/state/management</li> </ul> </li>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_interface_packet_counters_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/interfaces/interface/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_interface_packet_counters_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/interfaces/interface/state/counters/in-pkts</li> <li> <p>/interfaces/interface/state/counters/out-pkts</p> </li> <li> <p>/interfaces/interface/subinterfaces/subinterface]/ipv4/state/counters/in-pkts</p> </li> <li> <p>/interfaces/interface/subinterfaces/subinterface]/ipv4/state/counters/out-pkts</p> </li> <li> <p>/interfaces/interface/subinterfaces/subinterface]/ipv6/state/counters/in-pkts</p> </li> <li> <p>/interfaces/interface/subinterfaces/subinterface]/ipv6/state/counters/out-pkts</p> </li> <li> <p>/interfaces/interface/subinterfaces/subinterface]/ipv6/state/counters/in-discarded-pkts</p> </li> <li> <p>/interfaces/interface/subinterfaces/subinterface]/ipv6/state/counters/out-discarded-pkts</p> </li> <li> <p>/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded</p> </li> <li> <p>/interfaces/interface/ethernet/state/counters/in-mac-pause-frames</p> </li> <li> <p>/interfaces/interface/ethernet/state/counters/out-mac-pause-frames</p> </li> <li> <p>/interfaces/interface/ethernet/state/counters/in-crc-errors</p> </li> <li> <p>/interfaces/interface/ethernet/state/counters/in-fragment-frames</p> </li> <li> <p>/interfaces/interface/ethernet/state/counters/in-jabber-frames</p> </li> <li> <p>/interfaces/interface/state/cpu</p> </li> <li> <p>/interfaces/interface/state/management</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_interface_packet_counters_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>No coverage</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/otg_tests/telemetry_interface_packet_counters_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/subscribe/tests/gnmi_subscriptionlist_test/","title":"GNMI-2: gnmi_subscriptionlist_test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/subscribe/tests/gnmi_subscriptionlist_test/#summary","title":"Summary","text":"<p>This is to test for gNMI <code>Subscription</code> to multiple paths with different <code>SubscriptionMode</code> in a single <code>SubscriptionRequest</code> message using the <code>Subscriptionlist</code> field. Goal here is to,   * Ensure that the NOS supports \"Subscriptionlist\" field with multiple <code>Subscription</code> messages and also supports the desired <code>Subscriptionmode</code> per path in each <code>Subscription</code> message.   * The tests also check if the DUT is responding back everytime with a <code>SubscriptionResponse</code> message that has the <code>sync_response</code> field set to <code>true</code></p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/subscribe/tests/gnmi_subscriptionlist_test/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/subscribe/tests/gnmi_subscriptionlist_test/#gnmi-21-verify-single-subscription-request-with-a-subscriptionlist-and-different-subscriptionmodes","title":"GNMI-2.1: Verify single subscription request with a Subscriptionlist and different SubscriptionModes:","text":"<ul> <li>Send a single <code>SubscribeRequest</code> message to the DUT with a SubcriptionList and SubscriptionMode matching the \"Telemetry Parameter Coverage\" section below. Use <code>Stream</code> mode for the <code>SubcribeRequest</code>.</li> <li>Ensure that the implementation successfully allows subscription to all the paths mentioned below and a <code>SubscribeResponse</code> message is received by the client with the <code>sync_reponse</code> field set to <code>true</code>. The RPC via which the <code>SubscribeRequest</code> was recieved should eventually be closed by the client.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/subscribe/tests/gnmi_subscriptionlist_test/#gnmi-22-change-subscriptionmodes-in-the-subscription-list-and-verify-receipt-of-sync_response","title":"GNMI-2.2: Change SubscriptionModes in the subscription list and verify receipt of sync_response:","text":"<ul> <li>In the \"Telemetry Parameter coverage\" section below, change the <code>Subscribe</code> message for each of the paths with <code>SubscriptionMode</code> as <code>ON_CHANGE</code> to <code>TARGET_DEFINED</code> and the ones that are <code>TARGET_DEFINED</code> to <code>SAMPLE</code> w/ a sampe_interval of 10secs and send all the subscribe messages in a single <code>SubscribeRequest</code> message to the DUT. Confirm that a <code>SubscribeResponse</code> message is received by the client with the <code>sync_reponse</code> field set to <code>true</code>. The client should then close the RPC session</li> <li>Again, switch the <code>SubscriptionMode</code> in each <code>Subscription</code> message to its original state i.e. from <code>TARGET_DEFINED</code> to <code>ON_CHANGE</code> and from <code>SAMPLE</code> to <code>TARGET_DEFINED</code> and resend the <code>SubscriptionRequest</code> with <code>Mode</code> as <code>STREAM</code>. Confirm that the DUT is responding back to the client with a <code>SubscriptionResponse</code> and the <code>Sync_Response</code> field set to <code>true</code></li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnmi/subscribe/tests/gnmi_subscriptionlist_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>SubscriptionMode: ON_CHANGE<ul> <li>/interfaces/interface/state/admin-status</li> <li>/lacp/interfaces/interface/members/member/interface</li> <li>/interfaces/interface/ethernet/state/macaddress</li> <li>/interfaces/interface/state/hardware-port</li> <li>/interfaces/interface/state/id</li> <li>/interfaces/interface/state/oper-status</li> <li>/interfaces/interface/ethernet/state/port-speed</li> <li>/components/component/integrated-circuit/state/node-id</li> <li>/components/component/state/parent</li> <li>/components/component/state/oper-status</li> <li>/interfaces/interface/state/forwarding-viable</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-ca pacity</li> </ul> </li> <li>SubscriptionMode: TARGET_DEFINED<ul> <li>/interfaces/interface/state/counters/in-unicast-pkts</li> <li>/interfaces/interface/state/counters/in-broadcast-pkts</li> <li>/interfaces/interface/state/counters/in-multicast-pkts</li> <li>/interfaces/interface/state/counters/out-unicast-pkts</li> <li>/interfaces/interface/state/counters/out-broadcast-pkts</li> <li>/interfaces/interface/state/counters/out-multicast-pkts</li> <li>/interfaces/interface/state/counters/in-octets</li> <li>/interfaces/interface/state/counters/out-octets</li> <li>/interfaces/interface/state/counters/in-discards</li> <li>/interfaces/interface/state/counters/out-discards</li> <li>/interfaces/interface/state/counters/in-errors</li> <li>/interfaces/interface/state/counters/out-errors</li> <li>/interfaces/interface/state/counters/in-fcs-errors</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/total\u201d</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/factory_reset/tests/factory_reset_test/","title":"gNOI-6.1: Factory Reset","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/factory_reset/tests/factory_reset_test/#summary","title":"Summary","text":"<p>Performs Factory Reset with and without disk-encryption </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/factory_reset/tests/factory_reset_test/#procedure","title":"Procedure","text":"<ul> <li>Create dummy files in the harddisk of the router using bash dd</li> <li>Checks for disk-encryption status and performs reset on both the scenarios</li> <li>Secure ZTP server should be up and running in the background for the router to boot up with the base config once factory reset command is sent on the box.</li> <li>Send out Factory reset via GNOI Raw API <ul> <li>Wait for the box to boot up via Secure ZTP  <ul> <li>The base config is updated on the box via Secure ZTP  </li> </ul> </li> </ul> </li> <li>Connect to the router and check if the files in the harddisk are removed as a part of verifying Factory reset. </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/factory_reset/tests/factory_reset_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>No new configuration covered.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/os/tests/osinstall/","title":"gNOI-4.1: Software Upgrade","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/os/tests/osinstall/#summary","title":"Summary","text":"<ul> <li>Validate new software can be copied and activated on single and dual supervisors.</li> <li>Validate successful configiuration push to the DUT post OS upgrade.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/os/tests/osinstall/#procedure","title":"Procedure","text":"<ul> <li>gNOI-4.1.1 : OS Install on the primary and secondary controller cards. </li> <li> <p>Install and activate a new software version on primary supervisor:</p> <p>a. Issue gnoi.os.Install rpc to the chassis with InstallRequest.TransferRequest message. The message should set the version to the desired new version image, and standby_supervisor to FALSE.      * Wait for the switch to respond with InstallResponse. Expect it to      return TransferReady.</p> <p>b. Transfer the content by issuing gnoi.os.Install rpc with InstallRequest.transfer_content message.      * Expect it to return InstallResponse with a TransferProgress status      asynchronously at certain intervals.      * TODO: When the expected amount of bytes_received is reported by the      switch, move to the activation step next.</p> <p>c. End the transfer of software by issuing gnoi.os.Install rpc with InstallRequest.TransferEnd message.      * Expect the switch to return InstallResponse with a Validated message. The version in the message should be set to the one which was transferred above.</p> <p>d. Activate the software by issuing gnoi.os.Activate rpc.      * Set the version field of the ActivateRequest message to be the same as the version specified in the TransferRequest message above.      * Set the no_reboot flag to true.      * Set the standby_supervisor to FALSE.</p> <p>Please Note: Some implememtations do configuration verification of the existing configuration in the box before activating the changed OS version. And if the exitsing configuration isn't compatible with the new OS version then the Software activation would fail. This should be considered as a test failure and the test should exit.</p> </li> <li> <p>Install and activate the same new software version on standby supervisor:</p> <p>a. Repeat the above process of TransferRequest. This time set the standby_supervisor to TRUE.      * Expect the switch to return a InstallResponse with a SyncProgress message. The switch should sync the software image from primary SUP to standby.      * Expect the sync to return a value of 100 for percentage_transferred field.      * At the end, expect the switch to return InstallResponse with a Validated message. The version in the message should be set to the one which was transferred above.</p> </li> <li> <p>Activate the software by issuing gnoi.os.Activate rpc as in the case of primary supervisor.</p> <p>a. Set the version field of the ActivateRequest message to be the same as the version specified in the TransferRequest message above.</p> <p>b. Set the no_reboot flag to true.</p> <p>c. Set the standby_supervisor to TRUE this time.</p> </li> <li> <p>Reboot the switch:</p> <p>a. Issue gnoi.system.Reboot as specified in gNOI-3.1: Complete Chassis Reboot.</p> </li> <li> <p>Verify that the supervisor image has moved to the new image:</p> <p>a. Verify that the supervisor has a valid image by issuing gnoi.os.Verify rpc.      * Expect a VerifyResponse with the version field set to the version specified in messages above eventually.      * Verify the standby supervisor version.      * Expect that the VerifyResponse.verify_standby has the same version in messages above.</p> </li> <li> <p>gNOI-4.1.2: Configuration push verification post OS update.</p> </li> <li>Push a test configuration to the router using gNMI.Set() RPC with \"replace operation\".</li> <li> <p>If the configuration push is successful, make a gNMI.Get() RPC call and compare the configuration received with the originally pushed configuration and check if the configuration is a match. Test is a failure if either the gNMI.Get() operation fails or the configuration do not match with the one that was pushed.</p> <p>Note: For the test configuration, please include interface and BGP configuration.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/os/tests/osinstall/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/system/state/boot-time</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/packet_link_qualification/tests/packet_link_qualification_test/","title":"gNOI-2.1: Packet-based Link Qualification","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/packet_link_qualification/tests/packet_link_qualification_test/#summary","title":"Summary","text":"<p>Validate gNOI RPC can support packet-based link qualification test for the links between 2 DUTs.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/packet_link_qualification/tests/packet_link_qualification_test/#topology","title":"Topology","text":"<ul> <li>dut1:port1 &lt;--&gt; port1:dut2</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/packet_link_qualification/tests/packet_link_qualification_test/#procedure","title":"Procedure","text":"<ul> <li>Connect two vendor devices back to back on 100G bandwidth ports.<ul> <li>Validate the link qualification Capabilities response.<ul> <li>MaxHistoricalResultsPerInterface is &gt;= 2.</li> <li>Time exists.</li> <li>Generator:<ul> <li>MinMtu &gt;= 64,</li> <li>MaxMtu &gt;= 8184,</li> <li>MaxBps &gt;= 4e11,</li> <li>MaxPps &gt;= 5e8,</li> <li>MinSetupDuration &gt; 0</li> <li>MinTeardownDuration &gt; 0,</li> <li>MinSampleInterval &gt; 0,</li> </ul> </li> <li>Reflector:<ul> <li>MinSetupDuration &gt; 0</li> <li>MinTeardownDuration &gt; 0,</li> </ul> </li> </ul> </li> </ul> </li> <li>Validate the error code is returned for Get and Delete requests with     non-existing ID.<ul> <li>Error code is 5 NOT_FOUND (HTTP Mapping: 404 Not Found).</li> </ul> </li> <li>Validate the link qualification List and Delete.<ul> <li>Issue List qualifications request.</li> <li>Delete the qualification if qualification is found.</li> <li>Issue List qualifications request again.</li> <li>Verify that the qualification has been deleted successfully by checking     List response.</li> </ul> </li> <li>Set a device as the NEAR_END (generator) device for Packet Based Link Qual.<ul> <li>Issue gnoi.LinkQualification Create RPC to the device and provide     following parameters:<ul> <li>Id: A unique identifier for this run of the test</li> <li>InterfaceName: interface as the interface to be used as generator     end.<ul> <li>This interface must be connected to the interface chosen on the     reflector device using 100G connection.</li> </ul> </li> <li>EndpointType: Qualification_end set as NEAR_END with     PacketGeneratorConfiguration.</li> </ul> </li> <li>Set the following parameters for link qualification service usage:<ul> <li>PacketRate: Packet per second rate to use for this test.</li> <li>PacketSize: Size of packets to inject. The value is 8184 bytes.</li> </ul> </li> <li>RPCSyncedTiming:<ul> <li>SetupDuration: The requested setup time for the endpoint.</li> <li>PreSyncDuration: Minimum_wait_before_preparation_seconds. Within     this period, the device should:<ul> <li>Initialize the link qualification state machine.</li> <li>Set port\u2019s state to TESTING. This state is only relevant inside     the linkQual service.</li> <li>Set the port in loopback mode.</li> </ul> </li> <li>Duration:The length of the qualification.</li> <li>PostSyncDuration: The amount time a side should wait before starting     its teardown.</li> <li>TeardownDuration: The amount time required to bring the interface     back to pre-test state.</li> </ul> </li> <li>Verify generator interface oper-state is 'TESTING'</li> </ul> </li> <li>Set another device as the FAR_END (reflector) device for Packet Based Link     Qual.<ul> <li>Issue gnoi.LinkQualification Create RPC to the device and provide     following parameters:<ul> <li>Id: A unique identifier for this run of the test</li> <li>InterfaceName: Interface as the interface to be used as a reflector     to turn the packet back.</li> <li>EndpointType: Qualification_end set as FAR_END.</li> <li>RPCSyncedTiming:<ul> <li>Reflector timers should be same as the ones on the generator.</li> </ul> </li> <li>Verify reflector interface oper-state is 'TESTING'</li> </ul> </li> </ul> </li> <li>Get the result by issuing gnoi.LinkQualification Get RPC to gather the     result of link qualification. Provide the following parameter:<ul> <li>Id: The identifier used above on the NEAR_END side.</li> <li>Validate the response to<ul> <li>Ensure that the current_state is QUALIFICATION_STATE_COMPLETED</li> <li>Ensure that the num_corrupt_packets and num_packets_dropped_by_mmu     are 0</li> <li>Ensure that RPC status code is 0 for succuss.</li> <li>Packets sent count matches with packets received.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/packet_link_qualification/tests/packet_link_qualification_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>None</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/chassis_reboot_status_and_cancel_test/","title":"gNOI-3.4: Chassis Reboot Status and Reboot Cancellation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/chassis_reboot_status_and_cancel_test/#summary","title":"Summary","text":"<p>Validate gNOI RPC can get reboot status and cancel the reboot</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/chassis_reboot_status_and_cancel_test/#procedure","title":"Procedure","text":"<ul> <li>Test gnoi.system Reboot status RPC.<ul> <li>Issue gnoi.system Reboot status request RPC to chassis.</li> <li>Validate that the reboot status is not active before sending reboot request.</li> <li>Validate the reboot status after sending reboot request.<ul> <li>The reboot status is active.</li> <li>The reason from reboot status response matches reboot message.</li> <li>The wait time from reboot status response matches reboot delay.</li> </ul> </li> </ul> </li> <li>Test gnoi.system Cancel Reboot RPC.<ul> <li>Issue Cancel reboot request RPC to chassis before the test.</li> <li>Validate that there is no response error returned.</li> <li>Issue Reboot request with delay RPC to chassis.</li> <li>Validate that the reboot status is active.</li> <li>Issue Cancel reboot request RPC to chassis.</li> <li>Validate that the reboot status is no longer active.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/chassis_reboot_status_and_cancel_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>None</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/complete_chassis_reboot/","title":"gNOI-3.1: Complete Chassis Reboot","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/complete_chassis_reboot/#summary","title":"Summary","text":"<p>Validate gNOI RPC can reboot entire chassis</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/complete_chassis_reboot/#procedure","title":"Procedure","text":"<ul> <li>Configure ATE port-1 connected to DUT port-1 with the relevant IPv4 and IPv6     addresses.</li> <li>Issue gnoi.system Reboot RPC to chassis with method set to COLD and no     populated delay or subcomponents.<ul> <li>Validate that system uptime is reflected as having rebooted after device     returns.<ul> <li>TODO: test code currently checks boot-time instead of uptime.</li> </ul> </li> <li>TODO: Validate that all connected ports are disabled and re-enabled.</li> <li>Validate that the device returns with the expected software version.</li> </ul> </li> <li>Issue Reboot RPC to chassis with method set to COLD and a populated delay of     N seconds.<ul> <li>Validate that system remains reachable for N seconds.</li> <li>Validate that system uptime is reflected as having rebooted.<ul> <li>TODO: test code currently checks boot-time instead of uptime</li> </ul> </li> <li>TODO: Validate that all connected ports are disabled and re-enabled.</li> <li>Validate that the device returns with the expected software version</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/complete_chassis_reboot/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/system/state/boot-time</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/copying_debug_files_test/","title":"gNOI-5.3: Copying Debug Files","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/copying_debug_files_test/#summary","title":"Summary","text":"<ul> <li>Validate that the debug files can be copied out of the DUT.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/copying_debug_files_test/#procedure","title":"Procedure","text":"<ul> <li>gNOI-5.3.1 - Software Process Health Check</li> <li>Issue gnoi System.KillProcessRequest to the DUT to crash a software process.</li> <li>Issue gnoi System.Healthz Get RPC to chassis.</li> <li> <p>Verify that the DUT responds without any errors.</p> </li> <li> <p>gNOI-5.3.2 - Configuration daemon kill process and Health check</p> </li> <li>Execute gNMI subscribe ON_CHANGE to the config process in the background</li> <li>While subscribe is waiting for updates, Kill the process that manages device configuration using the gNOI.KillProcessRequest_SIGNAL_ABRT operation and restart flag set to true. This will terminate the process and will also dump a Core file.</li> <li>Read the subscribe updates and verify if the leaf /components/component[process that handles configuration of the DUT]/healthz/state/status transitioned to UNHEALTHY. If not, then fail the test.</li> <li>Since the software module had a status of UNHEALTHY, issue healthZ.Get() to collect more details on the event. Also, use HealthZ.Artifact() to collect artifacts like core dump, logs etc. The test should fail if any of these RPCs fail.</li> <li>Push test configuration to the router using gNMI.Set() RPC with \"replace operation\" and reverify the status of the leaf /components/component[process that handles configuration of the DUT]/healthz/state/status/.</li> <li> <p>If the configuration push is successful, make a gNMI.Get() RPC call and compare the configuration received with the originally pushed configuration for a match. Test is a failure if either the gNMI.Get() operation fails or the configuration do not match with the one that was pushed</p> </li> <li> <p>gNOI-5.3.3 - Chassis Component Health Check</p> </li> <li>Issue Healthz Check RPC to the DUT for Chassis component to trigger the generation of Artifact ID(s) equivalent to 'show tech support'.</li> <li>Verify that the DUT returns the artifact IDs in the Check RPC's response.</li> <li>Invoke ArtifactRequest to transfer the requested Artifact ID(s).</li> <li>Verify that the DUT returns the artifacts requested.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/copying_debug_files_test/#process-names-by-vendor","title":"Process names by vendor","text":"<ul> <li>BGP Process</li> <li>ARISTA:  \"Bgp-main\"</li> <li>CISCO: \" \"</li> <li>JUNIPER: \"rpd\"</li> <li>NOKIA:   \"sr_bgp_mgr\"</li> <li>Configuration process</li> <li>Arista: ConfigAgent</li> <li>Cisco:</li> <li>Juniper: mgd</li> <li> <p>Nokia:</p> </li> <li> <p>NOS implementations will need to model their agent that handles device configuration as a \" component of the type SOFTWARE_MODULE\" and represent it under the componenets/component tree</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/copying_debug_files_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/copying_debug_files_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/copying_debug_files_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gNOI<ul> <li>System<ul> <li>KillProcess</li> </ul> </li> <li>Healthz<ul> <li>Get</li> <li>Check</li> <li>Artifact</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/per_component_reboot_test/","title":"gNOI-3.2: Per-Component Reboot","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/per_component_reboot_test/#summary","title":"Summary","text":"<p>Validate gNOI RPC can reboot specific components.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/per_component_reboot_test/#procedure","title":"Procedure","text":"<ul> <li>Issue gnoi.system Reboot to chassis with no populated delay and     subcomponents set to:<ul> <li>A field-removable linecard in the system</li> <li>A control-processor (supervisor)</li> <li>A field-removable fabric component in the system</li> </ul> </li> <li>TODO: For each component verify that the component has rebooted and the     uptime has been reset.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/per_component_reboot_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/per_component_reboot_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/components/component/state/description</li> <li>/components/component/state/removable</li> <li>/components/component/state/name</li> <li>/components/component/state/oper-status</li> <li>/interfaces/interface/state/name</li> <li>/interfaces/interface/state/oper-status</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/per_component_reboot_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gNOI<ul> <li>System<ul> <li>Reboot</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/ping_test/","title":"gNOI-5.1: Ping Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/ping_test/#summary","title":"Summary","text":"<p>Validate ping request and response work on the device, with parameters covering VRF, source-IP address and different packet sizes. L3 Protocol used will be ICMP, which is default.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/ping_test/#topology","title":"Topology","text":"<ul> <li>DUT<ul> <li>Note: The current test only pings its looplack address to exercise the     gNOI API. The test may require the use of ATE for new tests in future.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/ping_test/#procedure","title":"Procedure","text":"<ul> <li>Issue gnoi.system Ping command. Provide following parameters:<ul> <li>Destination: populate this field with the<ul> <li>target device loopback IP address</li> <li>TODO: an IP-in-IP tunnel-end-point address</li> <li>TODO: an address matching regular non-default route</li> <li>TODO: an address matching the default route</li> <li>TODO: an address requiring VRF fallback lookup into default vrf</li> <li>TODO: supervisor's physical management port address</li> <li>TODO: floating management address</li> </ul> </li> <li>Source: populate this field with<ul> <li>loopback IP address</li> <li>regular interface address</li> <li>TODO: an IP-in-IP tunnel-end-point address</li> <li>TODO: supervisor's physical management port address</li> <li>TODO: floating management address</li> </ul> </li> <li>VRF:<ul> <li>TODO: Set the VRF to be management VRF, TE VRF and default fallback     VRF</li> </ul> </li> <li>Size:<ul> <li>Set to min packet size of 64, ethernet packet size of 1512, max mtu     of jumbo frame 9202, and value slightly bigger than the egress     interface MTU of a transit router to test do_not_fragment.</li> <li>TODO: verify these for vlan tagged vs untagged packets. May need +4     bytes</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/supervisor_switchover_test/","title":"gNOI-3.3: Supervisor Switchover","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/supervisor_switchover_test/#summary","title":"Summary","text":"<p>Validate that the active supervisor can be switched.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/supervisor_switchover_test/#procedure","title":"Procedure","text":"<ul> <li>Issue gnoi.SwitchControlProcessor to the chassis with dual supervisor,     specifying the path to choose the standby RE/SUP.</li> <li>Ensure the SwitchControlProcessorResponse has the new active supervisor as     the one specified in the request.</li> <li>Validate the standby RE/SUP becomes the active after switchover</li> <li>Validate that all connected ports are re-enabled.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/supervisor_switchover_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/supervisor_switchover_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/system/state/current-datetime</li> <li>/components/component[name=]/state/last-switchover-time <li>/components/component[name=]/state/last-switchover-reason/trigger <li>/components/component[name=]/state/last-switchover-reason/details"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/supervisor_switchover_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gNOI<ul> <li>System<ul> <li>SwitchControlProcessor</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/traceroute_test/","title":"gNOI-5.2: Traceroute Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/traceroute_test/#summary","title":"Summary","text":"<p>Validate that the device supports traceroute functionality using different source, destination, max_ttl, do_not_fragment and L4Protocols.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gnoi/system/tests/traceroute_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Issue gnoi.system Traceroute command. Provide following parameters:</p> <ul> <li>Destination: populate this field with the<ul> <li>target device loopback IP address</li> <li>TODO: an IP-in-IP tunnel-end-point address</li> <li>TODO: an address matching regular non-default route</li> <li>TODO: an address matching the default route</li> <li>TODO: an address requiring VRF fallback lookup into default vrf</li> <li>TODO: supervisor's physical management port address</li> <li>TODO: floating management address</li> </ul> </li> <li>Source: populate this field with<ul> <li>loopback IP address</li> <li>regular interface address</li> <li>TODO: an IP-in-IP tunnel-end-point address</li> <li>TODO: supervisor's physical management port address</li> <li>TODO: floating management address</li> </ul> </li> <li>VRF:<ul> <li>TODO: Set the VRF to be management VRF, TE VRF and default fallback     VRF</li> </ul> </li> <li>Max_TTL: Check the following cases of TTL values:<ul> <li>Not set(default of 30)</li> <li>TODO: Set to -1: *Check if test is abandoned once TTL reaches higher     value(of say 100)</li> <li>Set to 1</li> <li>TODO: Set to 255</li> </ul> </li> <li>Do_not_fragment: Check the following cases when DF bit is:<ul> <li>TODO: Unset</li> </ul> </li> <li>L4Protocol: set as:<ul> <li>ICMP</li> <li>TCP</li> <li>UDP</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/ate_tests/hierarchical_weight_resolution_test/","title":"TE-3.3: Hierarchical weight resolution","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/ate_tests/hierarchical_weight_resolution_test/#summary","title":"Summary","text":"<p>Ensures that next-hop weights (for WCMP) are honored hierarchically in gRIBI recursive resolution and traffic is load-shared according to these weights.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/ate_tests/hierarchical_weight_resolution_test/#procedure","title":"Procedure","text":"<p>Configure ATE and DUT:</p> <ul> <li> <p>Connect ATE port-1 to DUT port-1. ATE port-2 to DUT port-2.</p> </li> <li> <p>Create a non-default VRF (VRF-1) that contains no interfaces.</p> </li> <li> <p>On DUT port-2 and ATE port-2 create 18 L3 sub-interfaces each with a /30     subnet as below:</p> <ul> <li> <p>On DUT port-2, create subinterfaces with indices 1 to 18 mapped to VLAN     IDs 1 to 18 and corressponding IPv4 addresses 192.0.2.5, 192.0.2.9, ...,     192.0.2.73 respectively.</p> </li> <li> <p>On ATE port-2, create subinterfaces with indices 1 to 18 mapped to VLAN     IDs 1 to 18 and corresponding IPv4 addresses 192.0.2.6, 192.0.2.10, ...,     192.0.2.74 and default gateways as 192.0.2.5, 192.0.2.9, ..., 192.0.2.73     respectively.</p> </li> </ul> </li> <li> <p>On DUT port-1 and ATE port-1 create a single L3 interface.</p> </li> <li> <p>On DUT, create a policy-based forwarding rule to redirect all traffic received from DUT port-1 into VRF-1 (based on src. IP match criteria).</p> </li> </ul> <p>Test case for basic hierarchical weight:</p> <ul> <li> <p>Establish gRIBI client connection with DUT with PERSISTENCE, make it become     leader and install the following Entries:</p> <ul> <li> <p>IPv4Entry 203.0.113.0/32 in VRF-1, pointing to NextHopGroup(NHG#1) in     default VRF, with two NextHops(NH#1, NH#2) in default VRF:</p> <ul> <li> <p>NH#1 with weight:1, pointing to 192.0.2.111</p> </li> <li> <p>NH#2 with weight:3, pointing to 192.0.2.222</p> </li> </ul> </li> <li> <p>IPv4Entry 192.0.2.111/32 in default VRF, pointing to NextHopGroup(NHG#2)     in default VRF, with two NextHops(NH#10, NH#11) in default VRF:</p> <ul> <li> <p>NH#10 with weight:1, pointing to 192.0.2.10</p> </li> <li> <p>NH#11 with weight:3, pointing to 192.0.2.14</p> </li> </ul> </li> <li> <p>IPv4Entry 192.0.2.222/32 in default VRF, pointing to NextHopGroup(NHG#3)     in default VRF, with two NextHops(NH#100, NH#101) in default VRF:</p> <ul> <li> <p>NH#100 with weight:3, pointing to 192.0.2.18</p> </li> <li> <p>NH#101 with weight:5, pointing to 192.0.2.22</p> </li> </ul> </li> </ul> </li> <li> <p>Validate with traffic:</p> <ul> <li> <p>NH10: (1/4) * (1/4) = 6.25% traffic received by ATE port-2 VLAN 1</p> </li> <li> <p>NH11: (1/4) * (3/4) = 18.75% traffic received by ATE port-2 VLAN 2</p> </li> <li> <p>NH100: (3/4) * (3/8) = 28.12% traffic received by ATE port-2 VLAN 3</p> </li> <li> <p>NH101: (3/4) * (5/8) = 46.87% traffic received by ATE port-2 VLAN 4</p> </li> <li> <p>A tolerance of 0.2% is allowed for each VLAN for now, since we only test     for 2 mins.</p> </li> </ul> </li> </ul> <p>Test case for hierarchical weight in boundary scenarios, with maximum expected WCMP width of 16 nexthops:</p> <ul> <li> <p>Flush previous gRIBI Entries for all NIs and establish a new connection with     DUT with PERSISTENCE and install the following Entries:</p> <ul> <li> <p>IPv4Entry 203.0.113.0/32 in VRF-1, pointing to NextHopGroup(NHG#1) in     default VRF, with two NextHops(NH#1, NH#2) in default VRF:</p> <ul> <li> <p>NH#1 with weight:1, pointing to 192.0.2.111</p> </li> <li> <p>NH#2 with weight:31, pointing to 192.0.2.222</p> </li> </ul> </li> <li> <p>IPv4Entry 192.0.2.111/32 in default VRF, pointing to NextHopGroup(NHG#2)     in default VRF, with two NextHops(NH#10, NH#11) in default VRF:</p> <ul> <li> <p>NH#10 with weight:3, pointing to 192.0.2.10</p> </li> <li> <p>NH#11 with weight:5, pointing to 192.0.2.14</p> </li> </ul> </li> <li> <p>IPv4Entry 192.0.2.222/32 in default VRF, pointing to NextHopGroup(NHG#3)     in default VRF, with 16 NextHops(NH#100, NH#101, ..., NH#115), all with     weight: 16 except NHG#100 is of weight 1, in default VRF:</p> <ul> <li> <p>NH#100 with weight:1, pointing to 192.0.2.18</p> </li> <li> <p>NH#101 with weight:16, pointing to 192.0.2.22</p> </li> <li> <p>...</p> </li> <li> <p>NH#115 with weight:16, pointing to 192.0.2.79</p> </li> </ul> </li> </ul> </li> <li> <p>Validate with traffic:</p> <ul> <li> <p>NH10: (1/32) * (3/8) ~ 1.171% traffic received by ATE port-2 VLAN 1</p> </li> <li> <p>NH11: (1/32) * (5/8) ~ 1.953% traffic received by ATE port-2 VLAN 2</p> </li> <li> <p>NH100: (31/32) * (1/241) ~ 0.402% traffic received by ATE port-2 VLAN 3</p> </li> <li> <p>for each VLAN ID in 4...18:</p> <ul> <li>NH: (31/32) * (16/241) ~ 6.432% traffic received by ATE port-2 VLAN ID</li> </ul> </li> <li> <p>A tolerance of 0.2% is allowed for each VLAN for now, since we only test     for 2 mins.</p> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/ate_tests/hierarchical_weight_resolution_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/ate_tests/hierarchical_weight_resolution_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<p>TODO: /network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/ate_tests/hierarchical_weight_resolution_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI:<ul> <li>Modify()<ul> <li>ModifyRequest:<ul> <li>AFTOperation:<ul> <li>next_hop_group<ul> <li>NextHopGroupKey: id</li> <li>NextHopGroup: weight</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/ate_tests/hierarchical_weight_resolution_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ack_in_presence_other_routes/","title":"TE-3.6: ACK in the Presence of Other Routes","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ack_in_presence_other_routes/#summary","title":"Summary","text":"<p>Ensure that ACKs are received in the presence of other routes.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ack_in_presence_other_routes/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2, DUT port-3 to     ATE port-3. Assign IPv4 addresses to all ports.</p> </li> <li> <p>Configure static routes on the DUT for 203.0.113.0/24 pointing to ATE     port-2. Ensure that the static route is installed in the DUT.</p> </li> <li> <p>Connect gRIBI client to DUT specifying persistence mode <code>PRESERVE</code>,     <code>SINGLE_PRIMARY</code> client redundancy in the SessionParameters request, and     make it become leader. Ensure that no error is reported from the gRIBI     server.</p> </li> <li> <p>Add an <code>IPv4Entry</code> for same prefix <code>203.0.113.0/24</code> pointing to ATE port-3     via <code>gRIBI-A</code>, ensure that the entry is active through AFT telemetry and     correct ACK is received \u2013 InstalledInRIB.</p> </li> <li> <p>Send traffic from ATE port-1 to prefix <code>203.0.113.0/24</code>, and ensure traffic     flows 100% using the static route configured at ATE port-2.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ack_in_presence_other_routes/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI:<ul> <li>Modify()</li> <li>ModifyRequest:<ul> <li>AFTOperation:</li> <li>id</li> <li>network_instance</li> <li>op</li> <li>Ipv4<ul> <li>Ipv4EntryKey: prefix</li> <li>Ipv4Entry: next_hop_group</li> </ul> </li> <li>next_hop_group<ul> <li>NextHopGroupKey: id</li> <li>NextHopGroup: next_hop</li> </ul> </li> <li>next_hop<ul> <li>NextHopKey: id</li> <li>NextHop:</li> <li>ip_address</li> <li>interface_ref</li> </ul> </li> </ul> </li> <li>ModifyResponse:</li> <li>AFTResult:<ul> <li>id</li> <li>status</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ack_in_presence_other_routes/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li>/network-instance/name/</li> <li>/network-instance/config/type</li> <li>/network-instance/name/protocols/protocol/identifier/</li> <li>/network-instance/name/protocols/protocol/name/</li> <li>/network-instance/name/protocols/protocol/identifier/static-routes/static/prefix</li> <li>/network-instance/name/protocols/protocol/identifier/static-routes/static/prefix/config/prefix</li> <li>/network-instance/name/protocols/protocol/identifier/static-routes/static/next-hops/next-hop/index</li> <li>/network-instance/name/protocols/protocol/identifier/static-routes/static/next-hops/next-hop/config/index</li> <li>/network-instance/name/protocols/protocol/identifier/static-routes/static/next-hops/next-hop/config/next-hop</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ack_in_presence_other_routes/#telemery-parameter-coverage","title":"Telemery parameter coverage","text":"<ul> <li>/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix/</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/backup_nhg_multiple_nh_test/","title":"TE-11.2: Backup NHG: Multiple NH","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/backup_nhg_multiple_nh_test/#summary","title":"Summary","text":"<p>Ensure that backup NHGs are honoured with NextHopGroup entries containing &gt;1 NH.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/backup_nhg_multiple_nh_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2, ATE port-3 to     DUT port-3, and ATE port-4 to DUT port-4.</li> <li>Create a L3 routing instance (VRF-A), and assign DUT port-1 to VRF-A.</li> <li>Create a L3 routing instance (VRF-B) that includes no interface.</li> <li>Connect a gRIBI client to the DUT, make it become leader and inject the     following:<ul> <li>An IPv4Entry in VRF-A, pointing to a NextHopGroup (in DEFAULT VRF)     containing:<ul> <li>Two primary next-hops:<ul> <li>IP of ATE port-2</li> <li>IP of ATE port-3</li> </ul> </li> <li>A backup NHG containing a single next-hop pointing to VRF-B.</li> </ul> </li> <li>The same IPv4Entry but in VRF-B, pointing to a NextHopGroup (in DEFAULT     VRF) containing a primary next-hop to the IP of ATE port-4.</li> </ul> </li> <li>Ensure that traffic forwarded to the destination is received at ATE port-2     and port-3. Validate that AFT telemetry covers this case.</li> <li>Disable ATE port-2. Ensure that traffic for the destination is received at     ATE port-3.</li> <li>Disable ATE port-3. Ensure that traffic for the destination is received at     ATE port-4.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/backup_nhg_multiple_nh_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>No new configuration covered.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/backup_nhg_multiple_nh_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>No new telemetry covered.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/backup_nhg_multiple_nh_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI:<ul> <li>Modify<ul> <li>ModifyRequest<ul> <li>NextHopGroup<ul> <li>backup_nexthop_group</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/backup_nhg_multiple_nh_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/","title":"TE-3.7: Base Hierarchical NHG Update","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#summary","title":"Summary","text":"<p>Validate NHG update in hierarchical resolution scenario</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2, ATE port-3 to     DUT port-3.</li> <li>Create a non-default VRF (VRF-1) that includes DUT port-1.</li> <li>Establish gRIBI client connection with DUT and make it become leader.</li> <li>Use Modify RPC to install entries per the following order, and ensure FIB     ACK is received for each of the AFTOperation:<ul> <li>Add 203.0.113.1/32 (default VRF) to NextHopGroup (NHG#42 in default VRF)     containing one NextHop (NH#40 in default VRF) that specifies DUT port-2 as     the egress interface and 00:1A:11:00:1A:BC as the destination MAC     address.</li> <li>Add 198.51.100.0/24 (VRF-1) to NextHopGroup (NHG#44 in default VRF) containing one     NextHop (NH#43 in default VRF) specified to be 203.0.113.1/32 in the default VRF.</li> </ul> </li> <li>Ensure that ATE port-2 receives the packets with 00:1A:11:00:1A:BC as     the destination MAC address.</li> <li>Use the Modify RPC with ADD operation to test NHG implicit in-place     replace (step by step as below):<ol> <li>Add a new NH (NH#41) with egress interface that specifies DUT port-3 as the     egress interface and 00:1A:11:00:1A:BC as the destination MAC address.</li> <li>Add the same NHG#42 but reference both NH#40 and NH#41.</li> <li>Validate that both ATE port-2 and ATE port-3 receives the packets with 00:1A:11:00:1A:BC as the destination MAC address.</li> <li>Add the same NHG#42 but reference only NH#41.</li> <li>Validate that only ATE port-3 receives the packets.</li> <li>Add the same NHG#42 but reference only NH#40.</li> <li>Validate that only ATE port-2 receives the packets</li> </ol> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No configuration relevant.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>For prefix:</p> <ul> <li>/network-instances/network-instance/afts/</li> </ul> <p>Parameters:</p> <ul> <li>ipv4-unicast/ipv4-entry/state</li> <li>ipv4-unicast/ipv4-entry/state/next-hop-group</li> <li>ipv4-unicast/ipv4-entry/state/origin-protocol</li> <li>ipv4-unicast/ipv4-entry/state/prefix</li> <li>next-hop-groups/next-hop-group/id</li> <li>next-hop-groups/next-hop-group/next-hops</li> <li>next-hop-groups/next-hop-group/next-hops/next-hop</li> <li>next-hop-groups/next-hop-group/next-hops/next-hop/index</li> <li>next-hop-groups/next-hop-group/next-hops/next-hop/state</li> <li>next-hop-groups/next-hop-group/next-hops/next-hop/state/index</li> <li>next-hop-groups/next-hop-group/state</li> <li>next-hop-groups/next-hop-group/state/id</li> <li>next-hops/next-hop/index</li> <li>next-hops/next-hop/interface-ref</li> <li>next-hops/next-hop/interface-ref/state</li> <li>next-hops/next-hop/interface-ref/state/interface</li> <li>next-hops/next-hop/interface-ref/state/subinterface</li> <li>next-hops/next-hop/state</li> <li>next-hops/next-hop/state/index</li> <li>next-hops/next-hop/state/ip-address</li> <li>next-hops/next-hop/state/mac-address</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI:<ul> <li>Modify()<ul> <li>ModifyRequest:<ul> <li>AFTOperation:<ul> <li>id</li> <li>network_instance</li> <li>op</li> <li>Ipv4<ul> <li>Ipv4EntryKey: prefix</li> <li>Ipv4Entry: next_hop_group</li> </ul> </li> <li>next_hop_group<ul> <li>NextHopGroupKey: id</li> <li>NextHopGroup: next_hop</li> </ul> </li> <li>next_hop<ul> <li>NextHopKey: id</li> <li>NextHop:<ul> <li>mac_address</li> <li>interface_ref</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>ModifyResponse:<ul> <li>AFTResult:<ul> <li>id</li> <li>status</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#te-37-drain-implementation-test","title":"TE-3.7: Drain Implementation Test.","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#summary_1","title":"Summary","text":"<p>Validate NHG update in Drain Implementation Test.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_nhg_update/#procedure_1","title":"Procedure","text":"<ul> <li>Steps:</li> <li>Topology</li> <li>[ATE port-1] \u2014 [port-1 DUT port-2] \u2014 [port-2 ATE]                                              Port-3]\u2014-[port-3 ATE]                                              Port-4]\u2014-[port-4 ATE]</li> <li>DUT port-2, port-3 and port-4 are each making a one-member trunk port (trunk-2 and trunk-3, trunk-4).</li> <li>Configure a destination network-a connected to trunk-2, trunk-3 and trunk-4.</li> <li>gRIBI installs the following routing structure (700 IPv4 prefix, NHG and NH numbers stays the same as the             illustration), and expect FIB ACKs:</li> <li> <p>In the DEFAULT VRF:     VIP1 -&gt; NHG#1 -&gt; [NH#1 {mac: MagicMAC, interface: DUTPort2Trunk}, NH#2 {mac: MagicMAC, interface: DUTPort3Trunk}]     NHG#10 -&gt; NH#10 {decap, network-instance: DEFAULT VRF}     NHG#20 -&gt; [ NH#20{ip: VIP1}, backupNH: NHG#10]</p> </li> <li> <p>In a non-defualt VRF, VRF-1:     IPv4Entries(1000 /32 IPv4 entries) -&gt; NHG#20</p> </li> <li> <p>Send 10K IPinIP traffic flows from ATE port-1 to network-a. </p> </li> <li>Validate that traffic is going via trunk-2 and trunk-3 and  there is no traffic loss.</li> <li>Send one gRIBI NHG#1 update to replace NH#1 and NH#2 with NH#3 pointing to trunk#4. </li> <li>Expect FIB ACKs, and validate that all traffic are moved to trunk#4 with no traffic loss.</li> <li>Send one gRIBI NHG#1 update to revert back the changes above. </li> <li>Expect FIB ACKs and validate that the traffic is moved back to trunk-2 and trunk-3 with less than  ms traffic loss."},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/","title":"TE-3.1: Base Hierarchical Route Installation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/#summary","title":"Summary","text":"<p>Validate IPv4 AFT support in gRIBI with recursion.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/#procedure","title":"Procedure","text":"<p>Topology:</p> <ul> <li>Connect ATE port-1 to DUT port-1 and ATE port-2 to DUT port-2.</li> <li>Create a non-default VRF (VRF-1) </li> <li>Configure PBF policy in DEFAULT to match src address and redirect traffic to VRF-1</li> <li>Apply PBF policy on ingress interface DUT port-1</li> <li>Establish gRIBI client connection with DUT using default parameters and     persistence mode <code>PRESERVE</code>, make it become leader and flush all entries     after each case.</li> </ul> <p>Validate hierarchical resolution across VRFs:</p> <ol> <li> <p>Using gRIBI Modify RPC install the following IPv4Entry set per the following     order, and ensure FIB ACK is received for each of the AFTOperation:</p> <ol> <li>Add 203.0.113.1/32 (default VRF) to NextHopGroup (default VRF)     containing one NextHop (default VRF) specified to be the address of ATE     port-2.</li> <li>Add 198.51.100.1/32 (VRF-1) to NextHopGroup (default VRF)     containing one NextHop (default VRF) specified to be 203.0.113.1/32 in     the default VRF.</li> </ol> </li> <li> <p>Forward packets between ATE port-1 and ATE port-2 (destined to     198.51.100.1/32) and determine that packets are forwarded successfully.</p> </li> <li> <p>Validate that both routes are shown as installed via AFT telemetry.</p> </li> <li> <p>Ensure that removing the IPv4Entry 203.0.113.1/32 with a DELETE operation     results in traffic loss, and removal from AFT.</p> </li> </ol> <p>Validate hierarchical resolution using egress interface and MAC:</p> <ol> <li> <p>Using gRIBI Modify RPC install the following IPv4Entry set per the following     order, and ensure FIB ACK is received for each of the AFTOperation:</p> <ol> <li>Add 203.0.113.1/32 (default VRF) to NextHopGroup (default VRF)     containing one NextHop (default VRF) that specifies DUT port-2 as the     egress interface and <code>00:1A:11:00:0A:BC</code> as the destination MAC address.</li> <li>Add 198.51.100.1/32 (VRF-1) to NextHopGroup (default VRF) containing one     NextHop (default VRF) specified to be 203.0.113.1/32 in the default VRF.</li> </ol> </li> <li> <p>Forward packets between ATE port-1 and ATE port-2 (destined to     198.51.100.1/32) and ensure that ATE port-2 receives packet with     <code>00:1A:11:00:00:01</code> as the destination MAC address.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No configuration relevant.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/#for-prefix","title":"For prefix:","text":"<ul> <li>/network-instances/network-instance/afts/</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/#parameters","title":"Parameters:","text":"<ul> <li>ipv4-unicast/ipv4-entry/state</li> <li>ipv4-unicast/ipv4-entry/state/next-hop-group</li> <li>ipv4-unicast/ipv4-entry/state/origin-protocol</li> <li>ipv4-unicast/ipv4-entry/state/prefix</li> <li>next-hop-groups/next-hop-group/id</li> <li>next-hop-groups/next-hop-group/next-hops/next-hop/index</li> <li>next-hop-groups/next-hop-group/next-hops/next-hop/state</li> <li>next-hop-groups/next-hop-group/next-hops/next-hop/state/index</li> <li>next-hop-groups/next-hop-group/state/id</li> <li>next-hop-groups/next-hop-group/state/programmed-id</li> <li>next-hops/next-hop/index</li> <li>next-hops/next-hop/interface-ref/state/interface</li> <li>next-hops/next-hop/interface-ref/state/subinterface</li> <li>next-hops/next-hop/state/index</li> <li>next-hops/next-hop/state/state/programmed-id </li> <li>next-hops/next-hop/state/ip-address</li> <li>next-hops/next-hop/state/mac-address</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI:<ul> <li>Modify()</li> <li>ModifyRequest:<ul> <li>AFTOperation:</li> <li>id</li> <li>network_instance</li> <li>op</li> <li>Ipv4<ul> <li>Ipv4EntryKey: prefix</li> <li>Ipv4Entry: next_hop_group</li> </ul> </li> <li>next_hop_group<ul> <li>NextHopGroupKey: id</li> <li>NextHopGroup: next_hop</li> </ul> </li> <li>next_hop<ul> <li>NextHopKey: id</li> <li>NextHop:</li> <li>ip_address</li> <li>mac_address</li> <li>interface_ref</li> </ul> </li> </ul> </li> <li>ModifyResponse:</li> <li>AFTResult:<ul> <li>id</li> <li>status</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_hierarchical_route_installation_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_leader_election_test/","title":"TE-4.1: Base Leader Election","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_leader_election_test/#summary","title":"Summary","text":"<p>Validate Election ID is accepted from a gRIBI client.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_leader_election_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2, DUT port-3 to     ATE port-3. Assign IPv4 addresses to all ports.</p> </li> <li> <p>Establish two gRIBI clients to the DUT (referred to as <code>gRIBI-A</code> and     <code>gRIBI-B</code>).</p> </li> <li> <p>Connect <code>gRIBI-A</code> to DUT specifying <code>PRESERVE</code> persistent mode,     <code>SINGLE_PRIMARY</code> client redundancy in the SessionParameters request. Ensure     that no error is reported from the gRIBI server.</p> </li> <li> <p>Connect <code>gRIBI-B</code> to DUT specifying <code>PRESERVE</code> persistent mode,     <code>SINGLE_PRIMARY</code> client redundancy and make it become leader.</p> </li> <li> <p>Add an <code>IPv4Entry</code> for <code>198.51.100.0/24</code> pointing to ATE port-3 via     <code>gRIBI-B</code>, ensure that the entry is active through AFT telemetry and     traffic.</p> </li> <li> <p>Add an <code>IPv4Entry</code> for <code>198.51.100.0/24</code> pointing to ATE port-2 via     <code>gRIBI-A</code>, ensure that the entry is ignored by the DUT.</p> </li> <li> <p>Make <code>gRIBI-A</code> become leader, followed by a <code>ModifyRequest</code> updating     <code>198.51.100.0/24</code> pointing to ATE port-2, ensure that routing is updated to     receive packets for <code>198.51.100.0/24</code> at ATE port-2.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/base_leader_election_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gRIBI<ul> <li>ModifyRequest<ul> <li>SessionParameters:<ul> <li>redundancy</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/get_rpc_test/","title":"TE-5.1: gRIBI Get RPC","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/get_rpc_test/#summary","title":"Summary","text":"<p>Validate gRIBI Get RPC.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/get_rpc_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1 and ATE port-2 to DUT port-2.</p> </li> <li> <p>Connect gRIBI client to DUT referred to as gRIBI-A, along with a second     client referred to as gRIBI-B - using <code>PRESERVE</code> persistence and     <code>SINGLE_PRIMARY</code> mode, with FIB ACK requested. Make gRIBI-A become leader.</p> </li> <li> <p>Inject IPv4Entry cases for 198.51.100.0/26, 198.51.100.64/26,     198.51.100.128/26 to ATE port-2 via gRIBI-A. Validate entries are installed     through AFT telemetry.</p> </li> <li> <p>Issue Get RPC from gRIBI-A, ensure that all entries for 198.51.100.0/26,     198.51.100.64/26, 198.51.100.128/26 are returned. Measure latency of Get     RPC.</p> <ul> <li>TODO: ensure all AFTEntry in the GetResponse for the IPv4Entry, NHG and     NH are returned with fib_status=<code>PROGRAMMED</code>.</li> </ul> </li> <li> <p>Issue Get RPC from gRIBI-B, ensure that all entries for 198.51.100.0/26,     198.51.100.64/26, 198.51.100.128/26 are returned. Measure latency of Get     RPC.</p> <ul> <li>TODO: ensure all IPv4Entry, NHG and NH are returned with     fib_status=<code>PROGRAMMED</code>.</li> </ul> </li> <li> <p>Configure static route for 198.51.100.192/64, issue Get from gRIBI-A and     ensure that only entries for 198.51.100.0/26, 198.51.100.64/26,     198.51.100.128/26 are returned, with no entry returned for     198.51.100.192/64.</p> <ul> <li>TODO: ensure all IPEntry, NHG and NH are returned with     fib_status=<code>PROGRAMMED</code>.</li> </ul> </li> <li> <p>Inject an entry that cannot be installed into the FIB due to an unresolved     next-hop (203.0.113.0/24 -&gt; unresolved 192.0.2.254/32). Issue a Get RPC from     gRIBI-A and ensure that the entry for 203.0.113.0/24 is not returned.</p> <ul> <li>TODO: ensure that the IPEntry for 203.0.113.0/24 is returned with     fib_status=<code>NOT_PROGRAMMED</code> and rib_status=<code>PROGRAMMED</code></li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/get_rpc_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>No additional configuration parameters.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/get_rpc_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No additional telemetry parameters.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/get_rpc_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI<ul> <li>Get</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/get_rpc_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX if the vendor implementation supports FIB-ACK simulation, otherwise FFF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/gribi_scaling/","title":"TE-14.1: gRIBI Scaling","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/gribi_scaling/#summary","title":"Summary","text":"<p>Validate gRIBI scaling requirements.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/gribi_scaling/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2.</li> <li>Create 64 L3 sub-interfaces under DUT port-2 and corresponding 64 L3     sub-interfaces on ATE port-2</li> <li>On DUT port-1 and ATE port-1 create a single L3 interface</li> <li>On DUT, create a policy-based forwarding rule to redirect all traffic received from DUT port-1 into VRF-1 (based on src. IP match criteria)</li> <li>Establish gRIBI client connection with DUT negotiating FIBACK as the     requested ack_type and make it become leader.</li> <li>Using gRIBI Modify RPC install the following IPv4Entry sets, and validate     the specified behaviours:<ul> <li> IPv4Entries -&gt; NHG -&gt; Multiple NH.<ul> <li>Inject IPv4Entries(IPBlockDefaultVRF: 198.18.196.1/22) in default     VRF</li> <li>Install 64 L3 sub-interfaces IP to NextHopGroup containing one     NextHop specified to ATE port-2.</li> <li>Validate that the entries are installed as FIB_PROGRAMMED</li> </ul> <li> IPv4Entries -&gt; Multiple NHG -&gt; Multiple NH.<ul> <li>Inject IPv4Entries(IPBlock1: \"198.18.0.1/18\") in VRF1.</li> <li>Install 1000 IPs from IPBlockDefaultVRF to 10 NextHopGroups     containing 100 NextHops each</li> <li>Validate that the entries are installed as FIB_PROGRAMMED</li> </ul> <li> IPv4Entries -&gt; Multiple NHG -&gt; Multiple NH.<ul> <li>Inject IPv4Entries(IPBlock2: \"198.18.64.1/18\") in VRF2.</li> <li>Install repeat 17.5K NH from 1K /32 from IPBlockDefaultVRF to 35     NextHopGroups containing 45 NextHops each</li> <li>Validate that the entries are installed as FIB_PROGRAMMED</li> </ul> <li> IPv4Entries -&gt; Multiple NHG -&gt; Multiple NH.<ul> <li>Inject IPv4Entries(IPBlock3: \"198.18.128.1/18\") in VRF3.</li> <li>Install IPiniP decap-then-encap to 500 first /32 from      to 500 NextHopGroups containing 1 NextHop each <li>Validate that the entries are installed as FIB_PROGRAMMED</li> <li>TODO: Add flows destinating to IPBlocks and ensure ATEPort2 receives it with     no loss</li>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/gribigo_compliance_test/","title":"TE-15.1: gRIBI Compliance","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/gribigo_compliance_test/#summary","title":"Summary","text":"<p>Execute the gRIBIgo compliance tests against a DUT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/gribigo_compliance_test/#procedure","title":"Procedure","text":"<p>For each compliance test case in the test suite:</p> <ol> <li>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2, DUT port-3 to     ATE port-3. Assign 192.0.2.0/31, 192.0.2.2/31, and 192.0.2.4/31 to DUT and     ATE as defined in the     gribigo complaince test topology.</li> <li>Set the network instance names for the default VRF and non-default VRF.</li> <li>Create gRIBI-A as the first client.</li> <li>Create gRIBI-B as the second client.</li> <li>Call the test case function with the two gRIBI clients.<ul> <li>If the case expects a t.Fatal result, use testt.ExpectFatal.</li> <li>If the case expects a t.Error result, use testt.ExpectError.</li> <li>Otherwise, call the test case function directly.</li> </ul> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_test/","title":"TE-2.1: gRIBI IPv4 Entry","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_test/#summary","title":"Summary","text":"<p>Validate IPv4 support in gRIBI.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2, and ATE port-3     to DUT port-3.</li> <li>Establish gRIBI client connection with DUT, negotiating <code>RIB_AND_FIB_ACK</code> as     the requested <code>ack_type</code> and persistence mode <code>PRESERVE</code>. make it become     leader. Flush all entries after each case.</li> <li>Using gRIBI Modify RPC install the following IPv4Entry sets, and validate     the specified behaviours:<ul> <li>Single IPv4Entry -&gt; NHG -&gt; NH.<ul> <li>Install 198.51.100.0/24 to NextHopGroup containing one NextHop     specified to ATE port-2.</li> <li>Forward packets between ATE port-1 and ATE port-2 (destined to     198.51.100.0/24 ) and determine that packets are forwarded     successfully:</li> </ul> </li> <li>Single IPv4Entry -&gt; NHG -&gt; multiple NHs.<ul> <li>Install 198.51.100.0/24 to NextHopGroup containing two NextHop     entries specified to ATE ports 2 and 3.</li> <li>Validate that packets forwarded between ATE ports 1 and (2 and 3),     ensuring that traffic is forwarded.</li> </ul> </li> <li>Single IPv4Entry -&gt; NHG -&gt; multiple NHs with MAC override.<ul> <li>Install 198.51.100.0/24 to NextHopGroup containing two NextHop     entries specified to ATE ports 2 and 3, and override the     destination MAC to a specified value.</li> <li>Validate that packets forwarded between ATE ports 1 and (2 and 3)</li> <li>TODO: validate the ATE received packets are of the expected     destination MAC address.</li> </ul> </li> <li>Single IPv4Entry -&gt; NHG -&gt; non-existent NH.<ul> <li>Send a Modify() containing 2 AFTOperations that install     198.51.100.0/24 to NextHopGroup containing next-hops that do not     exist. Validate that FAILED error is received for all the 2     operations. Ensure that traffic to 198.51.100.0/24 is blackholed.</li> </ul> </li> <li>Single IPv4Entry -&gt; NHG -&gt; NH with down interface<ul> <li>Install 198.51.100.0/24 to NextHopGroup containing a NextHop that     references (interface_ref) a down interface and override the     destination MAC (mac_address), ensure that <code>FIB_PROGRAMMED</code> is     returned.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI<ul> <li>Modify()<ul> <li>ModifyRequest:<ul> <li>AFTOperation:<ul> <li>id</li> <li>network_instance</li> <li>op</li> <li>Ipv4<ul> <li>Ipv4EntryKey: prefix</li> <li>Ipv4Entry: next_hop_group</li> </ul> </li> <li>next_hop_group<ul> <li>NextHopGroupKey: id</li> <li>NextHopGroup: next_hop</li> </ul> </li> <li>next_hop<ul> <li>NextHopKey: id</li> <li>NextHop:<ul> <li>ip_address</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>ModifyResponse:<ul> <li>AFTResult:<ul> <li>id</li> <li>status</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_with_aggregate_ports_test/","title":"TE-2.2: gRIBI IPv4 Entry With Aggregate Ports","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_with_aggregate_ports_test/#summary","title":"Summary","text":"<p>Validate IPv4 support in gRIBI using an Aggregate Port as a static route Next Hop.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_with_aggregate_ports_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, ATE port-2 to DUT port-2, and ATE port-3     to DUT port-3.</li> <li>Configure ATE and DUT ports 2-3 to be part of a Static LAG.</li> <li>Establish gRIBI client connection with DUT, negotiating <code>RIB_AND_FIB_ACK</code> as     the requested <code>ack_type</code> and persistence mode <code>PRESERVE</code>. make it become     leader. Flush all entries after each case.</li> <li> <p>Using gRIBI Modify RPC install the following IPv4Entry sets, and validate     the specified behaviours:</p> <ul> <li> <p>Single IPv4Entry -&gt; NHG -&gt; NH with MAC Override.</p> <ul> <li> <p>Install 198.51.100.0/24 to NextHopGroup containing one NextHop which     is a static route to the ATE LAG port containing ports 2-3, and     override the destination MAC to a specified value.</p> </li> <li> <p>Forward packets between ATE port-1 and ATE LAG (destined to     198.51.100.0/24 i.e. packets with destination IP starting     198.51.100.1 up to 198.51.100.255) and determine that packets are     forwarded successfully.</p> </li> <li> <p>Disable ATE port-2 and forward packets between ATE port-1 and ATE     LAG (destined to 198.51.100.0/24 ) and determine that packets are     forwarded successfully.</p> </li> <li> <p>Disable ATE port-2 and port-3 and forward packets between ATE port-1     and ATE LAG (destined to 198.51.100.0/24 ) and determine that     packets are lost 100%.</p> </li> <li> <p>Re-enable both ATE port-2 and port-3 and forward packets between ATE     port-1 and ATE LAG (destined to 198.51.100.0/24 ) and determine that     packets are forwarded successfully again.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_with_aggregate_ports_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_with_aggregate_ports_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ipv4_entry_with_aggregate_ports_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI<ul> <li>Modify()<ul> <li>ModifyRequest:<ul> <li>AFTOperation:<ul> <li>id</li> <li>network_instance</li> <li>op</li> <li>Ipv4<ul> <li>Ipv4EntryKey: prefix</li> <li>Ipv4Entry: next_hop_group</li> </ul> </li> <li>next_hop_group<ul> <li>NextHopGroupKey: id</li> <li>NextHopGroup: next_hop</li> </ul> </li> <li>next_hop<ul> <li>NextHopKey: id</li> <li>NextHop:<ul> <li>ip_address</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>ModifyResponse:<ul> <li>AFTResult:<ul> <li>id</li> <li>status</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/","title":"TE-9: gRIBI MPLS Compliance","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#summary","title":"Summary","text":"<p>Ensure that the gRIBI server implements a base set of MPLS functionality without traffic validation.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#te-91-push-mpls-labels-to-mpls-payload","title":"TE-9.1: Push MPLS Labels to MPLS payload","text":"<ul> <li>Configure ATE <code>port-1</code> connected to DUT <code>port-1</code>, and ATE <code>port-2</code> connected   to DUT <code>port-2</code>.</li> <li>ATE <code>port-2</code> is configured to have an assigned address of <code>192.0.2.2</code>, and the   interface to the DUT is enabled.</li> <li>For label stack depths beginning at <code>baseLabel</code>, with <code>numLabels</code> addition   labels:</li> <li>Program a <code>LabelEntry</code> matching outer label 100 pointing to a NHG      containing a single NH.</li> <li>Program a <code>NextHopEntry</code> which points to <code>192.0.2.2</code> pushing <code>[baseLabel,      ..., baseLabel+numLabels]</code> onto the MPLS label stack.</li> <li>Validate that gRIBI transactions are successfully processed by the server.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#te-92-push-mpls-labels-to-ip-packet","title":"TE-9.2: Push MPLS Labels to IP Packet","text":"<ul> <li>Configure DUT with a destination interface connected to an ATE. The ATE is   configured to have an assigned address of <code>192.0.2.2</code>, and the interface to   the DUT is enabled.</li> <li>For label stack depths from <code>N=1...numLabels</code> program:<ul> <li>an IPv4 entry for <code>10.0.0.0/24</code> with a next-hop of <code>192.0.2.2</code> pushing N    additional labels onto the packet.</li> </ul> </li> <li>Validate that gRIBI transactions are successfully processed by the server.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#te-93-pop-top-mpls-label","title":"TE-9.3: Pop Top MPLS Label","text":"<ul> <li>Configure DUT with a destination interface connected to an ATE. The ATE is   configured to have assigned address 192.0.2.2.</li> <li>Program DUT with a label forwarding entry matching label 100 and specifying to   pop the top label.</li> <li>Validate that gRIBI transactions are successfully processed by the server.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#te-94-pop-n-labels-from-stack","title":"TE-9.4: Pop N Labels from Stack","text":"<ul> <li>Configure DUT with destination interface connected to an ATE. The ATE is   configured to have assigned address <code>192.0.2.2</code>.</li> <li>Program DUT with a label forwarding entry matching label 100 and specifying to   pop:<ul> <li>Label <code>100</code></li> <li>Label stack <code>[100, 42]</code></li> <li>Label stack <code>[100, 42, 43, 44, 45]</code></li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#te-95-pop-1-push-n-labels","title":"TE-9.5: Pop 1 Push N Labels","text":"<ul> <li>Configure DUT with destination interface connected to an ATE. The ATE is   configured to have assigned address <code>192.0.2.2</code>.</li> <li>Program DUT with a label forwarding entry matching label 100 and label 200,   pointing to a next-hop that is programmed to pop the top label, and:</li> <li>push label 100 - resulting in a swap for incoming label 100, and a push of      100 for incoming label 200.</li> <li>push stack <code>[100, 200, 300, 400]</code></li> <li>push stack <code>[100, 200, 300, 400, 500, 600]</code></li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI:<ul> <li><code>Modify()</code></li> <li><code>ModifyRequest</code><ul> <li><code>AFTOperation</code>:</li> <li><code>id</code></li> <li><code>network_instance</code></li> <li><code>op</code>: <code>ADD</code></li> <li><code>ipv4</code>:<ul> <li><code>prefix</code></li> </ul> </li> <li><code>mpls</code>:<ul> <li><code>next_hop_group</code></li> </ul> </li> <li><code>next_hop_group</code><ul> <li><code>id</code></li> <li><code>next_hop</code></li> </ul> </li> <li><code>next_hop</code><ul> <li><code>id</code></li> <li><code>ip_address</code></li> <li><code>pushed_label_stack</code></li> <li><code>pop_top_label</code></li> <li><code>popped_label_stack</code></li> </ul> </li> </ul> </li> <li><code>ModifyResponse</code>:</li> <li><code>AFTResult</code>:<ul> <li><code>id</code></li> <li><code>status</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#config-parameter-coverage","title":"Config parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_compliance/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_forwarding/","title":"TE-10: gRIBI MPLS Forwarding","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_forwarding/#summary","title":"Summary","text":"<p>Ensure that gRIBI programmed operations result in the correct traffic forwarding behaviour on the DUT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_forwarding/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_forwarding/#te-101-push-mpls-labels-to-mpls-payload","title":"TE-10.1: Push MPLS Labels to MPLS payload","text":"<ul> <li>Configure DUT <code>port-1</code> to be connected to ATE <code>port-1</code>, and DUT <code>port-2</code> to   be connected to ATE <code>port-2</code>. ATE <code>port-2</code> is configured to have an assigned   address of <code>192.0.2.2</code>, and the interface is enabled.</li> <li>For label stack depths beginning at <code>baseLabel</code>, with <code>numLabels</code> addition   labels:</li> <li>Program a <code>LabelEntry</code> matching outer label 100 pointing to a NHG      containing a single NH.</li> <li>Program a <code>NextHopEntry</code> which points to <code>192.0.2.2</code> pushing <code>[baseLabel,      ..., baseLabel+numLabels]</code> onto the MPLS label stack.</li> <li>Run an MPLS flow matching label 100's forwarding entry and validate that is   received at the destination port.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_forwarding/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI:<ul> <li><code>Modify()</code></li> <li><code>ModifyRequest</code><ul> <li><code>AFTOperation</code></li> <li><code>id</code></li> <li><code>network_instance</code></li> <li><code>op</code>: <code>ADD</code></li> <li><code>mpls</code><ul> <li><code>next_hop_group</code></li> </ul> </li> <li><code>next_hop_group</code><ul> <li><code>id</code></li> <li><code>next_hop</code></li> </ul> </li> <li><code>next_hop</code><ul> <li><code>id</code></li> <li><code>ip_address</code></li> <li><code>pushed_label_stack</code></li> </ul> </li> </ul> </li> <li><code>ModifyResponse</code></li> <li><code>AFTResult</code><ul> <li><code>id</code></li> <li><code>status</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_forwarding/#config-parameter-coverage","title":"Config parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/mpls_forwarding/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ordering_ack_test/","title":"TE-3.5: Ordering: ACK Received","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ordering_ack_test/#summary","title":"Summary","text":"<p>Ensure that acknowledgements are sent as is expected by gRIBI controller.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ordering_ack_test/#procedure","title":"Procedure","text":"<ul> <li>Configure ATE port-1 connected to DUT port-1, and ATE port-2 to DUT port-2.</li> <li>Connect to the gRIBI server running on DUT, negotiating <code>RIB_AND_FIB_ACK</code> as     the requested <code>ack_type</code> and persistence mode <code>PRESERVE</code>. Make it become     leader. Flush all entries after each case.</li> <li>Install the following entries and determine whether the expected result is     observed:<ul> <li>A <code>NextHopGroup</code> referencing a <code>NextHop</code> is responded to with FIB ACK,     and is reported through the AFT telemetry.</li> <li>A single <code>ModifyRequest</code> with the following ordered operations is     responded to with an error:<ul> <li>An <code>AFTOperation</code> containing an <code>IPv4Entry</code> referencing     <code>NextHopGroup</code> 10.</li> <li>An <code>AFTOperation</code> containing a <code>NextHopGroup id=10</code>.</li> </ul> </li> <li>A single <code>ModifyRequest</code> with the following ordered operations is     installed (verified through telemetry and traffic):<ul> <li>An <code>AFTOperation</code> containing a <code>NextHopGroup</code> 10 pointing to a     <code>NextHop</code> to ATE port-2.</li> <li>An <code>AFTOperation</code> containing a <code>IPv4Entry</code> referencing     <code>NextHopGroup</code> 10.</li> </ul> </li> <li>A single <code>ModifyRequest</code> with the following ordered operations is     installed (verified through telemetry and traffic):<ul> <li>An AFT entry adding <code>IPv4Entry 203.0.113.0/24</code>.</li> <li>An AFT entry deleting <code>IPv4Entry 203.0.113.0/24</code>.</li> <li>An AFT entry adding <code>IPv4Entry 203.0.113.0/24</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ordering_ack_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ordering_ack_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/ordering_ack_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI<ul> <li>ModifyRequest:<ul> <li>SessionParameters:<ul> <li>ack_type</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/persistence_mode_test/","title":"TE-4.2: Persistence Mode","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/persistence_mode_test/#summary","title":"Summary","text":"<p>Validate gRIBI route persistence.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/persistence_mode_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</p> </li> <li> <p>Establish gRIBI connection to device (referred to as gRIBI-A), setting     SINGLE_PRIMARY and persistence to PRESERVE. Make it become leader.</p> <ul> <li> <p>Inject an IPv4Entry for 203.0.113.0/24 pointed to a NHG containing a NH     of ATE port-2. Ensure that traffic with a destination in 203.0.113.0/24     can be forwarded between ATE port-1 and port-2. Validate AFT entry is     installed through telemetry.</p> </li> <li> <p>Disconnect gRIBI-A client and ensure that traffic for a destination in     203.0.113.0/24 can still be forwarded between ATE port-1 and port-2.     Validate that the entry continues to be installed in the AFT.</p> </li> <li> <p>Reconnect gRIBI-A using the same parameters, and delete the IPv4Entry     for 203.0.113.0/24 created previously. Ensure that traffic can no longer     be forwarded to a destination in 203.0.113.0/24, and that AFT telemetry     indicates the entry is no longer installed.</p> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/persistence_mode_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gRIBI<ul> <li>ModifyRequest<ul> <li>SessionParameters:<ul> <li>redundancy</li> <li>persistence</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/persistence_mode_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>AFT<ul> <li>/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix/</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_non_default_vrf_test/","title":"TE-6.2: Route Removal In Non Default VRF","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_non_default_vrf_test/#summary","title":"Summary","text":"<p>Validate that Flush RPC in gRIBI removes routes in non-default VRF as expected.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_non_default_vrf_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</li> <li>Create a non-default VRF (VRF-1) that includes DUT port-1.</li> <li>Connect gRIBI client (gRIBI-A) to DUT, with persistence set to <code>PRESERVE</code>     and <code>SINGLE_PRIMARY</code> redundancy specified and make it become leader. Connect     a second client (gRIBI-B) using the same parameters, but with     <code>election_id=leader_election_id-1</code>.</li> <li>Inject an IPv4Entry for 198.51.100.0/24 into VRF-1, with its referenced NHG     and NH in the default routing-instance pointing to ATE port-2.<ul> <li>Ensure that packets can be forwarded between ATE port-1 and port-2 for     destinations within 198.51.100.0/24.</li> <li>Issue Flush RPC from gRIBI-A for VRF-1, ensure that entries are removed     via validating packet forwarding and telemetry;</li> <li>Re-inject entry for 198.51.100.0/24 in VRF-1 from gRIBI-A</li> <li>Issue Flush from gRIBI-B, ensure that entries are not removed via     validating packet forwarding and telemetry; expect a NOT_PRIMARY RPC     response error.</li> <li>Make gRIBI-B become leader.</li> <li>Issue Flush from gRIBI-B for VRF-1, ensure that entries are removed via     packet forwarding and telemetry.</li> <li>Re-inject entry for 198.51.100.0/24 in VRF-1 from gRIBI-B. Re-inject     entry for 198.51.110.0/24 in default VRF,from gRIBI-B, referencing the     same NHG and NH pointing to port-2.</li> <li>Ensure entries\u2019 existence via packet forwarding and telemetry for     198.51.100.0/24. Ensure entries\u2019 existence via telemetry for     198.51.110.0/24.</li> <li>Issue Flush RPC from gRIBI-B for default VRF</li> <li>Ensure that the gRIBI-B receives     <code>NON_ZERO_REFERENCE_REMAIN</code>.     Ensure that the IPEntry 198.51.100.0/24 is not removed, by validating     packet forwarding and telemetry. Ensure that 198.51.110.0/24 has been     removed by validating telemetry.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_non_default_vrf_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_non_default_vrf_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_non_default_vrf_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI<ul> <li>Flush</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_non_default_vrf_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_via_flush_test/","title":"TE-6.1: Route Removal via Flush","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_via_flush_test/#summary","title":"Summary","text":"<p>Validate that Flush RPC in gRIBI removes routes in the default VRF as expected.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_via_flush_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</li> <li>Connect gRIBI client (gRIBI-A) to DUT, with persistence set to PRESERVE and     SINGLE_PRIMARY redundancy specified and make it become leader. Connect a     second client (gRIBI-B) using the same parameters, but with     <code>election_id=leader_election_id-1</code>.</li> <li>Inject an entry into the default network instance pointing to ATE port-2.<ul> <li>Ensure that traffic can be forwarded between ATE port-1 and ATE port-2     for destinations in 198.51.100.0/24.</li> <li>Issue Flush RPC from gRIBI-A, and ensure that packets can no longer be     forwarded for destinations in 192.0.2.0/2. Ensure that AFT telemetry     reflects the entry being removed.</li> <li>Re-inject entry for 198.51.100.0/24 from gRIBI-A.</li> <li>Issue Flush RPC from gRIBI-B. Ensure that entries are not removed via     packet forwarding and AFT telemetry; expect a NOT_PRIMARY RPC response     error.</li> <li>Make <code>gRIBI-B</code> become leader.</li> <li>Issue Flush from gRIBI-B, ensure that entries are removed via packet     forwarding and telemetry.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_via_flush_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_via_flush_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_via_flush_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gRIBI<ul> <li>Flush</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/route_removal_via_flush_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/static_lsp/","title":"TE-9.1: MPLS based forwarding Static LSP","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/static_lsp/#summary","title":"Summary","text":"<p>Validate static lsp functionality.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/static_lsp/#procedure","title":"Procedure","text":"<ul> <li>Create topology ATE1\u2013DUT1-ATE2</li> <li>Enable MPLS forwarding and create egress static LSP to pop the label and forward to ATE2:</li> <li>Match incoming label (1000001)</li> <li>Set IP next-hop</li> <li>Set egress interface</li> <li>Set the action to pop label</li> <li>Start 2 traffic flows with specified MPLS tags IPv4-MPLS[1000002]-MPLS[1000001]</li> <li>Verify that traffic is received at ATE2 with MPLS label [1000001] removed</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/static_lsp/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config</li> <li>/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop</li> <li>/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label</li> <li>/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label</li> <li>/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/supervisor_failure_test/","title":"TE-8.2: Supervisor Failure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/supervisor_failure_test/#summary","title":"Summary","text":"<p>Ensure that gRIBI entries are persisted over supervisor failure.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/supervisor_failure_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2. Assign IPv4     addresses to all ports.</p> </li> <li> <p>Connect gRIBI client to DUT specifying persistence mode PRESERVE,     <code>SINGLE_PRIMARY</code> client redundancy in the SessionParameters request, and     make it become leader. Ensure that no error is reported from the gRIBI     server.</p> </li> <li> <p>Add an <code>IPv4Entry</code> for prefix <code>203.0.113.0/24</code> pointing to ATE port-2 via     <code>gRIBI-A</code>. Ensure that the entry is active through AFT telemetry and correct     ACK is received.</p> </li> <li> <p>Send traffic from ATE port-1 to prefix <code>203.0.113.0/24</code>, and ensure traffic     flows 100% and reaches ATE port-2.</p> </li> <li> <p>Validate: Traffic continues to be forwarded between ATE port-1 and ATE     port-2 during supervisor switchover triggered using gNOI     <code>SwitchControlProcessor</code>.</p> <p>Following reconnection of a gRIBI client to new master supervisor , ensure the prefix <code>203.0.113.0/24</code> pointing to ATE port-2 is present and traffic flows 100% from ATE port-1 to ATE port-2.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/supervisor_failure_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<ul> <li>gNOI:<ul> <li>System<ul> <li>SwitchControlProcessor</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/supervisor_failure_test/#config-parameter-coverage","title":"Config parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/supervisor_failure_test/#telemery-parameter-coverage","title":"Telemery parameter coverage","text":"<ul> <li> <p>CHASSIS:</p> <ul> <li>/components/component[name=]/state/last-reboot-time <li>/components/component[name=]/state/last-reboot-reason <li> <p>CONTROLLER_CARD:</p> <ul> <li>/components/component[name=]/state/redundant-role <li>/components/component[name=]/state/last-switchover-time <li>/components/component[name=]/state/last-switchover-reason/trigger <li>/components/component[name=]/state/last-switchover-reason/details <li>/components/component[name=]/state/last-reboot-time <li>/components/component[name=]/state/last-reboot-reason"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/weighted_balancing_test/","title":"TE-3.2: Traffic Balancing According to Weights","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/weighted_balancing_test/#summary","title":"Summary","text":"<p>Ensure that traffic splits within a <code>NextHopGroup</code> are correctly honoured.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/weighted_balancing_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Configure ATE port-1 connected to DUT port-1, and ATE port 2-9 connected to     DUT port 2-9. Connect to gRIBI with persistence <code>PRESERVE</code>, make it become     leader and flush all entries before each case.</p> </li> <li> <p>Via gRIBI, install an <code>IPv4Entry</code> for 203.0.113.0/24 pointing to a     <code>NextHopGroup</code> id 10.</p> </li> <li> <p>Install next-hops corresponding to each of ATE port 2-9 from the DUT mapped     to an IPv4 address, e.g., 192.0.2.2/30 corresponding to ATE port 2. For the     following cases, verify (ensuring traffic with sufficient entropy - mixed     IPv4 source and destination ports):</p> <ul> <li>With NHG 10 containing 1 next hop, 100% of traffic is forwarded to the     installed next-hop.</li> <li>With NHG 10 containing 2 next hops with no associated weights assigned,     50% of traffic is forwarded to each next-hop.</li> <li>With NHG 10 containing 8 next hops, with no associated weights assigned,     12.5% of traffic is forwarded to each next-hop.</li> <li> <p>With NHG 10 containing 2 next-hops, specify and validate the following     ratios:</p> <ul> <li>Weight 1:1 - 50% per-NH.</li> <li>Weight 2:1 - 66% traffic to NH1, 33% to NH2.</li> <li>Weight 9:1 - 90% traffic to NH1, 10% to NH2.</li> <li>Weight 31:1 - ~96.9% traffic to NH1, ~3.1% to NH2.</li> <li>Weight 63:1 - ~98.4% traffic to NH1, ~1.6% to NH2.</li> </ul> </li> </ul> </li> <li> <p>Validate that weights of:</p> <ul> <li>&lt;64K are supported</li> <li>&gt;64K are correctly balanced if the device supports it.</li> </ul> </li> <li> <p>With NHG10 containing 8 next-hops, with a weight of 1 assigned to each,     sequentially remove each next-hop by turning down the port at the ATE     (invalidates nexthop), ensure that traffic is rebalanced across remaining     NHs until only one NH remains.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/weighted_balancing_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>TODO:     /network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/gribi/otg_tests/weighted_balancing_test/#protocolrpc","title":"Protocol/RPC","text":"<ul> <li>gRIBI:<ul> <li>Modify()<ul> <li>ModifyRequest:<ul> <li>AFTOperation:<ul> <li>next_hop_group<ul> <li>NextHopGroupKey: id</li> <li>NextHopGroup: weight</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_all_not_viable_test/","title":"RT-5.7 Aggregate Not Viable All","text":"<p>[TODO: test automation/coding; issue https://github.com/openconfig/featureprofiles/issues/1655]</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_all_not_viable_test/#summary","title":"Summary","text":"<p>Test forwarding-viable with LAG and routing</p> <p>Ensure that when all LAG member become set with forwarding-viable == FALSE. - forwarding-viable=false impact only transmit traffic on all member port. - All member ports set with forwarding-viable=false can receive all type of   traffic and forward it normally (same as with forwarding-viable=true) - ISIS adjacency is established on LAG port w/ all member set to   forwarding-viable == FALSE - Traffic that normally egress LAG with all members set to forwarding-viable ==   FALSE is forwarded by the next best egress interface/LAG.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_all_not_viable_test/#procedure","title":"Procedure","text":"<pre><code>                                               LAG_2\n+------------+            +-------------+ p2     .    p2   +--------------+\n|  ATE       |            |             +-------;-:--------+   ATE        |\n|            |            |             + - - - + + - - - -|              |\n|            |            |             + - - - + + - - - -|     .-------.|\n|.-------.   |            |             +-------+-+--------+    (  pfx2   )\n(  pfx1   )  |     .      |             | p7    : ;   p7   |     `-------'|\n|`-------'   | p1 ; : p1  |     DUT     |        '         |     .-------.|\n|            |----+-+-----|             |                  |    (  pfx3   )\n|            |    | |     |             | p8     .    p8   |     `-------'|\n|            |    | |     |             +-------;-:--------+     .-------.|\n|            |    : ;     |             |       | |        |    (  pfx4   )\n|            |     '      |             |       | |        |     `-------'|\n|            |  LAG_1     |             +-------+-+--------+              |\n+------------+            +-------------+ p9    : ;   p9   +--------------+\n                                                 '\n                                                LAG_3\n</code></pre> <ul> <li>Connect ATE port-1 to DUT port-1, and ATE ports 2 through 7 to DUT ports 2-7,   and ATE ports 8, 9 to DUT ports 8, 9</li> <li>Configure ATE and DUT ports 1 to be LAG_1 w/ LACP running.</li> <li>Configure ATE and DUT ports 2-7 to be LAG_2 w/ LACP running.</li> <li>Configure ATE and DUT ports 8-9 to be LAG_3 w/ LACP running.</li> <li>Establish ISIS adjacencies on LAG_1, LAG_2, LAG_3.</li> <li>Advertise one network prefix (pfx1) from ATE LAG_1</li> <li>Advertise one network prefix (pfx2) from ATE LAG_2 and ATE LAG_3.</li> <li>Establish iBGP between ATE and DUT over LGA_1 using LAG_1 interface IPs and advertise prefix pfx3 with BGP NH from pfx2 range.</li> <li> <p>Programm via gRIBI route for prefix pfx4 with single NHG pointing LAG_2 (al   ports are forwarding-viable at this point).</p> </li> <li> <p>For ISIS cost of LAG_2 lower then ISIS cost of LAG_3:</p> </li> <li>Run traffic:<ul> <li>From prefix pfx1 to all three: pfx2, pfx3, pfx4</li> <li>From prefix pfx2 to: pfx1</li> </ul> </li> <li>Make the forwarding-viable transitions from TRUE --&gt; FALSE on ports 3-7     within the LAG_2 on the DUT<ul> <li>ensure that only DUT port 2 of LAG ports has bidirectional traffic.</li> <li>Ensure there is no traffic transmitted out of DUT ports 3-7</li> <li>ensure that traffic is received on all port2-7 and delivered to ATE port1</li> <li>ensure there are no packet losses in steady state (no congestion).</li> <li>Ensure there is no traffic received on DUT LAG_3</li> <li>Ensure there is no traffic transmitted on DUT LAG_3</li> </ul> </li> <li>Disable/deactive laser on ATE port2; All LAG_2 members are either down (port2) or     set with forwarding-viable=FALSE<ul> <li>Ensure ISIS adjacency is UP on DUT LAG_2 and ATE LAG_2</li> <li>Ensure there is no traffic transmitted out of  DUT ports 2-7 (LAG_2)</li> <li>ensure that traffic is received on all port3-7 and delivered to ATE LAG_1</li> <li>ensure there are no packet losses in steady state (no congestion) for   traffic from ATE LAG_2 to ATE LAG_1 (pfx_1).</li> <li>ensure there are no packet losses in steady state (no congestion) for   traffic from ATE LAG_1 to ATE LAG_3 (pfx_2, pfx3).</li> <li>Ensure there is no traffic received on DUT LAG_3</li> <li>Ensure that traffic from ATE port1 to pfx2, pfx3 are transmitted via DUT   LAG3</li> <li>Ensure that traffic from ATE port1 to pfx4 are discarded on DUT</li> </ul> </li> <li>Make the forwarding-viable transitions from FALSE --&gt; TRUE on a ports 7     within the LAG_2 on the DUT<ul> <li>ensure that only DUT port 7 of LAG ports has bidirectional traffic.</li> <li>Ensure there is no traffic transmitted out of  DUT ports 2-6</li> <li>ensure that traffic is received on all port3-7 and delivered to ATE port1</li> <li>ensure there are no packet losses in steady state (no congestion).</li> <li>Ensure there is no traffic received on DUT LAG_3</li> <li>Ensure there is no traffic transmitted on DUT LAG_3</li> </ul> </li> <li> <p>Enable/activate laser on ATE port2; Make the forwarding-viable transitions     from FALSE --&gt; TRUE on a ports 3-7</p> </li> <li> <p>For ISIS cost of LAG_2 equall to ISIS cost of LAG_3</p> </li> <li>Run traffic:<ul> <li>From prefix pfx1 to all three: pfx2, pfx3, pfx4</li> <li>From prefix pfx2 to: pfx1</li> </ul> </li> <li>Make the forwarding-viable transitions from TRUE --&gt; FALSE on ports 3-7     within the LAG_2 on the DUT<ul> <li>ensure that only DUT port 2 of LAG_2 and all ports of LAG_3 ports has bidirectional traffic. The traffic split between LAG_2 and LAG_3 should be 50:50.</li> <li>Ensure there is no traffic transmitted out of DUT ports 3-7</li> <li>ensure that traffic is received on all port2-7 and ports8-9 and delivered to ATE port1</li> <li>ensure there are no packet losses in steady state (no congestion).</li> </ul> </li> <li>Disable/deactive laser on ATE port2; All LAG_2 members are either down (port2) or     set with forwarding-viable=FALSE.<ul> <li>Ensure ISIS adjacency is UP on DUT LAG_2 and ATE LAG_2</li> <li>Ensure there is no traffic transmitted out of  DUT ports 2-7 (LAG_2)</li> <li>ensure that traffic received on all port3-7 and ports8-9 is delivered to ATE LAG_1</li> <li>ensure there are no packet losses in steady state (no congestion) for   traffic from ATE LAG_2, LAG_3 to ATE LAG_1 (pfx_1).</li> <li>ensure there are no packet losses in steady state (no congestion) for   traffic from ATE LAG_1 to ATE LAG_3 (pfx_2, pfx3).</li> <li>Ensure that traffic from ATE port1 to pfx2, pfx3 are transmitted via DUT   LAG3</li> <li>Ensure that traffic from ATE port1 to pfx4 are discarded on DUT</li> </ul> </li> <li>Make the forwarding-viable transitions from FALSE --&gt; TRUE on a ports 7     within the LAG_2 on the DUT<ul> <li>ensure that only DUT port 7 of LAG_2 and all ports of LAG_3 ports has bidirectional traffic.</li> <li>Ensure there is no traffic transmitted out of  DUT ports 2-6</li> <li>ensure that traffic received on all port3-7 and ports8-9 is delivered to ATE port1</li> <li>ensure there are no packet losses in steady state (no congestion).</li> </ul> </li> <li>Enable/activate laser on ATE port2; Make the forwarding-viable transitions     from FALSE --&gt; TRUE on a ports 3-6 </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_all_not_viable_test/#deviation-option","title":"Deviation option","text":"<p>It is foreseen that implementation may drop ISIS adjacency if all members of LAG are set with forwarding-viable = FALSE. This scenario may be handled via the yet to be defined deviation <code>logicalInterfaceUPonNonViableAll</code>.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_all_not_viable_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/interfaces/interface/ethernet/config/aggregate-id</li> <li>/interfaces/interface/ethernet/config/forwarding-viable</li> <li>/interfaces/interface/aggregation/config/lag-type</li> <li>/lacp/config/system-priority</li> <li>/lacp/interfaces/interface/config/name</li> <li>/lacp/interfaces/interface/config/interval</li> <li>/lacp/interfaces/interface/config/lacp-mode</li> <li>/lacp/interfaces/interface/config/system-id-mac</li> <li>/lacp/interfaces/interface/config/system-priority</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_all_not_viable_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_all_not_viable_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_all_not_viable_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_forwarding_viable_test/","title":"RT-5.4: Aggregate Forwarding Viable","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_forwarding_viable_test/#summary","title":"Summary","text":"<p>Ensure that forwarding-viable transition does not result in packet loss. Ensure that setting forwarding-viable=false impact only transmitting traffic on given port. Ensure that port set with forwarding-viable=false can receive all type of traffic and forward it normally (same as with forwarding-viable=true)</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_forwarding_viable_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect ATE port-1 to DUT port-1, and ATE ports 2 through 9 to DUT ports 2-9. Configure ATE and DUT ports 2-9 to be part of a LAG.</p> </li> <li> <p>For both Static LAG and LACP: [TODO: https://github.com/openconfig/featureprofiles/issues/1553;]</p> <ul> <li>Run traffic bidirectionally between ATA port-1 and ATE port2-9;<ul> <li>ensure all ports has bidirectional traffic.</li> <li>ensure that traffic is load-balanced across all port2-9</li> <li>ensure ther is no packet losses in steady state (no congestion).</li> </ul> </li> <li>Make the forwarding-viable transitions from TRUE --&gt; FALSE on a single port within the LAG on the DUT (one of ports 2-9).<ul> <li>ensure that above DUT's port is not sending any traffic to ATE (hence corresponding ATE port do not recive any traffic)</li> <li>ensure that DUT load-balance traffic across remaing ports of LAG (7 out of port2-9)</li> <li>ensure that above DUT's port is receiving  traffic from coresponding ATE port</li> <li>ensure that there is no packet losses in steady state. (some very few packet could be lost right during transition)</li> <li>ensure that DUT recives ~equal traffic on all ports of LAG (all port2-9)</li> </ul> </li> <li>Make the forwarding-viable transitions from FALSE --&gt; TRUE on a single port within the LAG on the DUT (one of ports 2-9).<ul> <li>ensure that above DUT's port is sending traffic to ATE (hence corresponding ATE port do recive traffic)</li> <li>ensure that DUT load-balance traffic across all ports of LAG (all port2-9)</li> <li>ensure that above DUT's port is receiving  traffic from coresponding ATE port</li> <li>ensure that there is no packet losses in steady state. (some very few packet could be lost right during transition)</li> <li>ensure that DUT recives load-balanced traffic across all ports of LAG (all port2-9)</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_forwarding_viable_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/interfaces/interface/ethernet/config/aggregate-id</li> <li>/interfaces/interface/ethernet/config/forwarding-viable (from hercules) [ph1]</li> <li>/interfaces/interface/aggregation/config/lag-type</li> <li>/lacp/config/system-priority</li> <li>/lacp/interfaces/interface/config/name</li> <li>/lacp/interfaces/interface/config/interval</li> <li>/lacp/interfaces/interface/config/lacp-mode</li> <li>/lacp/interfaces/interface/config/system-id-mac</li> <li>/lacp/interfaces/interface/config/system-priority</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_forwarding_viable_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_forwarding_viable_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_forwarding_viable_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_test/","title":"RT-5.2: Aggregate Interfaces","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_test/#summary","title":"Summary","text":"<p>Validate link operational status of Static LAG and LACP.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, and ATE ports 2 through 9 to DUT ports     2-9. Configure ATE and DUT ports 2-9 to be part of a LAG.</li> <li>For both static LAG and LACP:<ul> <li>Ensure that LAG is successfully negotiated, verifying port status for     each of DUT ports 2-9 reflects expected LAG state via ATE and DUT     telemetry.</li> <li>Ensure that configuring a minimum links setting for the LAG the entire     interface is marked:<ul> <li>Down when min-1 links are up</li> <li>Up when min links are up</li> <li>Up when &gt;min links are up.</li> </ul> </li> <li>TODO: Verify the above by sending flows between ATE port-1 targeted     towards the LAG.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/interfaces/interface/ethernet/config/port-speed</li> <li>/interfaces/interface/ethernet/config/duplex-mode</li> <li>/interfaces/interface/ethernet/config/aggregate-id</li> <li>/interfaces/interface/aggregation/config/lag-type</li> <li>/interfaces/interface/aggregation/config/min-links</li> <li>TODO: /lacp/config/system-priority</li> <li>/lacp/interfaces/interface/config/name</li> <li>TODO: /lacp/interfaces/interface/config/interval</li> <li>/lacp/interfaces/interface/config/lacp-mode</li> <li>TODO: /lacp/interfaces/interface/config/system-id-mac</li> <li>TODO: /lacp/interfaces/interface/config/system-priority</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/aggregate_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>TODO: /lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts</li> <li>TODO: /lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts</li> <li>TODO:     /lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors</li> <li>TODO: /lacp/interfaces/interface/members/member/state/oper-key</li> <li>TODO: /lacp/interfaces/interface/members/member/state/partner-id</li> <li>TODO: /lacp/interfaces/interface/members/member/state/system-id</li> <li>TODO: /lacp/interfaces/interface/members/member/state/port-num</li> <li>/interfaces/interface/ethernet/state/aggregate-id</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/balancing_test/","title":"RT-5.3: Aggregate Balancing","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/balancing_test/#summary","title":"Summary","text":"<p>Load balancing across members of a LACP-controlled LAG</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/balancing_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, and ATE ports 2 through 9 to DUT ports     2-9. Configure ATE and DUT ports 2-9 to be part of a LACP-controlled LAG.</li> <li>Send flows between ATE port-1 targeted towards the LAG consisting of ATE     ports 2-9. Ensure that traffic is balanced across the LAG members with:<ul> <li>TODO (TCP header): IPv4 packets with varying TCP source ports.</li> <li>TODO (TCP header): IPv6 packets with varying TCP source ports.</li> <li>IPv6 packets with varying flow labels.</li> <li>TODO (TCP header): IPinIP containing IPv4 payload with varying TCP     source ports.</li> <li>TODO (TCP header): IPinIP containing IPv6 payload with varying TCP     source port.</li> <li>TODO: IPinIP containing IPv6 payload with varying flow labels.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/balancing_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/interfaces/interface/ethernet/config/aggregate-id</li> <li>/interfaces/interface/aggregation/config/lag-type</li> <li>/lacp/config/system-priority</li> <li>/lacp/interfaces/interface/config/name</li> <li>/lacp/interfaces/interface/config/interval</li> <li>/lacp/interfaces/interface/config/lacp-mode</li> <li>/lacp/interfaces/interface/config/system-id-mac</li> <li>/lacp/interfaces/interface/config/system-priority</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/balancing_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/balancing_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/aggregate/otg_tests/balancing_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/","title":"RT-5.5: Interface hold-time","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#summary","title":"Summary","text":"<p>Verify configurability of interface hold-time down of 300ms  and hold-time up of 5 sec.\\ Verify oper-state behaviour</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#procedure","title":"Procedure","text":"<ul> <li>Configure DUT port-1 to OTG port-1</li> <li>Configure static LAG on DUT and OTG with port-1 as member</li> <li>Configure hold-time down 300ms and hold-time up 5000ms</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#tc1-configuration-verification","title":"TC1 - configuration verification:","text":"<ul> <li>Get hold-time state from device and check if it matches what was send in configuration. (some implementation may round-up/round-down values)</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#tc2-long-down","title":"TC2 - long down:","text":"<ul> <li>Read timestamp of last oper-status change  form DUT port-1 </li> <li>Start sending Ethernet Remote Fault (RF) from OTG port-1 (or other mean which disable laser on OTG); read and store timestamp form OTG of this operation (OTG_STATE_CHANGE_TS).</li> <li>wait 1000 ms</li> <li>Read timestamp of last oper-status change  form DUT port-1 (DUT_LAST_CHANGE_TS)</li> <li>Verify that DUT LAG:</li> <li>oper-status is DOWN</li> <li>oper-status last change time has changed </li> <li>DUT_LAST_CHANGE_TS = OTG_STATE_CHANGE_TS + 300ms +/- tolerance; Use tolerance of 200ms.</li> <li>Stop sending Ethernet Remote Fault (RF) from OTG port-1 </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#tc3-short-up","title":"TC3 - short up:","text":"<ul> <li>Start sending Ethernet Remote Fault (RF) from OTG port-1 (or other mean which disable laser on OTG)</li> <li>Read timestamp of last oper-status change   </li> <li>Stop sending Ethernet Remote Fault (RF) from OTG port-1 for 4 seconds and then start send RF again. (or other mean which disable laser on OTG). Read and store timestamp form OTG of last operation (OTG_STATE_CHANGE_TS).</li> <li>Read timestamp of last oper-status change  form DUT port-1 (DUT_LAST_CHANGE_TS)</li> <li>Verify that DUT LAG:</li> <li>oper-status is DOWN</li> <li>oper-status last change time has NOT changed</li> <li>Stop sending Ethernet Remote Fault (RF) from OTG port-1 </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#tc4-long-up","title":"TC4 - long  up:","text":"<ul> <li>Start sending Ethernet Remote Fault (RF) from OTG port-1 (or other mean which disable laser on OTG)</li> <li>Read timestamp of last oper-status change   </li> <li>Stop sending Ethernet Remote Fault (RF) from OTG port-1 (or other mean which disable laser on OTG). Read and store timestamp form OTG of last operation (OTG_STATE_CHANGE_TS).</li> <li>wait 6 seconds</li> <li>Read timestamp of last oper-status change  form DUT port-1 (DUT_LAST_CHANGE_TS)</li> <li>Verify that DUT LAG:</li> <li>oper-status is UP</li> <li>oper-status last change time has changed</li> <li>DUT_LAST_CHANGE_TS = OTG_STATE_CHANGE_TS + 5000ms +/- tolerance; Use tolerance of 200ms.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#tc5-short-down","title":"TC5 - short down:","text":"<ul> <li>Read timestamp of last oper-status change   </li> <li>Start sending Ethernet Remote Fault (RF) from OTG port-1 for 200ms </li> <li>Verify that DUT LAG:</li> <li>oper-status is UP</li> <li>oper-status last change time has NOT changed</li> <li>Stop sending Ethernet Remote Fault (RF) from OTG port-1 </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/interfaces/interface/hold-time/config/up</li> <li>/interfaces/interface/hold-time/config/down</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/interfaces/interface/hold-time/config/up</li> <li>/interfaces/interface/hold-time/config/down</li> <li>/interfaces/interface/state/oper-status</li> <li>/interfaces/interface/state/last-change</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/holdtime/otg_tests/holdtime_test/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>FFF</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/","title":"RT-5.6: Disable IPv6 ND Router Arvetisment","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/#summary","title":"Summary","text":"<p>Validate IPv6 ND Router Advertisement (RA) could be completely disabled.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/#procedure","title":"Procedure","text":"<ul> <li>Connect DUT port-1 to OTG port-1</li> <li>Configure IPv6 address on DUT port-1</li> <li>Set IPv6 ND RA transmission interval on DUT port-1 to 5 seconds</li> <li>Disable IPv6 ND RA transmission on DUT port-1</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/#testcase-1-no-periodical-router-advertisement","title":"TestCase-1: No periodical Router Advertisement","text":"<ul> <li>Verify over period of 10 seconds that IPv6 ND RA doesn't arrives on OTG Port-1 (rfc4861 section 6.2.1)</li> <li>Observe IPv6 ND RA configuration state on DUT Port-1</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/#testcase-2-no-router-advertisement-in-response-to-router-solicitation","title":"TestCase-2: No Router Advertisement in response to Router Solicitation","text":"<ul> <li>Send IPv6 ND Router Solicitation from OTG Port-1</li> <li>Verify over period of 1 seconds that IPv6 ND RA doesn't arrives on OTG Port-1  (rfc4861 section 6.2.6)</li> <li>Observe IPv6 ND RA configuration state on DUT Port-1</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable: FALSE</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode:   ALL (default)</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/state/interval</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable: FALSE</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode:   ALL (default)</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_ND/otg_tests/disable_ipv6_nd_ra_test/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_link_local/otg_tests/ipv6_link_local_test/","title":"RT-5.8: IPv6 Link Local","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_link_local/otg_tests/ipv6_link_local_test/#summary","title":"Summary","text":"<p>Configure an IPv6 address which is in link local scope. Verify the link local IPv6 address exists by checking the state path.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_link_local/otg_tests/ipv6_link_local_test/#procedure","title":"Procedure","text":"<ul> <li>Subtest #1 - Configure IPv6 link local</li> <li>Configure DUT port 1 and OTG port 1 with an IPv6 link local scope IP address</li> <li>Configure DUT port 2 and OTG port 2 with an IPv6 link local scope IP address</li> <li> <p>Validate config and state paths are set</p> </li> <li> <p>Subtest #2 - Verify the interface will pass IPv6 traffic as expected</p> </li> <li>Send IPv6 traffic from OTG port 1 to OTG port 2, validate OTG port 2 does not receive the traffic</li> <li> <p>Send IPv6 traffic from OTG port 1 to DUT port 1, validate DUT port 1 receives the traffic</p> </li> <li> <p>Subtest #3 - Verify adding and removing global unicast address does not affect link local address</p> </li> <li>Add configuration for a global unicast address on DUT port 1 </li> <li>Validate config and state paths are set</li> <li>Remove configuration for the global unitcast address on DUT port 1</li> <li>Validate that DUT port 1 link local address is still configured</li> <li> <p>Send IPv6 traffic from OTG port 1 to DUT port 1, validate DUT port 1 receives the traffic</p> </li> <li> <p>Subtest #4 - Verify enable/disable of DUT port 1 does not affect link local address</p> </li> <li>Disable/enable the port and see if the configured link-local address stays?</li> <li>Validate that DUT port 1 link local address config and state paths continue to contain the address assignment</li> <li>Send IPv6 traffic from OTG port 1 to DUT port 1, validate DUT port 1 receives the traffic</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_link_local/otg_tests/ipv6_link_local_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<pre><code>/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip\n/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length\n/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/type\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_link_local/otg_tests/ipv6_link_local_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<pre><code>/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/ip\n/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/prefix-length\n/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/type\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_link_local/otg_tests/ipv6_link_local_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/ip/ipv6_link_local/otg_tests/ipv6_link_local_test/#required-dut-platform","title":"Required DUT platform","text":"<ul> <li>FFF - fixed form factor</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/loopback/ate_tests/loopback_aggregate_test/","title":"RT-5.6: Interface Loopback mode","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/loopback/ate_tests/loopback_aggregate_test/#summary","title":"Summary","text":"<p>Ensure Interface mode can be set to loopback mode and can be added as part of static LAG.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/loopback/ate_tests/loopback_aggregate_test/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/loopback/ate_tests/loopback_aggregate_test/#testcase-1","title":"TestCase-1:","text":"<ul> <li>Configure DUT port-1 to ATE port-1</li> <li>Admin down ATE port-1 down</li> <li>Verify DUT port-1 is down</li> <li>Configure \u201cloopback mode\u201d set to \u201cFACILITY\u201d</li> <li>Add port-1 as part of Static LAG (lacp mode static(on))</li> <li>Validate that port-1 operational status is \u201cUP\u201d</li> <li>Validate that  LAG port status is \u201cUP\u201d</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/loopback/ate_tests/loopback_aggregate_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/interfaces/interface/config/loopback-mode</li> <li>/interfaces/interface/ethernet/config/port-speed</li> <li>/interfaces/interface/ethernet/config/duplex-mode</li> <li>/interfaces/interface/ethernet/config/aggregate-id</li> <li>/interfaces/interface/aggregation/config/lag-type</li> <li>/interfaces/interface/aggregation/config/min-links</li> <li>/lacp/config/system-priority</li> <li>/lacp/interfaces/interface/config/name</li> <li>/lacp/interfaces/interface/config/interval</li> <li>/lacp/interfaces/interface/config/lacp-mode</li> <li>/lacp/interfaces/interface/config/system-id-mac</li> <li>/lacp/interfaces/interface/config/system-priority</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/loopback/ate_tests/loopback_aggregate_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/interfaces/interface/state/loopback-mode</li> <li>/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts</li> <li>/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts</li> <li>/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors</li> <li>/lacp/interfaces/interface/members/member/state/oper-key</li> <li>/lacp/interfaces/interface/members/member/state/partner-id</li> <li>/lacp/interfaces/interface/members/member/state/system-id</li> <li>/lacp/interfaces/interface/members/member/state/port-num</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/loopback/ate_tests/loopback_aggregate_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/loopback/ate_tests/loopback_aggregate_test/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/","title":"RT-5.1: Singleton Interface","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#summary","title":"Summary","text":"<p>Singleton L3 interface (non-LAG) is supported on DUT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#testbed-type","title":"Testbed type","text":"<ul> <li>https://github.com/openconfig/featureprofiles/blob/main/topologies/atedut_2.testbed</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#procedure","title":"Procedure","text":"<p>For each port speed and breakout port configuration that need to be tested, add a new testbed configuration with the desired port types.</p> <ul> <li>Configure ATE port-1 connected to DUT port-1, and ATE port-2 connected to     DUT port-2, with the relevant IPv4 and IPv6 addresses.</li> <li>Configure static MAC address to be 02:1a:WW:XX:YY:ZZ where WW:XX:YY:ZZ are     the octets of IPv4.</li> <li>Ensure: ARP discovers static MAC address specified when port is         configured with static MAC.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#rt-511-singleton-interface-verification","title":"RT-5.1.1 - singleton interface verification:","text":"<ul> <li>Validate that port speed is reported correctly and that port telemetry     matches expected negotiated speeds for forced, auto-negotiation, and     auto-negotiation while overriding port speed and duplex.</li> <li>TODO: If the port is a breakout, ensure that all breakout ports are         correctly reported.</li> <li>For IPv4 and IPv6:</li> <li>With traffic flow from ATE port-1 to ATE port-2, ensure:<ul> <li>For MTUs [^1] of 1500, 5000, 9236:</li> <li>Packets with size greater than the configured MTU with DF-bit             set are not transmitted.</li> <li>Packets with size of configured MTU are received.</li> <li>Packets with size less than the configured MTU are received.</li> </ul> </li> </ul> <p>[^1]: The MTU specified above refers to the L3 MTU, which is the payload portion     of an Ethernet frame.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#rt-512-link-flaps","title":"RT-5.1.2 - link flaps:","text":"<ul> <li>Bring down the physical layer of ATE port-1, and bring it back up.     Repeat this a few times (minimum 2)</li> <li>Verify that the interface goes down by checking the physical state on DUT/ATE.</li> <li>Verify that the interface is back up by checking the physical state on DUT/ATE.</li> <li>Ensure that the number of interface state changes are accurately             captured in the OC path.</li> <li>Verify that the traffic flow from ATE port-1 to ATE port-2 is             now working after the interface is back up.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#rt-513-todo-httpsgithubcomopenconfigfeatureprofilesissues2320","title":"RT-5.1.3 [TODO: https://github.com/openconfig/featureprofiles/issues/2320]","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#subscribe-to-interface-counters-with-sample-mode","title":"Subscribe to interface counters with SAMPLE mode:","text":"<ul> <li>Run the test twice, once with a SAMPLE interval of 10 Seconds and once again     with a SAMPLE interval of 15 seconds</li> <li>Initiate traffic</li> <li>Counters should be verified using gNMI subscribe with sample mode for inbound port (DUT port-1):<ul> <li>/interfaces/interface/state/counters/in-unicast-pkts</li> <li>/interfaces/interface/state/counters/in-broadcast-pkts</li> <li>/interfaces/interface/state/counters/in-multicast-pkts</li> <li>/interfaces/interface/state/counters/in-octets</li> <li>/interfaces/interface/state/counters/in-discards</li> <li>/interfaces/interface/state/counters/in-errors</li> <li>/interfaces/interface/state/counters/in-fcs-errors</li> </ul> </li> <li>Counters should be verified using gNMI subscribe with sample mode for outbound port (DUT port-2):<ul> <li>/interfaces/interface/state/counters/out-unicast-pkts</li> <li>/interfaces/interface/state/counters/out-broadcast-pkts</li> <li>/interfaces/interface/state/counters/out-multicast-pkts</li> <li>/interfaces/interface/state/counters/out-octets</li> <li>/interfaces/interface/state/counters/out-errors</li> <li>/interfaces/interface/state/counters/out-discards</li> </ul> </li> <li>Ensure inbound and outbound unicast counters are the same</li> <li>Ensure counters increment at the selected SAMPLE interval</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/interfaces/interface/config/name</li> <li>/interfaces/interface/config/description</li> <li>/interfaces/interface/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu</li> <li>/interfaces/interface/config/id</li> <li>/interfaces/interface/ethernet/config/mac-address</li> <li>/interfaces/interface/ethernet/config/port-speed</li> <li>/interfaces/interface/ethernet/config/duplex-mode</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/interfaces/interface/ethernet/state/counters/in-mac-pause-frames</li> <li>/interfaces/interface/ethernet/state/counters/out-mac-pause-frames</li> <li>/interfaces/interface/ethernet/state/mac-address</li> <li>/interfaces/interface/state/counters/in-broadcast-pkts</li> <li>/interfaces/interface/state/counters/in-discards</li> <li>/interfaces/interface/state/counters/in-errors</li> <li>/interfaces/interface/state/counters/in-multicast-pkts</li> <li>/interfaces/interface/state/counters/in-octets</li> <li>/interfaces/interface/state/counters/in-unicast-pkts</li> <li>/interfaces/interface/state/counters/in-unknown-protos</li> <li>/interfaces/interface/state/counters/out-broadcast-pkts</li> <li>/interfaces/interface/state/counters/out-discards</li> <li>/interfaces/interface/state/counters/out-errors</li> <li>/interfaces/interface/state/counters/out-multicast-pkts</li> <li>/interfaces/interface/state/counters/out-octets</li> <li>/interfaces/interface/state/counters/out-pkts</li> <li>/interfaces/interface/state/counters/out-unicast-pkts</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/state/mtu</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/state/mtu</li> <li>/interfaces/interface/state/oper-status</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts</li> <li>/interfaces/interface/ethernet/state/aggregate-id</li> <li>/interfaces/interface/ethernet/state/port-speed</li> <li>/interfaces/interface/state/admin-status</li> <li>/interfaces/interface/state/counters/out-octets</li> <li>/interfaces/interface/state/description</li> <li>/interfaces/interface/state/type</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts</li> <li>/interfaces/interface/state/hardware-port</li> <li>/interfaces/interface/state/id</li> <li>/interfaces/interface/state/counters/in-fcs-errors</li> <li>/interfaces/interface/state/counters/carrier-transitions</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gNMI</li> <li>Get</li> <li>Subscribe</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/otg_tests/singleton_test/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/singleton_with_breakouts/","title":"RT-8: Singleton with breakouts","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/singleton_with_breakouts/#summary","title":"Summary","text":"<p>This test ensures that all singleton interfaces irrespective of their breakout configuration are streaming all the necessary leaves. More leaves can be added to this test for verification</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/singleton_with_breakouts/#testbed","title":"Testbed","text":"<p>This test requires a DUT with the following setup * The DUT should have following PMDs   * 1x400G-FR4+   * 4x100G-DR4+   * 1x100G-LR   * 1x100G-FR * ATE connections are not required.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/singleton_with_breakouts/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/singleton_with_breakouts/#rt-81-baseline-test","title":"RT-8.1 - Baseline test:","text":"<ul> <li>Push interface configuration to the DUT including breakout configuration for all the PMDs stated in the Testbed section above.</li> <li>Get an inventory of all the singleton interfaces on the DUT used for this test using <code>GET /interfaces/interface/</code> subscription.</li> <li>For every interface, verify <code>interfaces/interface/state/hardware-port</code> is populated with a reference to <code>/components/component/name</code></li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/singleton_with_breakouts/#rt-82-reboot-test","title":"RT-8.2 - Reboot test:","text":"<ul> <li>Reboot DUT</li> <li>Repeat the test in RT-6.1 above.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/singleton_with_breakouts/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/port/breakout-mode/groups/group/index</li> <li>/components/component/port/breakout-mode/groups/group/config</li> <li>/components/component/port/breakout-mode/groups/group/config/index</li> <li>/components/component/port/breakout-mode/groups/group/config/num-breakouts</li> <li>/components/component/port/breakout-mode/groups/group/config/breakout-speed</li> <li>/components/component/port/breakout-mode/groups/group/config/num-physical-channels</li> <li>gNOI.Reboot</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/singleton/singleton_with_breakouts/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/interfaces/interface/</li> <li>/interfaces/interface/state/hardware-port</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/staticarp/ate_tests/static_arp_test/","title":"TE-1.1: Static ARP","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/staticarp/ate_tests/static_arp_test/#summary","title":"Summary","text":"<p>Ensure static ARP entries installed on the DUT are honoured.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/staticarp/ate_tests/static_arp_test/#procedure","title":"Procedure","text":"<ul> <li>Configure ATE port-1 connected to DUT port-1, and ATE port-2 connected to     DUT port-2, with the relevant IPv4 and IPv6 addresses.</li> <li>Without static ARP entry:<ul> <li>Configure ATE traffic flow to enable custom egress filter on the last     15-bits of the destination MAC (starting at bit offset 33 of the     ethernet packet).</li> <li>Ensure that traffic can be forwarded between ATE port-1 and ATE port-2     normally.</li> <li>Check that the egress filter picks up the last 15-bit of ATE default MAC     address.</li> </ul> </li> <li>Add static entry to DUT interfaces to override the ATE MAC address.</li> <li>With static ARP entry:<ul> <li>Configure ATE traffic flow with custom egress filter as before, and     ensure that traffic can be forwarded between ATE port-1 and ATE port-2.</li> <li>Check that the egress filter picks up the last 15-bit of the MAC address     set by static ARP.</li> </ul> </li> </ul> <p>Note that ATE ports are promiscuous, i.e. they will receive all packets regardless of the destination MAC. The custom egress filter is used to tell what are the destination MAC addresses of the packets seen by the ATE.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/staticarp/ate_tests/static_arp_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/staticarp/otg_tests/static_arp_test/","title":"TE-1.1: Static ARP","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/staticarp/otg_tests/static_arp_test/#summary","title":"Summary","text":"<p>Ensure static ARP entries installed on the DUT are honoured.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/staticarp/otg_tests/static_arp_test/#procedure","title":"Procedure","text":"<ul> <li>Configure OTG port-1 connected to DUT port-1, and OTG port-2 connected to     DUT port-2, with the relevant IPv4 and IPv6 addresses.</li> <li>Without static ARP entry:<ul> <li>Configure OTG traffic flow to enable custom egress filter on the last     15-bits of the destination MAC (starting at bit offset 33 of the     ethernet packet).</li> <li>Ensure that traffic can be forwarded between OTG port-1 and OTG port-2     normally.</li> <li>Check that the egress filter picks up the last 15-bit of OTG default MAC     address.</li> </ul> </li> <li>Add static entry to DUT interfaces to override the OTG MAC address.</li> <li>With static ARP entry:<ul> <li>Configure OTG traffic flow with custom egress filter as before, and     ensure that traffic can be forwarded between OTG port-1 and OTG port-2.</li> <li>Check that the egress filter picks up the last 15-bit of the MAC address     set by static ARP.</li> </ul> </li> </ul> <p>Note that OTG ports are promiscuous, i.e. they will receive all packets regardless of the destination MAC. The custom egress filter is used to tell what are the destination MAC addresses of the packets seen by the OTG.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/interface/staticarp/otg_tests/static_arp_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/ate_tests/core_lldp_tlv_population_test/","title":"RT-6.1: Core LLDP TLV Population","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/ate_tests/core_lldp_tlv_population_test/#summary","title":"Summary","text":"<p>Determine LLDP advertisement and reception operates correctly.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/ate_tests/core_lldp_tlv_population_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, enable LLDP on each port.</li> <li>Configure LLDP enabled=true for DUT port-1 and ATE port-1</li> <li>Determine that telemetry from:<ul> <li>ATE reports correct values from DUT.</li> <li>DUT reports correct values from ATE.</li> </ul> </li> <li>Configure LLDP is disabled at global level for DUT.<ul> <li>Set /lldp/config/enabled to FALSE.</li> <li>Ensure that DUT does not generate any LLDP messages irrespective of the     configuration of lldp/interfaces/interface/config/enabled (TRUE or     FALSE) on any interface.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/ate_tests/core_lldp_tlv_population_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/lldp/config/enabled</li> <li>/lldp/interfaces/interface/config/enabled</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/ate_tests/core_lldp_tlv_population_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id</li> <li>/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-subtype</li> <li>/lldp/interfaces/interface/neighbors/neighbor/state/port-id</li> <li>/lldp/interfaces/interface/neighbors/neighbor/state/port-id-subtype</li> <li>/lldp/interfaces/interface/neighbors/neighbor/state/system-name</li> <li>/lldp/interfaces/interface/state/name</li> <li>/lldp/state/chassis-id</li> <li>/lldp/state/chassis-id-type</li> <li>/lldp/state/system-name</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/ate_tests/core_lldp_tlv_population_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>LLDP:</p> <ul> <li>/lldp/config/enabled = true</li> <li>/lldp/interfaces/interface/config/enabled = true</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/ate_tests/core_lldp_tlv_population_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/otg_tests/core_lldp_tlv_population_test/","title":"RT-6.1: Core LLDP TLV Population","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/otg_tests/core_lldp_tlv_population_test/#summary","title":"Summary","text":"<p>Determine LLDP advertisement and reception operates correctly.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/otg_tests/core_lldp_tlv_population_test/#procedure","title":"Procedure","text":"<ul> <li>Connect ATE port-1 to DUT port-1, enable LLDP on each port.</li> <li>Configure LLDP enabled=true for DUT port-1 and ATE port-1</li> <li>Determine that telemetry from:<ul> <li>ATE reports correct values from DUT.</li> <li>DUT reports correct values from ATE.</li> </ul> </li> <li>Configure LLDP is disabled at global level for DUT.<ul> <li>Set /lldp/config/enabled to FALSE.</li> <li>Ensure that DUT does not generate any LLDP messages irrespective of the     configuration of lldp/interfaces/interface/config/enabled (TRUE or     FALSE) on any interface.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/otg_tests/core_lldp_tlv_population_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/lldp/config/enabled</li> <li>/lldp/interfaces/interface/config/enabled</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/otg_tests/core_lldp_tlv_population_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id</li> <li>/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-subtype</li> <li>/lldp/interfaces/interface/neighbors/neighbor/state/port-id</li> <li>/lldp/interfaces/interface/neighbors/neighbor/state/port-id-subtype</li> <li>/lldp/interfaces/interface/neighbors/neighbor/state/system-name</li> <li>/lldp/interfaces/interface/state/name</li> <li>/lldp/state/chassis-id</li> <li>/lldp/state/chassis-id-type</li> <li>/lldp/state/system-name</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/otg_tests/core_lldp_tlv_population_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>LLDP:</p> <ul> <li>/lldp/config/enabled = true</li> <li>/lldp/interfaces/interface/config/enabled = true</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/lldp/otg_tests/core_lldp_tlv_population_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/mtu/largeippacket/otg_tests/large_ip_packet_transmission/","title":"MTU-1.3: Large IP Packet Transmission","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/mtu/largeippacket/otg_tests/large_ip_packet_transmission/#summary","title":"Summary","text":"<p>Test that ports with sufficiently high MTU do not fragment any packets when flows of various size  IPv4 and IPv6 packet sizes are sent over them.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/mtu/largeippacket/otg_tests/large_ip_packet_transmission/#procedure","title":"Procedure","text":"<ul> <li>Configure DUT with routed input and output interfaces with an Ethernet MTU of 9216.</li> <li>Test should be executed with two different interface/connectivity profiles:     1) Standalone -- one input and one output port     2) Bundle with four input members and four output members</li> <li>Run traffic flows of the following size over IPv4 and IPv6 between ATE ports. </li> <li>1500 Bytes</li> <li>2000 Bytes</li> <li>4000 Bytes</li> <li>9202 Bytes</li> <li>Assert ATE reports packets sent and received count are the same, indicating no fragmentation, and    successful transit.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/mtu/largeippacket/otg_tests/large_ip_packet_transmission/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/interfaces/interface[name=*]/config/mtu:</li> <li>/interfaces/interface[name=]/subinterfaces/subinterface[index=]/ipv4/config/mtu:</li> <li>/interfaces/interface[name=]/subinterfaces/subinterface[index=]/ipv6/config/mtu:</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/mtu/largeippacket/otg_tests/large_ip_packet_transmission/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>No configuration coverage, validates success by checking flow statistics between ATE ports.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/mtu/largeippacket/otg_tests/large_ip_packet_transmission/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/mtu/largeippacket/otg_tests/large_ip_packet_transmission/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/networkinstance/otg_tests/defaults_test/","title":"OC-1.2: Default Address Families","text":"<p>TODO(robshakir): fill in test plan from code already written.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/p4rt/otg_tests/p4rt_daemon_failure_test/","title":"P4RT-1.2: P4RT Daemon Failure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/p4rt/otg_tests/p4rt_daemon_failure_test/#summary","title":"Summary","text":"<p>Ensure that data plane traffic is not interrupted by P4RT daemon failure.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/p4rt/otg_tests/p4rt_daemon_failure_test/#procedure","title":"Procedure","text":"<ul> <li>P4RT-1.2.1</li> <li>Connect ATE port-1 to DUT port-1, and ATE port-2 to DUT port-2.</li> <li>Establish a gRIBI client connection to the DUT (SINGLE_PRIMARY and PRESERVE     mode) and make it become leader.</li> <li>Inject an IPv4 Entry for 203.0.113.0/24 pointed to a NHG containing a NH         of ATE port-2. Ensure that traffic with a destination in 203.0.113.0/24         can be forwarded between ATE port-1 and port-2. Verify through AFT         telemetry that the route is installed.</li> <li>gNMI Subscribe ON_CHANGE to <code>/interfaces/interface/id</code></li> <li>Kill P4RT daemon on DUT using gNOI test command (gNOI.KillProcess).</li> <li> <p>Validate:</p> <ul> <li><code>/interfaces/interface/id</code> does not change</li> <li>Traffic can continue to be forwarded between ATE port-1 and port-2.</li> </ul> </li> <li> <p>NOTE: P4RT is not being used to configure the data plane in this test because our     test tables only configure the control plane traffic. Instead, this test     configures the data plane using gRIBI. </p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/p4rt/otg_tests/p4rt_daemon_failure_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gRIBI<ul> <li>ModifyRequest</li> <li>GetRequest</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/p4rt/otg_tests/p4rt_daemon_failure_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix/</li> <li>/interfaces/interface/state/id</li> <li>/interfaces/interface/state/name</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/SetRequest_controll_card_switchover/","title":"gNMI-1.19 ConfigPush after Control Card switchover","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/SetRequest_controll_card_switchover/#summary","title":"Summary","text":"<p>This test verifies if a large config can be bushed via gNMI SetRequest within 2 minutes after Control Card switchover. </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/SetRequest_controll_card_switchover/#procedure","title":"Procedure","text":"<ul> <li>Prepare a large OpenConfig config file to be pushed within a single setRequest.</li> <li>150 LAG interfaces w/ ip, ipv6 configuration</li> <li>800 Ethernet interfaces as member s of LAG</li> <li>28 IPv4 and 28 IPv6 BGP neighbors</li> <li>ISIS on all trunk/LAG ports</li> <li>Store indexes of ACTIVE and BACKUP Controller Card in \"previous_Active\" and \"previous_BACKUP\"</li> <li>Initiate Control Card switchover using gNOI SwitchControlProcessorRequest; store timestamp in \"SwitchControlProcessorRequest_time\"</li> <li>Wait for <code>SwitchControlProcessorResponce</code> but no longer then 120s. If not received, test FAILED.</li> <li>Immediately after receiving <code>SwitchControlProcessorResponce</code> for  gNOI switchover, send gNMI <code>setRequest</code> with a prepared large config. Store timestamp as \"SwitchControlProcessorResponce_time\".</li> <li>Wait for <code>SetResponce</code> but no longer than 120s.</li> <li>If not received, the test FAILED.</li> <li>If received at time &lt;= \"SwitchControlProcessorResponce\"+110s and ERROR is returned, send gNMI <code>setRequest</code> with prepared large config. Reaped form Wait for <code>SetResponce</code></li> <li>If received at time &gt; \"SwitchControlProcessorResponce\"+110s and ERROR is returned, test FAILED</li> <li>If received at time &lt;= \"SwitchControlProcessorResponce\"+120s and SUCCESS is returned, proceed</li> <li>Retrieve configuration from DUT DUT using gNMI <code>GetRequest</code>.</li> <li>Verify:</li> <li>The gNMI <code>setResponce</code> has been received within 120s after <code>setRequest</code> by comparing with \"SwitchControlProcessorResponse_time\", and </li> <li>The gNOI <code>SwitchControlProcessorResponce</code> has been received and switchover was executed by DUT (compare \"previous_ACRIVE\" with DUT state), and</li> <li>The configuration retrieved from DUT is the same as one prepared^1</li> </ul> <p>^1 some small deviations are expected. This is OK to verify that the retrieve configuration configuration is not smaller in size than the prepared one, and has the same number of interfaces, BGP neighbors.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/SetRequest_controll_card_switchover/#testbed-topology","title":"Testbed topology","text":"<p>dut.testbed</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/SetRequest_controll_card_switchover/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/SetRequest_controll_card_switchover/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/SetRequest_controll_card_switchover/#_1","title":"gNMI-1.19 ConfigPush after Control Card switchover","text":"<p>MFF</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/","title":"gNMI-1.17 Controller Card redundnacy test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#summary","title":"Summary","text":"<ul> <li>collect inventory data for each controller card</li> <li>Verify last restart time is updated</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#test-1-contyroller-card-inventory","title":"test 1 Contyroller Card inventory","text":"<ul> <li>collect following attributes for each component of CONTROLLER_CARD type and verify corectness (mostly non-empty string)</li> <li>/components/component/state/empty</li> <li>/components/component/state/location</li> <li>/components/component/state/oper-status</li> <li>/components/component/state/switchover-ready</li> <li>/components/component/state/redundant-role</li> <li>/components/component/state/last-switchover-time</li> <li>/components/component/state/last-switchover-reason/trigger</li> <li>/components/component/state/last-switchover-reason/details</li> <li>/components/component/state/last-reboot-time</li> <li> <p>/components/component/state/last-reboot-reason</p> </li> <li> <p>/components/component/state/description             </p> </li> <li>/components/component/state/hardware-version</li> <li>/components/component/state/id</li> <li>/components/component/state/mfg-name</li> <li>/components/component/state/name</li> <li>/components/component/state/parent</li> <li>/components/component/state/part-no</li> <li>/components/component/state/serial-no</li> <li> <p>/components/component/state/type</p> </li> <li> <p>store list of present components of CONTROLLER_CARD type</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#test-2-switchover","title":"test 2 switchover","text":"<ul> <li>Verify that all controller_cards have <code>switchover-ready=TRUE</code></li> <li>Collect and store <code>redundant-role</code> for each controller_card as \"previous-role\"</li> <li>Initiate controller-card switchover</li> <li>Try periodicaly (60 sec interval) untill sucesfull but no longer then 20 min: Collect <code>redundant-role</code> for each controller_card. Compare it with \"previous-role\"</li> <li>for controller_card of current \"PRIMARY\" role, previous role must be \"SECONDARY\"</li> <li>for controller_card of current \"SECONDARY\" role, previous role must be \"PRIMARY\"</li> <li>try until (<code>switchover-ready=TRUE</code> on all controller_cards OR <code>last-switchover-time</code> is moret then 20min ago)</li> <li>Wait(5min)</li> <li>Verify that all controller_cards has <code>switchover-ready=TRUE</code>; if so test PASSED</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#test-2-redundancy","title":"test 2 Redundancy","text":"<ul> <li>Verify that all controller_cards has <code>switchover-ready=TRUE</code></li> <li>Select component with <code>redundant-role=PRIMARY</code>, store name as \"previous_primary\"</li> <li>Perfom Controller_Card switchover and then power down \"previous_primary\" component. Wait 5s.</li> <li>Collect <code>redundant-role</code> and <code>oper-status</code> from all components of CONTROLLER_CARD type as collected in test 1;</li> <li>verify that \"previous_primary\" controller <code>oper-status</code> is not <code>ACTIVE</code></li> <li>verify that at exectly one controller_card has <code>redundant-role=PRIMARY</code> and <code>oper-status=ACTIVE</code></li> <li>if gNMI client can get this information, it is asumed controller card redundancy works.      More torough tests of failover are part of forwarding tests.</li> <li>Power up \"previous_primary\" controller card</li> <li>Wait untill all controller_cards has <code>switchover-ready=TRUE</code> (cleanup)</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#test-3-last-reboot-time","title":"test 3 last reboot time","text":"<ul> <li>Select component with <code>redundant-role=SECONDARY</code></li> <li>store last-reboot-time for this component as \"previous-reboot-time\"</li> <li>Power down this component, wait 60 sec.</li> <li>Power up this component</li> <li>Wait</li> <li>get last-reboot-time and compare with \"previous-reboot-time\"</li> <li>\"previous-reboot-time\" must be smaller (earlier) then recently collected last-reboot-time</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/controller_card/config/power-admin-state</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/components/component/controller-card/state/power-admin-state</li> <li>/components/component/state/empty</li> <li>/components/component/state/location</li> <li>/components/component/state/oper-status</li> <li>/components/component/state/switchover-ready</li> <li>/components/component/state/redundant-role</li> <li>/components/component/state/last-switchover-time</li> <li>/components/component/state/last-switchover-reason/trigger</li> <li>/components/component/state/last-switchover-reason/details</li> <li>/components/component/state/last-reboot-time</li> <li>/components/component/state/last-reboot-reason</li> <li>/components/component/state/description             </li> <li>/components/component/state/hardware-version</li> <li>/components/component/state/id</li> <li>/components/component/state/mfg-name</li> <li>/components/component/state/name</li> <li>/components/component/state/parent</li> <li>/components/component/state/part-no</li> <li>/components/component/state/serial-no</li> <li>/components/component/state/type</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/controllercard/tests/controller_card_redundancy_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<ul> <li>MFF</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/","title":"gNMI-1.16 Fabric redundnacy test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#summary","title":"Summary","text":"<ul> <li>collect inventory data for each fabric card</li> <li>Verify last restart time is updated</li> <li>verify traffic could be forwarded with one of Fabric Card inactive.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#topology-and-basic-setup","title":"topology and basic setup","text":"<ul> <li>Connect OTG port1 to DUT port1 and OTG port2 to DUT port2</li> <li>Configure IPv6 addresses on both links</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#test-1-fabric-inventory","title":"test 1 Fabric inventory","text":"<ul> <li>collect following attributes for each component of FABRIC_CARD type and verify corectness (mostly non-empty string)</li> <li>/components/component/state/description             </li> <li>/components/component/state/hardware-version</li> <li>/components/component/state/id</li> <li>/components/component/state/mfg-name</li> <li>/components/component/state/name</li> <li>/components/component/state/oper-status</li> <li>/components/component/state/parent</li> <li>/components/component/state/part-no</li> <li>/components/component/state/serial-no</li> <li>/components/component/state/type</li> <li>/components/component/state/location</li> <li>/components/component/state/last-reboot-time</li> <li>store list of present components of FABRIC_CARD type</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#test-2-redundancy","title":"test 2 redundancy","text":"<ul> <li>Power down exectly one component of fabric type</li> <li>Run traffic between ATE por1 and port 2 for 16 millions of packets on 100kpps rate and using 4000B packets.</li> <li>verify loss-lessness (with 10E-6 tolerance); Since remaining fabric is not overloaded in any form   with above traffic pattern 0 losses is expected</li> <li>Power up all components</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#test-3-last-reboot-time","title":"test 3 last reboot time","text":"<ul> <li>Select one component from list of available</li> <li>store last-reboot-time for this component as \"PREVIOUS_REBOOT_TIME\"</li> <li>Power down this component, wait 60 sec.</li> <li>Power up this component</li> <li>Wait</li> <li>get last-reboot-time and compare with \"PREVIOUS_REBOOT_TIME\". The \"PREVIOUS_REBOOT_TIME\" must be smaller (earlier) then recently collected last-reboot-time</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/fabric/config/power-admin-state</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/components/component/fabric/state/power-admin-state</li> <li>/components/component/state/description             </li> <li>/components/component/state/hardware-version</li> <li>/components/component/state/id</li> <li>/components/component/state/mfg-name</li> <li>/components/component/state/name</li> <li>/components/component/state/oper-status</li> <li>/components/component/state/parent</li> <li>/components/component/state/part-no</li> <li>/components/component/state/serial-no</li> <li>/components/component/state/type</li> <li>/components/component/state/location</li> <li>/components/component/state/last-reboot-time</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/fabric_redundancy_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<ul> <li>MFF</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/","title":"gNMI-1.18: gNMI subscribe with sample mode for backplane capacity counters","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#summary","title":"Summary","text":"<p>WBB is required to support gNMI Subscribe with SAMPLE or ON_CHANGE mode for various counters. This test if to verify that DUT supports gNMI Subscribe with sample mode, updating the available backplane capacity counters correctly while forwarding traffic</p> <ul> <li> <p>Get backplace capacity before any traffic is sent</p> </li> <li> <p>Send some traffic and wait for the sample to be collected</p> </li> <li> <p>Send more traffic and wait for the sample to be collected</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#testbed-type","title":"Testbed type","text":"<ul> <li>https://github.com/openconfig/featureprofiles/blob/main/topologies/atedut_2.testbed</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#gnmi-1181-todo-httpsgithubcomopenconfigfeatureprofilesissues2322","title":"gNMI-1.18.1 [TODO: https://github.com/openconfig/featureprofiles/issues/2322]","text":"<ul> <li> <p>Connect DUT port-1 and 2 to ATE port-1 and 2 respectively</p> <ul> <li>For MFF DUT ports 1 and 2 SHOULD be on different linecards</li> </ul> </li> <li> <p>Configure IPv4/IPv6 addresses on the interfaces</p> </li> <li> <p>Using gNMI subscribe with \"SAMPLE\" mode</p> <ul> <li> <p>Run the test twice, once with a SAMPLE interval of 10 Seconds and once again     with a SAMPLE interval of 15 seconds for the below telemetry path</p> </li> <li> <p>/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity</p> </li> <li> <p>Initiate traffic:</p> <ul> <li> <p>Initiate traffic as per below threshold:</p> Port number Interface1(line rate %) Port1 20% Port2 20% </li> </ul> </li> <li> <p>Validate that we are receiving consumed capacity metrics at the selected SAMPLE interval</p> <ul> <li> <p>Increase the traffic as per below threshold</p> Port number Interface1(line rate %) Port1 70% Port2 70% </li> </ul> </li> <li> <p>Validate we are now receiving increased consumed capacity metrics at the selected SAMPLE interval</p> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#gnmi-1182-todo-httpsgithubcomopenconfigfeatureprofilesissues2323","title":"gNMI-1.18.2 [TODO: https://github.com/openconfig/featureprofiles/issues/2323]","text":"<ul> <li> <p>Connect DUT port-1 and 2 to ATE port-1 and 2 respectively</p> <ul> <li>For MFF DUT ports 1 and 2 SHOULD be on different linecards</li> </ul> </li> <li> <p>Configure IPv4/IPv6 addresses on the interfaces</p> </li> <li> <p>Use gNMI subscribe with \"ON_CHANGE\" mode for the below telemetry paths</p> <ul> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/total</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct</li> </ul> </li> <li> <p>Disable one of the available FABRIC component</p> <ul> <li>set /components/component/{fabric}/config/power-admin-state to POWER_DISABLED</li> </ul> </li> <li> <p>Validate that we recieve changed metrics of a lower value for each of the telemetry paths</p> </li> <li> <p>Enable the FABRIC component that was disabled in the previous step</p> <ul> <li>Set /components/component/{fabric|linecard|controller-card}/config/power-admin-state to POWER_ENABLED</li> </ul> </li> <li> <p>Validate that we recieve changed metrics of a higher value for each of the telemetry paths</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li>/interfaces/interface/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled</li> <li>/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled</li> <li>/components/component/{fabric}/config/power-admin-state</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#telemetry-parameter-coverage-gnmi-subscribe-with-sample-every-10-seconds","title":"Telemetry parameter coverage (gNMI subscribe with sample every 10 seconds)","text":"<ul> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/total</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gNMI</li> <li>Set</li> <li>Update</li> <li>Subscribe</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/fabric/otg_tests/sampled_backplane_capacity_counters_test/#required-dut-platform","title":"Required DUT platform","text":"<ul> <li>MFF</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/integrated_circuit/otg_tests/utilization/","title":"IC-1: Integrated Circuit Utilization and Thresholds","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/integrated_circuit/otg_tests/utilization/#summary","title":"Summary","text":"<p>Test resource utilization and threshold for <code>INTEGRATED_CIRCUIT</code> (IC) components.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/integrated_circuit/otg_tests/utilization/#procedure","title":"Procedure","text":"<ul> <li>IC-1.1</li> <li>Get IC component names</li> <li>Verify resource utilization and threshold leaves exist for component   type <code>INTEGRATED_CIRCUIT</code></li> <li>IC-1.2</li> <li>Configure <code>used-threshold-upper</code> at 10% for resource IC</li> <li>Configure <code>used-threshold-upper-clear</code> at 5% for resource IC</li> <li>Verify state for the above leaves equals the configured values</li> <li>IC-1.4</li> <li>Configure ISIS and BGP on DUT and ATE</li> <li>subscribe using SAMPLE mode to  <code>used</code> leaf.</li> <li>Advertise 100 IPv4 and IPv6 routes (200 total) from ATE to DUT</li> <li>Verify <code>used</code> leaf increases in value</li> <li>IC-1.5</li> <li>subscribe ON_CHANGE to <code>max-limit</code> from DUT</li> <li>subscribe ON_CHANGE to <code>used-threshold-upper-exceeded</code></li> <li>Add more IPv4 and IPv6 routes than <code>max-limit</code> * <code>used-threshold-upper</code></li> <li>Verify <code>used-threshold-upper-exceeded</code> upper is true</li> <li>IC-1.6</li> <li>Reduce ATE route advertisement to 100 IPv4 and IPv6 routes (200 total)</li> <li>Verify <code>used-threshold-upper-exceeded</code> upper is true</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/integrated_circuit/otg_tests/utilization/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>/components/component/chassis/utilization/resources/resource/config/name /system/utilization/resources/resource/config/name/used-threshold-upper /system/utilization/resources/resource/config/name/used-threshold-upper-clear /system/utilization/resources/resource/</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/integrated_circuit/otg_tests/utilization/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<p>/system/utilization/resources/resource/state/active-component-list /components/component/chassis/utilization/resources/resource/state/committed /components/component/chassis/utilization/resources/resource/state/free /components/component/chassis/utilization/resources/resource/state/high-watermark /components/component/chassis/utilization/resources/resource/state/last-high-watermark /components/component/chassis/utilization/resources/resource/state/max-limit /components/component/chassis/utilization/resources/resource/state/name /components/component/chassis/utilization/resources/resource/state/used /components/component/chassis/utilization/resources/resource/state/used-threshold-upper /components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/integrated_circuit/otg_tests/utilization/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/integrated_circuit/otg_tests/utilization/#required-dut-platform","title":"Required DUT platform","text":"<p>This test should run on both</p> <ul> <li>MFF - A modular form factor device containing LINECARDs, FABRIC and redundant CONTROLLER_CARD components</li> <li>FFF - fixed form factor</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/optics_power_and_bias_current_test/","title":"gNMI-1.13: Optics Telemetry, Instant, threshold, and miscellaneous static info","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/optics_power_and_bias_current_test/#summary","title":"Summary","text":"<p>Validate optics related streaming telemetry performance monitoring parameters like input power, output power, bias current and so on.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/optics_power_and_bias_current_test/#setup","title":"Setup","text":"<p>Optics test requirements alongside the platform funtional tests require 2 optics DUT samples each optics part number, connect both two optical ethernet interfaces to Automatic Test Equipment (ATE). </p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/optics_power_and_bias_current_test/#procedure","title":"Procedure","text":"<ul> <li>Connect at least one optical ethernet interface to ATE.</li> <li> <p>Step 1: Using components/component/[name=%s]/state get the list of transceivers and validate     following leafs are set:</p> <ul> <li>/components/component/state/mfg-name</li> <li>/components/component/transceiver/state/form-factor</li> <li>/components/component/state/serial-no</li> <li>/components/component/state/part-no</li> <li> <p>/components/component/state/firmware-version</p> </li> <li> <p>Using /interfaces/interface/state get the list of Interfaces and     validate following leafs are set:</p> <ul> <li>/interfaces/interface/state/physical-channel</li> <li>/interfaces/interface/state/transceiver</li> </ul> </li> <li> <p>Verify that the list of transceivers received are the same. This is only a     consistency check that the vendor implemented the model correctly.</p> <ul> <li>/components/component/state</li> <li>/interfaces/interface/state/transceiver</li> </ul> </li> </ul> </li> <li> <p>Step 2: Get list of components of type TRANSCEIVER. Verify the instant value is     between the corresponding lower and upper thresholds for both     [severity]=WARNING and [severity]=CRITICAL. In case of multiple physical     channels or lanes relevant PMs like TX and RX power should be reported for     all the lanes. </p> <ul> <li>Module case temperature<ul> <li>/components/component/transceiver/thresholds/threshold/state/module-temperature-lower</li> <li>/components/component/transceiver/thresholds/threshold/state/module-temperature-upper</li> <li>/components/component/transceiver/thresholds/threshold/state/severity</li> <li>/components/component/state/temperature/instant</li> </ul> </li> <li>Tx output power<ul> <li>/components/component/transceiver/thresholds/threshold/state/output-power-lower</li> <li>/components/component/transceiver/thresholds/threshold/state/output-power-upper</li> <li>/components/component/transceiver/thresholds/threshold/state/severity</li> <li>/components/component/transceiver/physical-channels/channel/state/output-power/instant</li> </ul> </li> <li>Rx input power<ul> <li>/components/component/transceiver/thresholds/threshold/state/input-power-lower</li> <li>/components/component/transceiver/thresholds/threshold/state/input-power-upper</li> <li>/components/component/transceiver/thresholds/threshold/state/severity</li> <li>/components/component/transceiver/physical-channels/channel/state/input-power/instant</li> </ul> </li> <li>Laser bias-current<ul> <li>/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower</li> <li>/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper</li> <li>/components/component/transceiver/thresholds/threshold/state/severity</li> <li>/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant</li> </ul> </li> </ul> </li> <li> <p>Step 3: </p> <ul> <li>Verify the telemetry is updated after the optics power cycle.</li> <li>Disable the DUT transceiver (power off module 3.3V supply).</li> <li>Verify /interfaces/interface/state/oper-status is DOWN.</li> <li>Enable the DUT transceiver (power on module 3.3V supply)</li> <li>Verify /interfaces/interface/state/oper-status is UP.</li> <li>Repeat Step1 and Step2.</li> </ul> </li> <li> <p>Step 4: Verify the telemetry is updated after the interface is flapped.</p> <ul> <li>Disable/shutdown the interface of the DUT.</li> <li>Verify the optics input power and output power are updated to below the corresponding low alarm threshold.</li> <li>Verify /interfaces/interface/state/oper-status is DOWN</li> <li>Re-enable the interface of the DUT</li> <li>Verify /interfaces/interface/state/oper-status is UP.</li> <li>Repeat Step1 and Step2.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/optics_power_and_bias_current_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/interfaces/interface/config/enabled</li> <li>/components/component/transceiver/state/enabled (transceiver 3.3V power supply on/off)</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/optics_power_and_bias_current_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/components/component/transceiver/physical-channels/channel/state/input-power/instant</li> <li>/components/component/transceiver/physical-channels/channel/state/output-power/instant</li> <li>/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant</li> <li>/components/component/state/temperature/instant</li> <li>/components/component/state/mfg-name</li> <li>/components/component/transceiver/state/form-factor</li> <li>/components/component/state/serial-no</li> <li>/components/component/state/part-no</li> <li>/components/component/state/firmware-version</li> <li>/components/component/transceiver/thresholds/threshold/state/output-power-lower</li> <li>/components/component/transceiver/thresholds/threshold/state/output-power-upper</li> <li>/components/component/transceiver/thresholds/threshold/state/input-power-lower</li> <li>/components/component/transceiver/thresholds/threshold/state/input-power-upper</li> <li>/components/component/transceiver/thresholds/threshold/state/module-temperature-lower</li> <li>/components/component/transceiver/thresholds/threshold/state/module-temperature-upper</li> <li>/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower</li> <li>/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper</li> <li>/components/component/transceiver/thresholds/threshold/state/severity</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/power_admin_down_up_test/","title":"FP-1.1: Power admin DOWN/UP Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/power_admin_down_up_test/#summary","title":"Summary","text":"<p>Validate ability to set power-admin-state for Fabric, Linecard and ControllerCard.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/power_admin_down_up_test/#procedure","title":"Procedure","text":"<ul> <li>For each of the non empty Fabric, Linecard and ControllerCard component:<ul> <li>Verify /components/component/state/oper-status is ACTIVE.</li> <li>Update     /components/component/{fabric|linecard|controller-card}/config/power-admin-state     to POWER_DISABLED.</li> <li>Verify     /components/component/{fabric|linecard|controller-card}/state/power-admin-state     changes to POWER_DISABLED.</li> <li>Verify /components/component/state/oper-status is DISABLED.</li> <li>Update     /components/component/{fabric|linecard|controller-card}/config/power-admin-state     to POWER_ENABLED.</li> <li>Verify /components/component/state/oper-status returns to ACTIVE.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/power_admin_down_up_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/{fabric|linecard|controller-card}/config/power-admin-state</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/power_admin_down_up_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/components/component/state/oper-status</li> <li>/components/component/{fabric|linecard|controller-card}/state/power-admin-state</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/telemetry_inventory_test/","title":"gNMI-1.4: Telemetry: Inventory","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/telemetry_inventory_test/#summary","title":"Summary","text":"<p>Validate Telemetry for each FRU within chassis.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/telemetry_inventory_test/#procedure","title":"Procedure","text":"<p>For each of the following component types (linecard, chassis, fan, controller card, power supply, disk, flash, NPU, transceiver, fabric card), validate:</p> <ul> <li>Presence of component within gNMI telemetry.</li> <li>Set of telemetry paths required for network discovery (to be specified for     each case).</li> <li>TODO: Removal of telemetry when the component is removed or rebooted within     the chassis, if applicable.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/telemetry_inventory_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>TODO: /components/component/linecard/config</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/tests/telemetry_inventory_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/components/component[name=]/state/temperature/instant <li>/components/component/storage</li> <li>TODO: /components/component/software-module</li> <li>TODO: /components/component/software-module/state/module-type</li> <li>/components/component/state/description</li> <li>/components/component/state/firmware-version</li> <li>/components/component/state/hardware-version</li> <li>/components/component/state/id</li> <li>/components/component/state/mfg-date</li> <li>/components/component/state/mfg-name</li> <li>/components/component/state/name</li> <li>/components/component/state/oper-status</li> <li>/components/component/state/parent</li> <li>/components/component/state/part-no</li> <li>/components/component/state/serial-no</li> <li>/components/component/state/software-version</li> <li>/components/component/state/type</li> <li>/components/component/state/temperature/alarm-status</li> <li>/components/component/state/temperature/instant</li> <li>/components/component/state/temperature/max</li> <li>/components/component/state/temperature/max-time</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/total</li> <li>/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity</li>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/ZR_pre-fec_ber_test/","title":"TRANSCEIVER-2: Telemetry: 400ZR Optics Pre-FEC(Forward Error Correction) BER(Bit Error Rate)","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/ZR_pre-fec_ber_test/#summary","title":"Summary","text":"<p>Validate 400ZR optics module reports pre-FEC bit error rate performance data.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/ZR_pre-fec_ber_test/#procedure","title":"Procedure","text":"<ul> <li>Connect two ZR interfaces using a duplex LC fiber jumper such that TX     output power of one is the RX input power of the other module.</li> <li>To establish a point to point ZR link ensure the following:<ul> <li>Both transceivers state is enabled</li> <li>Both transceivers are set to a valid target TX output power     example -10 dBm</li> <li>Both transceivers are tuned to a valid centre frequency     example 193.1 THz</li> </ul> </li> <li>With the link ZR link established as explained above, verify that the     following ZR transceiver telemetry paths exist and are streamed for both     the ZR optics<ul> <li>/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant</li> <li>/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg</li> <li>/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min</li> <li>/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max</li> </ul> </li> </ul> <p>Note: For min, max, and avg values, 10 second sampling is preferred. If            10 seconds is not supported, the sampling interval used must be           communicated.</p> <ul> <li> <p>Verify that the optics pre-FEC BER is updated after the interface flaps.</p> <ul> <li>Enable a pair of ZR interfaces on the DUT as explained above.</li> <li>Verify the ZR optics pre FEC BER PMs are in the normal range.</li> <li>Disable or shut down the interface on the DUT.</li> <li>Re-enable the interfaces on the DUT.</li> <li>Verify the ZR optics pre FEC PM is updated to the value in the normal     range again. Typical expected value should be less than 1.2E-2</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/ZR_pre-fec_ber_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/oc-transceiver:transceiver/oc-transceiver/config/enabled</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/ZR_pre-fec_ber_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<pre><code>*  /terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant\n*  /terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg\n*  /terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min\n*  /terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_db_q_value_test/","title":"TRANSCEIVER-6: Telemetry: 400ZR Optics Q-value streaming.","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_db_q_value_test/#summary","title":"Summary","text":"<p>Validate 400ZR optics module reports Q-value performance data as defined in module CMIS VDM(Versatile Diagnostics Monitor). Q-value is the decibel (dB) value representing signal BER.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_db_q_value_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect two ZR interfaces using a duplex LC fiber jumper such that TX     output power of one is the RX input power of the other module.</p> </li> <li> <p>To establish a point to point ZR link ensure the following:</p> <ul> <li>Both transceivers state is enabled</li> <li>Both transceivers are set to a valid target TX output power     example -10 dBm.</li> <li>Both transceivers are tuned to a valid centre frequency     example 193.1 THz.</li> </ul> </li> <li> <p>With the link ZR link established as explained above, verify that the     following ZR transceiver telemetry paths exist and are streamed for both     the ZR optics.</p> <ul> <li>/terminal-device/logical-channels/channel/otn/state/q-value/instant</li> <li>/terminal-device/logical-channels/channel/otn/state/q-value/avg</li> <li>/terminal-device/logical-channels/channel/otn/state/q-value/min</li> <li>/terminal-device/logical-channels/channel/otn/state/q-value/max</li> </ul> </li> <li> <p>For reported data check for validity min &lt;= avg/instant &lt;= max</p> </li> <li> <p>When the modules or the devices are still in a boot stage, they must not     stream any invalid string values like \"nil\" or \"-inf\" until valid values     are available for streaming.</p> </li> <li> <p>Q-value must always be of type decimal64. When link interfaces are in down     state 0.0 must be reported as a valid default value.</p> </li> </ul> <p>Note: For min, max, and avg values, 10 second sampling is preferred. If            10 seconds is not supported, the sampling interval used must be           specified by adding a deviation to the test.</p> <ul> <li> <p>Verify that the optics Q-value is updated after the interface flaps.</p> <ul> <li>Enable a pair of ZR interfaces on the DUT as explained above.</li> <li>Subscribe SAMPLE to the above q-value leafs with a sample rate of 10     seconds.</li> <li>Verify the ZR optics Q-value PMs are in the normal range.</li> <li>Use /components/component/transceiver/config/enabled to disable the     transceiver, wait 20 seconds and then re-enable the transceiver.</li> <li>Verify that the q-value leafs report '0' during the reboot and no value     of nil or -inf is reported.</li> <li>Re-enable the interfaces on the DUT.</li> <li>Verify the ZR optics pre FEC PM is updated to the value in the normal     range again. Typical expected value should be greater than 7 dB.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_db_q_value_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/oc-transceiver:transceiver/oc-transceiver/config/enabled</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_db_q_value_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/terminal-device/logical-channels/channel/otn/state/q-value/instant</li> <li>/terminal-device/logical-channels/channel/otn/state/q-value/avg</li> <li>/terminal-device/logical-channels/channel/otn/state/q-value/min</li> <li>/terminal-device/logical-channels/channel/otn/state/q-value/max</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_firmware_version_test/","title":"TRANSCEIVER-3: Telemetry: 400ZR Optics firmware version streaming","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_firmware_version_test/#summary","title":"Summary","text":"<p>Validate 400ZR optics module reports correct firmware version.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_firmware_version_test/#procedure","title":"Procedure","text":"<ul> <li>Plug in the ZR module in the host port and make sure the transceiver      state is enabled and host is able to detect the module.</li> <li> <p>With the module correctly recognized verify it reports correct firmware     version through the following telemetry path</p> <ul> <li>/platform/components/component/state/firmware-version</li> </ul> </li> <li> <p>Verify that the modules firmware version is reported correctly after a     optic software reset.</p> <ul> <li>With ZR module plugged in the host and properly recognized </li> <li>Verify the ZR optics firmware version is correctly reported via the      streaming telemetry path above.</li> <li>Reset the optic through software</li> <li>Verify the ZR optics still reports correct firmware version. </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_firmware_version_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/oc-transceiver:transceiver/oc-transceiver/config/enabled</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_firmware_version_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<pre><code>*  /platform/components/component/state/firmware-version\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_inventory_test/","title":"TRANSCEIVER-7: Telemetry: 400ZR module inventory information.","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_inventory_test/#summary","title":"Summary","text":"<p>Validate 400ZR modules report correct inventory information.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_inventory_test/#procedure","title":"Procedure","text":"<ul> <li>Plug in the ZR module in the host port and make sure the transceiver      state is enabled and host is able to detect the module.</li> <li> <p>With the module recognized verify it reports correct inventory     information by subscribing ON_CHANGE to the following telemetry paths.</p> <ul> <li>/platform/components/component/state/serial-no</li> <li>/platform/components/component/state/part-no</li> <li>/platform/components/component/state/type</li> <li>/platform/components/component/state/description</li> <li>/platform/components/component/state/mfg-name</li> <li>/platform/components/component/state/mfg-date</li> <li>/platform/components/component/state/hardware-version</li> <li>/platform/components/component/state/firmware-version</li> </ul> </li> <li> <p>Validate the streamed inventory information data is of type String.</p> </li> <li> <p>Verify that the modules inventory information is reported correctly after     an optic software reset.</p> <ul> <li>With ZR module plugged in the host and properly recognized </li> <li>Verify the ZR optics inventory is correctly reported via the      streaming telemetry paths above.</li> <li>Reset the optic by enabling and disabling the transceiver state     through /components/component/transceiver/config/enabled.</li> <li>Wait atleast 20 seconds in between toggling transceiver state.</li> <li>Verify the ZR optics still reports correct inventory information.</li> <li>Telemetry subscription should be ON_CHANGE and streamed data should     be of type String.</li> </ul> </li> <li> <p>Verify that the modules inventory information is reported correctly when     interface state is disabled.</p> <ul> <li>With ZR module plugged in the host and properly recognized</li> <li>Use /interfaces/interface/config/enabled to disable the module     interface state, wait 20 seconds. </li> <li>Verify the ZR optics inventory information is correctly reported via     the streaming telemetry paths above in this state.</li> <li>Telemetry subscription should be ON_CHANGE and streamed data should     be of type String.</li> </ul> </li> <li> <p>Verify the module behaviour and related inventory information when     transceiver state is set to disabled.</p> <ul> <li>With ZR module plugged in the host and properly recognized.</li> <li>Use /components/component/transceiver/config/enabled to disable the     module transceiver state, wait 20 seconds. </li> <li>Verify the ZR module is powered off and no inventory information     reported via the streaming telemetry paths above in this state.</li> <li>When a component is powered off and is dropped from the inventory list     explicit deletes for the relevant entity leaves should be streamed     to clear any stale data.</li> <li>Telemetry subscription should be ON_CHANGE and there should be no     streamed inventory data in this state.</li> </ul> </li> <li> <p>Verify the module inventory information updates when transceiver under test     is swapped with a different one.</p> <ul> <li>Make sure ZR module plugged in the host and properly recognized.</li> <li>Verify module is reporting valid inventory information.</li> <li>Swap the module with a different one and validate that the new     inventory information is correctly streamed now.  </li> <li>Telemetry subscription should be ON_CHANGE and streamed data should     be of type String.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_inventory_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/transceiver/config/enabled</li> <li>/interfaces/interface/config/enabled</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_inventory_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/platform/components/component/state/serial-no</li> <li>/platform/components/component/state/part-no</li> <li>/platform/components/component/state/type</li> <li>/platform/components/component/state/description</li> <li>/platform/components/component/state/mfg-name</li> <li>/platform/components/component/state/mfg-date</li> <li>/platform/components/component/state/hardware-version</li> <li>/platform/components/component/state/firmware-version</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/","title":"TRANSCEIVER-5: Configuration: 400ZR channel frequency and output TX launch power setting.","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/#summary","title":"Summary","text":"<p>Validate setting 400ZR tunable parameters channel frequency and output TX launch power and verify corresponding telemetry values.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/#goals","title":"Goals","text":"<ul> <li>Verify full C band frequency tunability for 100GHz line system grid.</li> <li>Verify full C band frequency tunability for 75GHz line system grid.</li> <li>Verify adjustable range of transmit output power across -13 to -9 dBm   in steps of 1 dB.  </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/#transceiver-51","title":"TRANSCEIVER-5.1","text":"<ul> <li>Connect two ZR interfaces using a duplex LC fiber jumper such that TX     output power of one is the RX input power of the other module. Connection     between the modules should pass through an optical switch that can be     controlled through automation to simulate a fiber cut.  </li> <li> <p>To establish a point to point ZR link ensure the following:</p> <ul> <li>Both transceivers states are enabled.</li> <li>Validate setting 400ZR optics module tunable laser center frequency     across frequency range 196.100 - 191.400 THz for 100GHz grid.</li> <li>Validate setting 400ZR optics module tunable laser center frequency     across frequency range 196.100 - 191.375 THz for 75GHz grid.  </li> <li>Specific frequency details can be found in 400ZR implementation     agreement under sections 15.1 ad 15.2 Operating frequency channel     definitions. Link to IA below,<ul> <li>https://www.oiforum.com/wp-content/uploads/OIF-400ZR-01.0_reduced2.pdf</li> </ul> </li> <li>Validate adjustable range of transmit output power across -13 to -9 dBm     range in steps of 1dB. So the module\u2019s output power will be set to -13,     -12, -11, -10, -9 dBm in each step. As an example this can be validated     for the module's default frequency of 193.1 THz.  </li> </ul> </li> <li> <p>With the ZR link established as explained above, for each configured     frequency and TX output power value verify that the following ZR     transceiver telemetry paths exist and are streamed for both the ZR optics.</p> <ul> <li>Frequency<ul> <li>/components/component/optical-channel/state/frequency</li> <li>/components/component/optical-channel/state/carrier-frequency-offset/instant</li> <li>/components/component/optical-channel/state/carrier-frequency-offset/avg</li> <li>/components/component/optical-channel/state/carrier-frequency-offset/min</li> <li>/components/component/optical-channel/state/carrier-frequency-offset/max</li> </ul> </li> <li>TX Output Power<ul> <li>/components/component/optical-channel/state/output-power/instant</li> <li>/components/component/optical-channel/state/output-power/avg</li> <li>/components/component/optical-channel/state/output-power/min</li> <li>/components/component/optical-channel/state/output-power/max</li> </ul> </li> </ul> </li> <li> <p>With above streamed data verify</p> <ul> <li>For each center frequency, laser frequency offset should not be more than   +/- 1.8 GHz max.</li> <li>For each center frequency, streamed value should be in Mhz units. Test   should fail if the streamed value is in Hz or THz units. As an example   193.1 THz would be 193100000 in MHz.</li> <li>When set to a specific target output power, transmit power control   absolute accuracy should be within +/- 1 dBm of the target value.</li> <li>For reported data check for validity: min &lt;= avg/instant &lt;= max</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/#transceiver-52","title":"TRANSCEIVER-5.2","text":"<ul> <li> <p>When the modules or the devices are still in a boot stage, they must not     stream any invalid string values like \"nil\" or \"-inf\".</p> </li> <li> <p>Frequency must be specified as uint64 in MHz. Streamed values for frequency     offset must be of type decimal64.</p> </li> <li> <p>TX Output power must be of type decimal64.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/#transceiver-53","title":"TRANSCEIVER-5.3","text":"<ul> <li> <p>Verify that the optics Tunable Frequency and TX output power tunes back to     the correct value as per configuration after the interface flaps.</p> <ul> <li>Enable a pair of ZR interfaces on the DUT as explained above.</li> <li>Verify the ZR optics frequency and TX output power telemetry values are     set in the normal range.</li> <li>Disable or shut down the interface on the DUT.</li> <li>Verify with interfaces in down state both optics are streaming uint 0     value for frequency.</li> <li>Verify for the TX output power with interface in down state a decimal64     value of -40 dB is streamed.</li> <li>Re-enable the interfaces on the DUT.</li> <li>Verify the ZR optics tune back to the correct frequency and TX output     power as per the configuration and related telemetry values are updated     to the value in the normal range again.</li> </ul> </li> <li> <p>With above test also verify</p> <ul> <li>Laser frequency offset should not be more than +/- 1.8 GHz max from the   configured centre frequency.</li> <li>When set to a specific target output power, transmit power control   absolute accuracy should be within +/- 1 dBm of the target configured   output power.</li> <li>For reported data check for validity: min &lt;= avg/instant &lt;= max</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/#transceiver-54","title":"TRANSCEIVER-5.4","text":"<ul> <li> <p>Verify that the optics Tunable Frequency and TX output power tunes back to     the correct value as per configuration after a fiber cut.</p> <ul> <li>Enable a pair of ZR interfaces on the DUT as explained above.</li> <li>Verify the ZR optics Frequency and TX output power telemetry values are     in the normal range.</li> <li>Simulate a fiber cut using the optical switch that sits in-between the     DUT ports.</li> <li>Verify with link in down state due to fiber cut both optics are streaming     uint64 for frequency and decimal64 for TX output power. </li> <li>Re-enable the optical switch connection to clear the fiber cut fault.</li> <li>Verify the ZR optics is able to stay tuned to the correct frequency and     TX output power as per the configuration.</li> </ul> </li> <li> <p>With above test also verify</p> <ul> <li>Laser frequency offset should not be more than +/- 1.8 GHz max from the   configured centre frequency.</li> <li>When set to a specific target output power, transmit power control   absolute accuracy should be within +/- 1 dBm of the target configured   output power.</li> <li>For reported data check for validity: min &lt;= avg/instant &lt;= max</li> </ul> </li> </ul> <p>Note: For min, max, and avg values, 10 second sampling is preferred. If            10 seconds is not supported, the sampling interval used must be           communicated.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/components/component/transceiver/config/enabled</li> <li>/components/component/optical-channel/config/frequency</li> <li>/components/component/optical-channel/config/target-output-power</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/platform/transceiver/zr_tunable_parameters_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>Frequency<ul> <li>/components/component/optical-channel/state/frequency</li> <li>/components/component/optical-channel/state/carrier-frequency-offset/instant</li> <li>/components/component/optical-channel/state/carrier-frequency-offset/avg</li> <li>/components/component/optical-channel/state/carrier-frequency-offset/min</li> <li>/components/component/optical-channel/state/carrier-frequency-offset/max</li> </ul> </li> <li>TX Output Power<ul> <li>/components/component/optical-channel/state/output-power/instant</li> <li>/components/component/optical-channel/state/output-power/avg</li> <li>/components/component/optical-channel/state/output-power/min</li> <li>/components/component/optical-channel/state/output-power/max</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/dscp_ecn_encap_decap_test/","title":"DP-1.13: DSCP and ECN bits are copied over during IPinIP encap and decap","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/dscp_ecn_encap_decap_test/#summary","title":"Summary","text":"<p>Verify that DUT copies and preserves DSCP and ECN bits during IPinIP encap and decap process.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/dscp_ecn_encap_decap_test/#qos-traffic-test-setup","title":"QoS traffic test setup:","text":"<ul> <li> <p>Topology:</p> <ul> <li>2 input interfaces and 1 output interface with the same port speed. The     interface can be a physical interface or LACP bundle interface with the     same aggregated speed.</li> </ul> <pre><code>  ATE port 1\n      |\n     DUT--------ATE port 3\n      |\n  ATE port 2\n</code></pre> </li> <li> <p>Traffic classes:</p> <ul> <li>We will use 7 traffic classes NC1, AF4, AF3, AF2, AF1, BE1 and BE0.</li> </ul> </li> <li> <p>Traffic types:</p> <ul> <li>All the traffic tests apply to both IPv4 and IPv6 traffic.</li> </ul> </li> <li> <p>Queue types:</p> <ul> <li>NC1 will have strict priority queues<ul> <li>AF4/AF3/AF2/AF1/BE1/BE0 will use WRR queues.</li> </ul> </li> <li>NC1 and AF4 will have strict priority queues with NC1 having higher     priority.<ul> <li>AF3, AF2, AF1, BE1 and BE0 will use WRR queues.</li> </ul> </li> </ul> </li> <li> <p>Test results should be independent of the location of interfaces. For     example, 2 input interfaces and output interface could be located on</p> <ul> <li>Same ASIC-based forwarding engine</li> <li>Different ASIC-based forwarding engine on same line card</li> <li>Different ASIC-based forwarding engine on different line cards</li> </ul> </li> <li> <p>Test results should be the same for port speeds 100G and 400G.</p> </li> <li> <p>Counters should be also verified for each test case:</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>transmit-pkts should be equal to the number of Rx pkts on Ixia port</li> <li>dropped-pkts should be equal to diff between the number of Tx and the     number Rx pkts on Ixia ports</li> </ul> </li> <li> <p>Latency:</p> <ul> <li>Should be &lt; 100000ns</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/dscp_ecn_encap_decap_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2 and DUT port-3 to     ATE port-3.</p> </li> <li> <p>Configuration</p> <ul> <li> <p>ECN profile can be created for different queues. ECN profiles per queue     can be applied to the output side of interfaces.</p> min-threshold max-threshold enable-ecn drop weight max-drop-probability-percent 80000 2^64-1 true false not set 1 <ul> <li>Note: max-threshold is set to max uint64 value 2^64-1     or 18446744073709551615.</li> </ul> </li> </ul> </li> <li> <p>Validate that traffic-class(IPv6) and IPv4(DSCP+ECN) are always copied     between inner and outer headers during encap/decap in IPinIP case:</p> <ul> <li>IPv4 encaped to IPv4 (copy from inner to outer)</li> <li>IPv6 encaped to IPv4 (copy from inner to outer)</li> <li>IPv4inIPv4 decaped to IPv4 (copy from outer to inner)</li> <li>IPv6inIPv4 decided to IPv6 (copy from outer to inner)</li> <li>IPv4inIPv4 decaped-then-encaped to IPv4 (copy from outer to inner then     new outer)</li> <li>IPv6inIPv4 decaped-then-encaped to IPv4 (copy from outer to inner then     new outer)</li> </ul> </li> <li> <p>Send oversubscribed traffic with ECT or CE set to 1 from 2 input interfaces     to trigger ECN bits to be set to 1.</p> Traffic class Interface1(line rate %) Interface2(line rate %) ECN bits NC1 51 50 1 </li> <li> <p>Verify that ECN bits are set in both inner and outer headers in encap case.</p> </li> <li> <p>Repeat the above test cases for other traffic classes:</p> <ul> <li>AF4</li> <li>AF3</li> <li>AF2</li> <li>AF1</li> <li>BE1</li> <li>BE0</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/dscp_ecn_encap_decap_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/queue-management-profile</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> <li> <p>ECN</p> <ul> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/enable-ecn</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/weight</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/drop</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-drop-probability-percent</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/dscp_ecn_encap_decap_test/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/ecn_enabled_traffic_test/","title":"DP-1.12: ECN enabled traffic test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/ecn_enabled_traffic_test/#summary","title":"Summary","text":"<p>Verify that DUT set ECN (ECT and CE) bits to 1 for all ECN capable packets &gt; minimum threshold.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/ecn_enabled_traffic_test/#qos-traffic-test-setup","title":"QoS traffic test setup:","text":"<ul> <li> <p>Topology:</p> <ul> <li>2 input interfaces and 1 output interface with the same port speed. The     interface can be a physical interface or LACP bundle interface with the     same aggregated speed.</li> </ul> <pre><code>  ATE port 1\n      |\n     DUT--------ATE port 3\n      |\n  ATE port 2\n</code></pre> </li> <li> <p>Traffic classes:</p> <ul> <li>We will use 7 traffic classes NC1, AF4, AF3, AF2, AF1, BE1 and BE0.</li> </ul> </li> <li> <p>Traffic types:</p> <ul> <li>All the traffic tests apply to both IPv4 and IPv6 traffic.</li> </ul> </li> <li> <p>Queue types:</p> <ul> <li>NC1 will have strict priority queues<ul> <li>AF4/AF3/AF2/AF1/BE1/BE0 will use WRR queues.</li> </ul> </li> <li>NC1 and AF4 will have strict priority queues with NC1 having higher     priority.<ul> <li>AF3, AF2, AF1, BE1 and BE0 will use WRR queues.</li> </ul> </li> </ul> </li> <li> <p>Test results should be independent of the location of interfaces. For     example, 2 input interfaces and output interface could be located on</p> <ul> <li>Same ASIC-based forwarding engine</li> <li>Different ASIC-based forwarding engine on same line card</li> <li>Different ASIC-based forwarding engine on different line cards</li> </ul> </li> <li> <p>Test results should be the same for port speeds 100G and 400G.</p> </li> <li> <p>Counters should be also verified for each test case:</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>transmit-pkts should be equal to the number of Rx pkts on Ixia port</li> <li>dropped-pkts should be equal to diff between the number of Tx and the     number Rx pkts on Ixia ports</li> </ul> </li> <li> <p>Latency:</p> <ul> <li>Should be &lt; 100000ns</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/ecn_enabled_traffic_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2 and DUT port-3 to     ATE port-3.</p> </li> <li> <p>Configuration</p> <ul> <li> <p>ECN profile can be created for different queues. ECN profiles per queue     can be applied to the output side of interfaces.</p> min-threshold max-threshold enable-ecn drop weight max-drop-probability-percent 80000 2^64-1 true false not set 1 <ul> <li>Note: max-threshold is set to max uint64 value 2^64-1     or 18446744073709551615.</li> </ul> </li> </ul> </li> <li> <p>Send oversubscribed traffic with ECT or CE set to 1 from 2 input interfaces     to trigger ECN bits to be set to 1.</p> Traffic class Interface1(line rate %) Interface2(line rate %) ECN bits NC1 51 50 1 </li> <li> <p>Verify that ECN bits are set with packet drop counter dropped-pkts     incremented.</p> </li> <li> <p>Repeat the above test cases for other traffic classes:</p> <ul> <li>AF4</li> <li>AF3</li> <li>AF2</li> <li>AF1</li> <li>BE1</li> <li>BE0</li> </ul> </li> <li> <p>Repeat the above case by sending oversubscribed traffic with both ECT and CE     cleared instead of one of them being set to 1 from 2 input interfaces.</p> </li> <li> <p>Verify that ECN bits are NOT set and packet drop counter dropped-pkts is     incremented.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/ecn_enabled_traffic_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/queue-management-profile</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> <li> <p>ECN</p> <ul> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/enable-ecn</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/weight</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/drop</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-drop-probability-percent</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/ate_tests/ecn_enabled_traffic_test/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/","title":"DP-1.14: DSCP transperency with ECN","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#summary","title":"Summary","text":"<p>This test evaluates if all 64 combination of DSCP bits are transparently handled while ECN bits are rewritten.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#testbed-type","title":"Testbed type","text":"<ul> <li>TESTBED_DUT_ATE_4LINKS</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#procedure","title":"Procedure","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#testbed-configuration","title":"Testbed configuration","text":"<ul> <li>Connect DUTPort1 with OTGPort1, DUTPort2 with OTGPort2, DUTPort2 with OTGPort2; Assigne IPv4 and IPv6 addresses on all.</li> <li>All 3 ports are of the same speed (100GE)</li> <li>Configure QoS<ul> <li>DSCP classifier for IPv4 and IPv4 as below:     |DSCP (dec)|Traffic-group|     |--|--|     |48-63|NC1|     |32-47|AF4|     |24-31|AF3|     |16-23|AF2|     |8-15|AF1|     |4-7|BE0|     |0-3|BE1|</li> <li>7 queues and 7 corresponding forwarding group</li> <li>Scheduler policy with</li> <li>one scheduler of STRICT priority type serving NC1 queue</li> <li>one scheduler of WRR type serving 6 queues AF4, AF3, AF2, AF1, BE0, BE1 with equal weights 10:10:10:10:10:10 respectivly</li> <li>queue-management profile of WRED type with:</li> <li>min-treshold: 80KB</li> <li>max-treshold: 3MB</li> <li>max-drop-percentage: 100 </li> <li>ecn: enabled</li> <li>attach queue-management profile to queues NC1, AF4, AF3, AF2, AF1, BE0, BE1;</li> <li>attach scheduler-map to DUTPort3 egress</li> <li>attach classifier to DUTPort1 nad DUTPort2 ingress</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#sub-test-1-no-congestion","title":"Sub Test #1 - No-Congestion","text":"<ul> <li>Generate 64 flows of traffic form ATEPort1  toward ATEPort3<ul> <li>each flow has distinct DSCP value</li> <li>every packet has ECT(0) set</li> <li>all flows of equal bps rate.</li> <li>total load - 60% (60Gbps)</li> </ul> </li> <li>wait 1 minutes; stop traffic generation.</li> <li>Verify using DUTPort3 telemetry that:<ul> <li>no drops are seen in any of queues on DUTPort3</li> <li>all queues reports non-zero transmit packets, octets.</li> </ul> </li> <li>Verify on ATEPort3 that all flows are recived w/o DSCP modification -all 64 values are observed</li> <li>verify on ATEPort3 that all recived packet has ECT(0) ECN value</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#sub-test-2-congestion","title":"Sub Test #2 - Congestion","text":"<ul> <li>Generate 64 flows of traffic form ATEPort1 and  64 flows of traffic form ATEPort2 toward ATEPort3<ul> <li>each flow form ATEPort1 has distinct DSCP value </li> <li>each flow form ATEPort2 has distinct DSCP value </li> <li>every packet has ECT(0) set</li> <li>all flows are of equal bps rate.</li> <li>Offered load:<ul> <li>ATEPort1 - 60% (60Gbps)</li> <li>ATEPort2 - 60% (60Gbps)</li> </ul> </li> <li>Note: egress port is congested, so do all queues but NC1 (SP)</li> </ul> </li> <li>wait 1 minutes; stop traffic generation.</li> <li>Verify using DUTPort3 telemetry that:<ul> <li>Drops are seen in all queues except NC1 on DUTPort3</li> <li>all queues reports non-zero transmit packets, octets.</li> </ul> </li> <li>Verify on ATEPort3 that all flows are recived w/o DSCP modification - all 64 values are observed</li> <li>verify on ATEPort3 that:<ul> <li>all recived packets with DSCP 48-63 has ECT(0) value</li> <li>vast majority (almost all) packets with DSCP 0-47 has CE ECN value.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#sub-test-3-nc1-congestion","title":"Sub Test #3 - NC1 congestion","text":"<ul> <li>Generate 16 flows of traffic form ATEPort1 and  16 flows of traffic form ATEPort2 toward ATEPort3<ul> <li>each flow form ATEPort1 has distinct DSCP value from 48-63 range</li> <li>each flow form ATEPort2 has distinct DSCP value from 48-63 range</li> <li>every packet has ECT(0) set</li> <li>all flows are of equal bps rate.</li> <li>Offered load:</li> <li>ATEPort1 - 60% (60Gbps)</li> <li>ATEPort2 - 60% (60Gbps)</li> <li>Note: egress port is congested, so do NC1 (SP) queue</li> </ul> </li> <li>wait 1 minutes; stop traffic generation.</li> <li>Verify using DUTPort3 telemetry that:<ul> <li>Drops are seen in NC1 queue on DUTPort3</li> <li>all queues but NC1 reports nzero transmit packets, octets.</li> <li>NC1 queue reports non-zero transmit packets, octets.</li> </ul> </li> <li>Verify on ATEPort3 that all flows are recived w/o DSCP modification - all 16 values are observed.</li> <li>verify on ATEPort3 that:<ul> <li>all recived packets with DSCP has CE value</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>qos/queues/queue/config/name</li> <li>qos/forwarding-groups/forwarding-group/config/name</li> <li>qos/forwarding-groups/forwarding-group/config/output-queue</li> <li>qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/priority</li> <li>qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/enable-ecn</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-drop-probability-percent</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold</li> <li>qos/interfaces/interface/output/queues/queue/config/name</li> <li>qos/interfaces/interface/output/queues/queue/config/queue-management-profile</li> <li>qos/interfaces/interface/output/scheduler-policy/config/name</li> <li>qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>qos/interfaces/interface/input/classifiers/classifier/config/type</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> <li>qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>qos/interfaces/interface/output/queues/queue/state/name</li> <li>qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>NONE.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/ecn/otg_tests/DSCP-transparency/#required-dut-platform","title":"Required DUT platform","text":"<ul> <li>FFF</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/bursty_traffic_test/","title":"DP-1.11: Bursty traffic test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/bursty_traffic_test/#summary","title":"Summary","text":"<p>Verify that DUT does not drop bursty traffic.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/bursty_traffic_test/#qos-traffic-test-setup","title":"QoS traffic test setup:","text":"<ul> <li> <p>Topology:</p> <ul> <li>2 input interfaces and 1 output interface with the same port speed. The     interface can be a physical interface or LACP bundle interface with the     same aggregated speed.</li> </ul> <pre><code>  ATE port 1\n      |\n     DUT--------ATE port 3\n      |\n  ATE port 2\n</code></pre> </li> <li> <p>Traffic classes:</p> <ul> <li>We will use 7 traffic classes NC1, AF4, AF3, AF2, AF1, BE0 and BE1.</li> </ul> </li> <li> <p>Traffic types:</p> <ul> <li>All the traffic tests apply to both IPv4 and IPv6 traffic.</li> </ul> </li> <li> <p>Queue types:</p> <ul> <li>NC1 will have strict priority queues<ul> <li>AF4/AF3/AF2/AF1/BE1/BE0 will use WRR queues.</li> </ul> </li> <li>NC1 will have strict priority queue.<ul> <li>AF4, AF3, AF2, AF1, BE1 and BE0 will use WRR queues.</li> </ul> </li> </ul> </li> <li> <p>Test results should be independent of the location of interfaces. For     example, 2 input interfaces and output interface could be located on</p> <ul> <li>Same ASIC-based forwarding engine</li> <li>Different ASIC-based forwarding engine on same line card</li> <li>Different ASIC-based forwarding engine on different line cards</li> </ul> </li> <li> <p>Test results should be the same for port speeds 100G and 400G.</p> </li> <li> <p>Counters should be also verified for each test case:</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>transmit-pkts should be equal to the number of Rx pkts on Ixia port</li> <li>dropped-pkts should be equal to diff between the number of Tx and the     number Rx pkts on Ixia ports</li> </ul> </li> <li> <p>Latency:</p> <ul> <li>Should be &lt; 100000ns</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/bursty_traffic_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2 and DUT port-3 to     ATE port-3.</p> </li> <li> <p>Configuration:</p> <ul> <li>Configure strict priority queues for NC1 and AF4 with NC1 having higher     priority.</li> <li>Configure WRR for AF4, AF3, AF2, AF1, BE0 and BE1 with weight 48, 12, 8,     4, 1 and 1 respectively.</li> </ul> </li> <li> <p>Verify that there is no traffic loss with bursty traffic</p> <ul> <li>NC1 traffic from Input interface 1 and 2:</li> </ul> Interface# Rate(%) Frame size Packet count Inter-pkt gap(bytes) inter burst gap(bytes) Output(%) 1 45 512 1200 12 48000 100 2 50 512 1200 12 96000 100 <ul> <li>Repeat the above test case for other traffic classes::<ul> <li>AF4</li> <li>AF3</li> <li>AF2</li> <li>AF1</li> <li>BE1</li> <li>BE0</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/bursty_traffic_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/bursty_traffic_test/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/mixed_sp_wrr_traffic_test/","title":"DP-1.10: Mixed strict priority and WRR traffic test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/mixed_sp_wrr_traffic_test/#summary","title":"Summary","text":"<p>Verify that DUT drops AF3, AF2, AF1, BE1 and BE0 before AF4 before NC1 and forwards AF3, AF2, AF1, BE1 and BE0 based on weight.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/mixed_sp_wrr_traffic_test/#qos-traffic-test-setup","title":"QoS traffic test setup:","text":"<ul> <li> <p>Topology:</p> <ul> <li>2 input interfaces and 1 output interface with the same port speed. The     interface can be a physical interface or LACP bundle interface with the     same aggregated speed.</li> </ul> <pre><code>  ATE port 1\n      |\n     DUT--------ATE port 3\n      |\n  ATE port 2\n</code></pre> </li> <li> <p>Traffic classes:</p> <ul> <li>We will use 7 traffic classes NC1, AF4, AF3, AF2, AF1, BE1 and BE0.</li> </ul> </li> <li> <p>Traffic types:</p> <ul> <li>All the traffic tests apply to both IPv4 and IPv6 traffic.</li> </ul> </li> <li> <p>Queue types:</p> <ul> <li>NC1 will have strict priority queues<ul> <li>AF4/AF3/AF2/AF1/BE1/BE0 will use WRR queues.</li> </ul> </li> <li>NC1 and AF4 will have strict priority queues with NC1 having higher     priority.<ul> <li>AF3, AF2, AF1, BE1 and BE0 will use WRR queues.</li> </ul> </li> </ul> </li> <li> <p>Test results should be independent of the location of interfaces. For     example, 2 input interfaces and output interface could be located on</p> <ul> <li>Same ASIC-based forwarding engine</li> <li>Different ASIC-based forwarding engine on same line card</li> <li>Different ASIC-based forwarding engine on different line cards</li> </ul> </li> <li> <p>Test results should be the same for port speeds 100G and 400G.</p> </li> <li> <p>Counters should be also verified for each test case:</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>transmit-pkts should be equal to the number of Rx pkts on Ixia port</li> <li>dropped-pkts should be equal to diff between the number of Tx and the     number Rx pkts on Ixia ports</li> </ul> </li> <li> <p>Latency:</p> <ul> <li>Should be &lt; 100000ns</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/mixed_sp_wrr_traffic_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2 and DUT port-3 to     ATE port-3.</p> </li> <li> <p>Configuration:</p> <ul> <li>Configure strict priority queues for NC1 and AF4 with NC1 having higher     priority.</li> <li>Configure WRR for AF3, AF2, AF1, BE1 and BE0 with weight 32, 16, 8, 4     and 1 respectively.</li> </ul> </li> <li> <p>Non-oversubscription traffic test case</p> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) NC1 0.1 0.9 100 100 Af4 18 20 100 100 AF3 16 16 100 100 AF2 8 8 100 100 AF1 4 4 100 100 BE0 2 2 100 100 BE1 0.5 0.5 100 100 </li> <li> <p>Oversubscription traffic test case 1</p> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) NC1 0.1 0.9 100 100 Af4 50 49 100 100 AF3 20 14 0 0 AF2 14 24 0 0 AF1 12 4 0 0 BE0 1 7 0 0 BE1 1 1 0 0 </li> <li> <p>Oversubscription traffic test case 2</p> Traffic class Interface1(line rate %) Interface2(line rate %) Aggregate throughput(%) NC1 0.1 0.9 100 Af4 18 20 100 AF3 40 24 50 AF2 8 24 50 AF1 12 4 50 BE0 1 7 50 BE1 1 1 50 </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/mixed_sp_wrr_traffic_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/mixed_sp_wrr_traffic_test/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/one_sp_queue_traffic_test/","title":"DP-1.7: One strict priority queue traffic test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/one_sp_queue_traffic_test/#summary","title":"Summary","text":"<p>Verify that DUT drops AF4, AF3, AF2, AF1, BE1 and BE0 before NC1.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/one_sp_queue_traffic_test/#qos-traffic-test-setup","title":"QoS traffic test setup:","text":"<ul> <li> <p>Topology:</p> <ul> <li>2 input interfaces and 1 output interface with the same port speed. The     interface can be a physical interface or LACP bundle interface with the     same aggregated speed.</li> </ul> <pre><code>  ATE port 1\n      |\n     DUT--------ATE port 3\n      |\n  ATE port 2\n</code></pre> </li> <li> <p>Traffic classes:</p> <ul> <li>We will use 7 traffic classes NC1, AF4, AF3, AF2, AF1, BE0 and BE1.</li> </ul> </li> <li> <p>Traffic types:</p> <ul> <li>All the traffic tests apply to both IPv4 and IPv6 traffic.</li> </ul> </li> <li> <p>Queue types:</p> <ul> <li>NC1 will have strict priority queues<ul> <li>AF4/AF3/AF2/AF1/BE1/BE0 will use WRR queues.</li> </ul> </li> <li>NC1 and AF4 will have strict priority queues with NC1 having higher     priority.<ul> <li>AF3, AF2, AF1, BE1 and BE0 will use WRR queues.</li> </ul> </li> </ul> </li> <li> <p>Test results should be independent of the location of interfaces. For     example, 2 input interfaces and output interface could be located on</p> <ul> <li>Same ASIC-based forwarding engine</li> <li>Different ASIC-based forwarding engine on same line card</li> <li>Different ASIC-based forwarding engine on different line cards</li> </ul> </li> <li> <p>Test results should be the same for port speeds 100G and 400G.</p> </li> <li> <p>Counters should be also verified for each test case:</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>transmit-pkts should be equal to the number of Rx pkts on Ixia port</li> <li>dropped-pkts should be equal to diff between the number of Tx and the     number Rx pkts on Ixia ports</li> </ul> </li> <li> <p>Latency:</p> <ul> <li>Should be &lt; 100000ns</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/one_sp_queue_traffic_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2 and DUT port-3 to     ATE port-3.</p> </li> <li> <p>Configuration</p> <ul> <li>Configure strict priority queue for NC1.</li> <li>Configure WRR for AF4, AF3, AF2, AF1, BE1 and BE0 with weight 48, 12, 8,     4, 2 and 1 respectively.</li> </ul> </li> <li> <p>NC1 vs AF4 traffic test</p> <ul> <li>Non-oversubscription traffic test case</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) NC1 0.1 0.7 100 100 AF4 45.1 54.1 100 100 <ul> <li>Oversubscription traffic test case</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) NC1 0.1 0.7 100 100 AF4 99.9 99.3 49.8 49.8 </li> <li> <p>Repeat the above 2 test cases between traffic classes:</p> <ul> <li>NC1 vs AF3</li> <li>NC1 vs AF2</li> <li>NC1 vs AF1</li> <li>NC1 vs BE1</li> <li>NC1 vs BE0</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/one_sp_queue_traffic_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/one_sp_queue_traffic_test/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/","title":"DP-1.14: QoS basic test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/#summary","title":"Summary","text":"<p>Verify that DUT supports QoS config and forward QoS traffic correctly.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/#qos-traffic-test-setup","title":"QoS traffic test setup:","text":"<ul> <li> <p>Topology:</p> <ul> <li>2 input interfaces and 1 output interface with the same port speed. The     interface can be a physical interface or LACP bundle interface with the     same aggregated speed.</li> </ul> <pre><code>  ATE port 1\n      |\n     DUT--------ATE port 3\n      |\n  ATE port 2\n</code></pre> </li> <li> <p>Traffic classes:</p> <ul> <li>We will use 7 traffic classes NC1, AF4, AF3, AF2, AF1, BE0 and BE1.</li> </ul> </li> <li> <p>Traffic types:</p> <ul> <li>All the traffic tests apply to both IPv4 and IPv6 traffic.</li> </ul> </li> <li> <p>Queue types:</p> <ul> <li>NC1 will have strict priority queues<ul> <li>AF4/AF3/AF2/AF1/BE1/BE0 will use WRR queues.</li> </ul> </li> <li>NC1 and AF4 will have strict priority queues with NC1 having higher     priority.<ul> <li>AF3, AF2, AF1, BE1 and BE0 will use WRR queues.</li> </ul> </li> </ul> </li> <li> <p>Test results should be independent of the location of interfaces. For     example, 2 input interfaces and output interface could be located on</p> <ul> <li>Same ASIC-based forwarding engine</li> <li>Different ASIC-based forwarding engine on same line card</li> <li>Different ASIC-based forwarding engine on different line cards</li> </ul> </li> <li> <p>Test results should be the same for port speeds 100G and 400G.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2 and DUT port-3 to     ATE port-3.</p> </li> <li> <p>Configuration:</p> <ul> <li>Configure strict priority queues for NC1.</li> <li>Configure WRR for AF4, AF3, AF2, AF1, BE0 and BE1 with weight 48, 12, 8, 4, 1     and 1 respectively.</li> </ul> </li> <li> <p>Counters should be verified for each test case:</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>transmit-pkts should be equal to the number of Rx pkts on Ixia port</li> <li>dropped-pkts should be equal to diff between the number of Tx and the     number Rx pkts on Ixia ports</li> </ul> </li> <li> <p>Latency:</p> <ul> <li>Should be &lt; 100000ns</li> </ul> </li> <li> <p>Non-oversubscription traffic test case 1 with 80% of aggregated linerate</p> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) NC1 3 3 100 100 Af4 24 24 100 100 AF3 6 6 100 100 AF2 4 4 100 100 AF1 2 2 100 100 BE0 0.5 0.5 100 100 BE1 0.5 0.5 100 100 </li> <li> <p>Non-oversubscription traffic test case 2 with 98% of aggregated linerate</p> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) NC1 5 4 100 100 Af4 30 30 100 100 AF3 7.5 7.5 100 100 AF2 4 4 100 100 AF1 2 2 100 100 BE0 0.5 0.5 100 100 BE1 0.5 0.5 100 100 </li> <li> <p>Verify that there is no traffic loss</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/#dp-1141-todo-httpsgithubcomopenconfigfeatureprofilesissues2321","title":"DP-1.14.1 [TODO: https://github.com/openconfig/featureprofiles/issues/2321]","text":"<ul> <li> <p>Initiate traffic</p> </li> <li> <p>Counters should be verified using gNMI subscribe with sample mode</p> <ul> <li> <p>Run the test twice, once with a SAMPLE interval of 10 Seconds and once again     with a SAMPLE interval of 15 seconds for the below telemetry paths</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul> </li> </ul> </li> <li> <p>Ensure counter of all queues increment at the selected SAMPLE interval</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<ul> <li>gNMI</li> <li>Get</li> <li>Subscribe</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_basic_test/#required-dut-platform","title":"Required DUT platform","text":"<ul> <li>FFF</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_output_queue_counters_test/","title":"DP-1.4: QoS Interface Output Queue Counters","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_output_queue_counters_test/#summary","title":"Summary","text":"<p>Validate QoS interface output queue counters.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_output_queue_counters_test/#procedure","title":"Procedure","text":"<ul> <li>Configure ATE port-1 connected to DUT port-1, and ATE port-2 connected to DUT port-2, with the relevant IPv4 addresses.</li> <li>Send the traffic with forwarding class NC1, AF4, AF3, AF2, AF1 and BE1 over the DUT.</li> <li>Verify that the following telemetry paths exist on the QoS output interface of the DUT.<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_output_queue_counters_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/interfaces/interface/config/enabled</li> <li>/interfaces/interface/config/name</li> <li>/interfaces/interface/config/description</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/qos_output_queue_counters_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/two_sp_queue_traffic_test/","title":"DP-1.8: Two strict priority queue traffic test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/two_sp_queue_traffic_test/#summary","title":"Summary","text":"<p>Verify that DUT drops AF3, AF2, AF1, BE1 and BE0 before AF4 before NC1.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/two_sp_queue_traffic_test/#qos-traffic-test-setup","title":"QoS traffic test setup:","text":"<ul> <li> <p>Topology:</p> <ul> <li>2 input interfaces and 1 output interface with the same port speed. The     interface can be a physical interface or LACP bundle interface with the     same aggregated speed.</li> </ul> <pre><code>  ATE port 1\n      |\n     DUT--------ATE port 3\n      |\n  ATE port 2\n</code></pre> </li> <li> <p>Traffic classes:</p> <ul> <li>We will use 7 traffic classes NC1, AF4, AF3, AF2, AF1, BE1 and BE0.</li> </ul> </li> <li> <p>Traffic types:</p> <ul> <li>All the traffic tests apply to both IPv4 and IPv6 traffic.</li> </ul> </li> <li> <p>Queue types:</p> <ul> <li>NC1 will have strict priority queues<ul> <li>AF4/AF3/AF2/AF1/BE1/BE0 will use WRR queues.</li> </ul> </li> <li>NC1 and AF4 will have strict priority queues with NC1 having higher     priority.<ul> <li>AF3, AF2, AF1, BE1 and BE0 will use WRR queues.</li> </ul> </li> </ul> </li> <li> <p>Test results should be independent of the location of interfaces. For     example, 2 input interfaces and output interface could be located on</p> <ul> <li>Same ASIC-based forwarding engine</li> <li>Different ASIC-based forwarding engine on same line card</li> <li>Different ASIC-based forwarding engine on different line cards</li> </ul> </li> <li> <p>Test results should be the same for port speeds 100G and 400G.</p> </li> <li> <p>Counters should be also verified for each test case:</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>transmit-pkts should be equal to the number of Rx pkts on Ixia port</li> <li>dropped-pkts should be equal to diff between the number of Tx and the     number Rx pkts on Ixia ports</li> </ul> </li> <li> <p>Latency:</p> <ul> <li>Should be &lt; 100000ns</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/two_sp_queue_traffic_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2 and DUT port-3 to     ATE port-3.</p> </li> <li> <p>Configuration</p> <ul> <li>Configure strict priority queues for NC1 and AF4 with NC1 having higher     priority.</li> <li>Configure WRR for AF3, AF2, AF1, BE1 and BE0 with weight 12, 8, 4, 2 and     1 respectively.</li> </ul> </li> <li> <p>NC1 vs AF4 Strict priority traffic test</p> <ul> <li>Non-oversubscription traffic test case</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) NC1 0.1 0.7 100 100 AF4 45.1 54.1 100 100 <ul> <li>Oversubscription traffic test case</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) NC1 0.1 0.7 100 100 AF4 99.9 99.3 49.8 49.8 </li> <li> <p>Repeat the above 2 test cases between traffic classes:</p> <ul> <li>NC1 vs AF3</li> <li>NC1 vs AF2</li> <li>NC1 vs AF1</li> <li>NC1 vs BE1</li> <li>NC1 vs BE0</li> </ul> </li> <li> <p>Strict priority vs WRR traffic test</p> <ul> <li>Starvation traffic test case</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) AF4 50 50 100 100 AF3 50 50 0 0 <ul> <li>Oversubscription traffic test case</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) AF4 20 30 100 100 AF3 60 40 50 50 </li> <li> <p>Repeat the above 2 test cases between traffic classes:</p> <ul> <li>AF4 vs AF2</li> <li>AF4 vs AF1</li> <li>AF4 vs BE1</li> <li>AF4 vs BE0</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/two_sp_queue_traffic_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/two_sp_queue_traffic_test/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/wrr_traffic_test/","title":"DP-1.9: WRR traffic test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/wrr_traffic_test/#summary","title":"Summary","text":"<p>Verify that DUT forwards AF3, AF2, AF1, BE0 and BE1 traffic based on WRR weight.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/wrr_traffic_test/#qos-traffic-test-setup","title":"QoS traffic test setup:","text":"<ul> <li> <p>Topology:</p> <ul> <li>2 input interfaces and 1 output interface with the same port speed. The     interface can be a physical interface or LACP bundle interface with the     same aggregated speed.</li> </ul> <pre><code>  ATE port 1\n      |\n     DUT--------ATE port 3\n      |\n  ATE port 2\n</code></pre> </li> <li> <p>Traffic classes:</p> <ul> <li>We will use 7 traffic classes NC1, AF4, AF3, AF2, AF1, BE0 and BE1.</li> </ul> </li> <li> <p>Traffic types:</p> <ul> <li>All the traffic tests apply to both IPv4 and IPv6 traffic.</li> </ul> </li> <li> <p>Queue types:</p> <ul> <li>NC1 will have strict priority queues<ul> <li>AF4/AF3/AF2/AF1/BE1/BE0 will use WRR queues.</li> </ul> </li> <li>NC1 and AF4 will have strict priority queues with NC1 having higher     priority.<ul> <li>AF3, AF2, AF1, BE1 and BE0 will use WRR queues.</li> </ul> </li> </ul> </li> <li> <p>Test results should be independent of the location of interfaces. For     example, 2 input interfaces and output interface could be located on</p> <ul> <li>Same ASIC-based forwarding engine</li> <li>Different ASIC-based forwarding engine on same line card</li> <li>Different ASIC-based forwarding engine on different line cards</li> </ul> </li> <li> <p>Test results should be the same for port speeds 100G and 400G.</p> </li> <li> <p>Counters should be also verified for each test case:</p> <ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>transmit-pkts should be equal to the number of Rx pkts on Ixia port</li> <li>dropped-pkts should be equal to diff between the number of Tx and the     number Rx pkts on Ixia ports</li> </ul> </li> <li> <p>Latency:</p> <ul> <li>Should be &lt; 100000ns</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/wrr_traffic_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2 and DUT port-3 to     ATE port-3.</p> </li> <li> <p>Configure WRR for AF3, AF2, AF1, BE0 and BE1 with weight 64, 16, 4, 1 and     1 respectively.</p> </li> <li> <p>AF3 vs AF2 traffic test</p> <ul> <li>Non-oversubscription traffic test case</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) AF3 40 40 100 100 AF2 10 10 100 100 <ul> <li>Oversubscription traffic test case 1</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) AF3 80 80 50 50 AF2 10 10 100 100 <ul> <li>Oversubscription traffic test case 2</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) AF3 40 40 100 100 AF2 20 20 50 50 <ul> <li>Oversubscription traffic test case 3</li> </ul> Traffic class Interface1(line rate %) Interface2(line rate %) Rx from interface1(%) Rx from interface2(%) AF3 50 50 80 80 AF2 50 50 20 20 </li> <li> <p>Repeat the above 3 oversubscription test cases between traffic classes</p> <ul> <li>AF2 vs AF1</li> <li>AF1 vs BE1</li> <li>BE1 vs BE0</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/wrr_traffic_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/otg_tests/wrr_traffic_test/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/transmit-octets</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-pkts</li> <li>/qos/interfaces/interface/output/queues/queue/state/dropped-octets</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_ecn_config_test/","title":"DP-1.3: QoS ECN feature config","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_ecn_config_test/#summary","title":"Summary","text":"<p>Verify QoS ECN feature configuration.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_ecn_config_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2.</p> </li> <li> <p>ECN configuration paramentes:</p> <ul> <li> <p>This test is verifying DUT ability to accept ECN configuration with vertical buffer utilization cut-off line.\\ If buffer is utilized below that cut-off value no packet is ECN CE marked.\\ If buffer is utilized at of above that cut-off value all packet are ECN CE marked.</p> </li> <li> <p>ECN profile can be created for different queues. ECN profiles per queue     can be applied to the output side of interfaces.</p> <p>Test case|min-threshold | max-threshold | enable-ecn | drop  | weight  | max-drop-probability-percent |--------|------------- | ------------- | ---------- | ----- | ------- | ---------------------------- |#1      |80KB          |80KB          | true       | false | not set | 100 |[TODO]#2      |3.125MB       | 6.250MB*      | true       | false | not set | 100 |[TODO]#3      |1%            | 2%            | true       | false | not set | 100</p> </li> <li> <p>6.25MB max-treshhold is selected as it represents ~500 mico-seconds of Delay bandwidth Buffer on 100GE interfaces. What is O(2%) of buffer depth, hence allows for micro-burst absorbtion without beackpressing senders and at same time leaves enough DBB for accomodate RTT ECN signaling loop delay in global network for longer burst/congestion.</p> </li> </ul> </li> <li> <p>Procedure</p> <ul> <li>Test Case #1 80KB min-threshold equal max-threshold<ul> <li>Configute queue-management-profile w/ ECN paramenters as above. Attach to queue on DUT-Port1.</li> <li>Validate that the following values are set as expected using OC telemetry.<ul> <li>min-threshold</li> <li>max-threshold</li> <li>min-threshold = max-threshold (vertical cut-off line)</li> <li>enable-ecn</li> <li>drop</li> <li>max-drop-probability-percent</li> </ul> </li> <li>Validate ECN profile can be applied under output interface queue using     OC telemetry.</li> </ul> </li> <li>[TODO]Test Case #2 Treshold in MB, min-threshold not-equal max-threshold<ul> <li>Configute queue-management-profile w/ ECN paramenters as above. Attach to queue on DUT-Port1.</li> <li>Validate that the following values are set as expected using OC telemetry.<ul> <li>min-threshold</li> <li>max-threshold</li> <li>enable-ecn</li> <li>drop</li> <li>max-drop-probability-percent</li> </ul> </li> <li>Validate ECN profile can be applied under output interface queue using     OC telemetry.</li> </ul> </li> <li>[TODO]Test Case #3 Treshold in percentage, min-threshold not-equal max-threshold<ul> <li>Configute queue-management-profile w/ ECN paramenters as above. Attach to queue on DUT-Port1.</li> <li>Validate that the following values are set as expected using OC telemetry.<ul> <li>min-threshold-percent</li> <li>max-threshold-percent</li> <li>enable-ecn</li> <li>drop</li> <li>max-drop-probability-percent</li> </ul> </li> <li>Validate ECN profile can be applied under output interface queue using     OC telemetry.</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_ecn_config_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>ECN</p> <ul> <li>[TODO] qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold-percent</li> <li>[TODO] qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold-percent    </li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/min-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/enable-ecn</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/weight</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/drop</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/config/max-drop-probability-percent</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/queue-management-profile</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_ecn_config_test/#telemetry-parameter-coverage","title":"telemetry parameter coverage","text":"<ul> <li> <p>ECN</p> <ul> <li>[TODO] qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold-percent</li> <li>[TODO] qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold-percent  </li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/state/min-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-threshold</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/state/enable-ecn</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/state/weight</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/state/drop</li> <li>qos/queue-management-profiles/queue-management-profile/wred/uniform/state/max-drop-probability-percent</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/state/name</li> <li>/qos/interfaces/interface/output/queues/queue/state/name</li> <li>/qos/interfaces/interface/output/queues/queue/state/queue-management-profile</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_ecn_config_test/#platform","title":"platform","text":"<ul> <li>vRX</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_policy_config_test/","title":"DP-1.2: QoS policy feature config","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_policy_config_test/#summary","title":"Summary","text":"<p>Verify QoS policy feature configuration.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_policy_config_test/#procedure","title":"Procedure","text":"<ul> <li> <p>Connect DUT port-1 to ATE port-1, DUT port-2 to ATE port-2.</p> </li> <li> <p>Classifiers config:</p> <ul> <li> <p>Classifiers support both Ipv4 and IPv6 dscp range based classification.     Classifiers will be applied to input interfaces.</p> DSCP Range Target group 0-3 target-group-BE0 4-7 target-group-BE1 8-11 target-group-AF1 16-19 target-group-AF2 24-27 target-group-AF3 32-35 target-group-AF4 48-59 target-group-NC1 </li> <li> <p>Validate that the following values can be configured</p> <ul> <li>name</li> <li>type: Input_Classifier_Type_IPV4 or Input_Classifier_Type_IPV6</li> <li>term id</li> <li>IPv4 dscp-set</li> <li>IPV6 dscp-set</li> <li>Target-group</li> </ul> </li> <li> <p>The following OC config paths can be used to configure the above values:</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> </ul> </li> <li> <p>Queue config:</p> <ul> <li> <p>Configure queue names:</p> <ul> <li>AF1</li> <li>AF2</li> <li>AF3</li> <li>AF4</li> <li>BE0</li> <li>BE1</li> <li>NC1</li> </ul> </li> <li> <p>The following OC config path can be used to configure the queue name:</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> </ul> </li> <li> <p>Forwarding-groups config:</p> <ul> <li> <p>Configure forwarding-groups and output queue name.</p> Output Queue Fowarding group BE0 forwarding-group-BE0 BE1 forwarding-group-BE1 AF1 forwarding-group-AF1 AF2 forwarding-group-AF2 AF3 forwarding-group-AF3 AF4 forwarding-group-AF4 NC1 forwarding-group-NC1 </li> <li> <p>The following OC config paths can be used to configure the     forwarding-groups:</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> </ul> </li> <li> <p>Scheduler-policies config:</p> <ul> <li> <p>Schedulers define per queue for STRICT priority and weighted round     robin. It will be applied to output interfaces.</p> Queue Priority Sequence Weight BE1 not set 1 1 BE0 not set 1 2 AF1 not set 1 4 AF2 not set 1 8 AF3 not set 1 16 AF4 STRICT 0 100 NC1 STRICT 0 200 </li> <li> <p>Validate that the following values can be configured</p> <ul> <li>Scheduler-policy name</li> <li>Priority<ul> <li>Note: Priority is set to STRICT for strict priority queues. Not     set for round-robin queues.</li> </ul> </li> <li>Sequence</li> <li>Input id</li> <li>Input-type: Input_InputType_QUEUE</li> <li>Queue</li> <li>Weight<ul> <li>Note: For priority schedulers, this indicates the priority of     the corresponding input. Higher values indicates higher     priority. For weighted round-robin schedulers, this indicates     the weight of the corresponding input.</li> </ul> </li> </ul> </li> <li> <p>The following OC config paths can be used to configure the above values:</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> </ul> </li> <li> <p>Interfaces</p> <ul> <li> <p>Validate that the following values can be configured on the output     interfaces</p> <ul> <li>Queue name</li> <li>Scheduler-policy name</li> </ul> </li> <li> <p>Validate that the classifier can be configured on the input interfaces</p> <ul> <li>Classifier name</li> </ul> </li> <li> <p>The following OC config paths can be used to configure the above values:</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/qos/tests/qos_policy_config_test/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li> <p>Classifiers</p> <ul> <li>/qos/classifiers/classifier/config/name</li> <li>/qos/classifiers/classifier/config/type</li> <li>/qos/classifiers/classifier/terms/term/actions/config/target-group</li> <li>/qos/classifiers/classifier/terms/term/conditions/ipv4/config/dscp-set</li> <li>qos/classifiers/classifier/terms/term/conditions/ipv6/config/dscp-set</li> <li>/qos/classifiers/classifier/terms/term/config/id</li> </ul> </li> <li> <p>Forwarding Groups</p> <ul> <li>/qos/forwarding-groups/forwarding-group/config/name</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> </ul> </li> <li> <p>Queue</p> <ul> <li>/qos/queues/queue/config/name</li> </ul> </li> <li> <p>Interfaces</p> <ul> <li>/qos/interfaces/interface/input/classifiers/classifier/config/name</li> <li>/qos/interfaces/interface/output/queues/queue/config/name</li> <li>/qos/interfaces/interface/output/scheduler-policy/config/name</li> </ul> </li> <li> <p>Scheduler policy</p> <ul> <li>/qos/scheduler-policies/scheduler-policy/config/name</li> <li>/qos/scheduler-policies/scheduler     -policy/schedulers/scheduler/config/priority</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/sequence</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config/type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/id</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/input-type</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/queue</li> <li>/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config/weight</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/","title":"gNSI.acctz.v1 (Accounting) Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/#gnsi-accounting-acctz-test-prerequisites","title":"gNSI Accounting (acctz) Test prerequisites:","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/#minimum-dut-pre-requisites","title":"Minimum DUT pre-requisites:","text":"<ul> <li>Virtual device (vRX)</li> <li>DUT must support gnsi.acctz.v1</li> <li>DUT is expected to support all or some of the accounting record generating subsystems listed in acctz.CommandService.CmdServiceType and GrpcService.GrpcServiceType.  These tests concentrate on the functionality of the given gNSI operations, not the underlying protocols nor those subsystems.</li> <li>DUT must have a NTP source</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/#minimum-accounting-remote-collector-pre-requisites","title":"Minimum Accounting Remote Collector Pre-requisites:","text":"<ul> <li>A gNSI accounting client (aka. \"Remote Collector\") is needed to make acctz gRPCs requests to the DUT.  It must be possible to inspect the received data.</li> <li>Clients for the various accounting record generating subsystems listed in acctz.CommandService.CmdServiceType and GrpcService.GrpcServiceType and console access, if applicable.</li> <li>The accounting client must have a NTP source.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/#other","title":"Other","text":"<ul> <li>An NTP source</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/#gnsi-accounting-acctz-test-configuration-library","title":"gNSI Accounting (acctz) Test Configuration library:","text":"<p>Create a library of device configuration to be used for all of the gNSI.acctz.v1 tests with the following:</p> <ul> <li>Configure both IPv4 and IPv6, if supported by the implementation.</li> <li>DUT must be configured to, or by default have, a large enough accounting record history to accommodate these tests.  The minimum size is determined by the number of accounting record generating subsystems supported by the DUT and the size of the requests made.</li> <li>If not the default, accounting record generating subsystems must be configured to generate accounting records to gNSI.</li> <li>The DUT must be configured for login/logout (aka. start/stop), \"enable\" (privilege escalation), and \"watchdog\" (idle) accounting, if supported</li> <li>DUT has basic configuration to facilitate a gNSI connection and connections for each of those subsystems.</li> <li>DUT-local user accounts are required:<ul> <li>A User permitted to make gnsi.acctz requests</li> <li>A User not permitted to make gnsi.acctz requests</li> <li>A User permitted to call some grpc, but not all</li> <li>A User permitted to run some commands in each of the service classes of gnsi.acctz.v1.CommandService.CmdServiceType &amp; gnsi.acctz.v1.GrpcService.GrpcServiceType, but not all</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/#gnsi-accounting-acctz-tests","title":"gNSI Accounting (acctz) Tests:","text":"<ul> <li>ACCTZ-1.1 Record Subscribe Full</li> <li>ACCTZ-2.1 Record Subscribe Partial</li> <li>ACCTZ-3.1 Record Subscribe Non-gRPC</li> <li>ACCTZ-4.1 Record Response Truncation</li> <li>ACCTZ-5.1 Record Subscribe Idle Timeout</li> <li>ACCTZ-6.1 Record Subscribe Idle Timeout DoA</li> <li>ACCTZ-7.1 Accounting Authentication Failure - Multi-transaction</li> <li>ACCTZ-8.1 Accounting Authentication Failure - Uni-transaction</li> <li>ACCTZ-9.1 Accounting Privilege Escalation</li> <li>ACCTZ-10.1 Accounting Authentication Error - Multi-transaction</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/","title":"ACCTZ-10.1 - gNSI.acctz.v1 (Accounting) Test Accounting Authentication Error - Multi-transaction","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#summary","title":"Summary","text":"<p>Test Accounting for authentication errors in the authentication service for multi-transaction logins.  For example, unreachable TACACS+ server(s).</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#procedure","title":"Procedure","text":"<ul> <li>Record the time T0 for use later in this test</li> <li>For one of the supported RecordResponse.service_request.service_type that is not authenticated per-transaction:<ul> <li>Connect to the DUT, recording the local and remote IP addresses and port numbers,</li> <li>Provide a some combination of invalid authentication (eg: valid user but invalid password)</li> <li>Disconnect</li> </ul> </li> <li>Establish gNSI connection to the DUT.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = T0</li> <li>Verify that accurate accounting records are returned for the commands/RPCs authentication failures.</li> <li>If start/stop accounting is supported, each authentication failure should have an accompanying LOGIN accounting record.</li> <li>For the RecordResponse correlated to the connection made above, check/confirm that:<ul> <li>session_info. :<ul> <li>.{layer4_proto, local_address, local_port, remote_address, remote_port}, ip_proto must match those recorded earlier</li> <li>channel_id = 0 for ssh and grpc.</li> <li>.tty must be populated and correct, if applicable to the platform &amp; access method, else omitted</li> <li>.status must equal LOGIN:<ul> <li>.authen.type must equal the authentication method used.</li> <li>.authen.status must equal ERROR, and cause should be populated.</li> <li>.authen.cause should be populated with reason(s) for the failure.</li> </ul> </li> <li>.user.identity must match the username sent to authenticate to the DUT</li> <li>.user.privilege_level should be omitted.</li> </ul> </li> <li>timestamp is after (greater than) RecordRequest.timestamp</li> <li>session_info.service_request.serivce_type must equal the service used.</li> <li>cmd_service or grpc_service: <ul> <li>.service_type must equal the service used</li> <li>all other fields should be omitted.</li> </ul> </li> <li>for authorization:<ul> <li>all other fields should be omitted.</li> </ul> </li> <li>task_ids might be populate with platform-specific information</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#parameter","title":"Parameter:","text":"<p>RecordRequest.timestamp!=0 Record.service_request = CommandService</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#telemetry-coverage","title":"Telemetry Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#prefix_1","title":"Prefix:","text":"<p>Accounting does not currently support any telemetry; see https://github.com/openconfig/gnsi/issues/97 where it might become /system/aaa/acctz/XXX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#protocolrpc","title":"Protocol/RPC","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenErrorMulti/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/","title":"ACCTZ-7.1 - gNSI.acctz.v1 (Accounting) Test Accounting Authentication Failure - Multi-transaction","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#summary","title":"Summary","text":"<p>Test Accounting for authentication failures of multi-transaction logins</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#procedure","title":"Procedure","text":"<ul> <li>Record the time T0 for use later in this test</li> <li>For each of the supported RecordResponse.service_request.service_type that is not authenticated per-transaction:<ul> <li>Connect to the DUT, recording the local and remote IP addresses and port numbers,</li> <li>Provide invalid user credentials (including an empty username, unconfigured username, empty password, invalid password, wrong SSH key/certificate, etc),</li> <li>disconnect</li> </ul> </li> <li>Establish gNSI connection to the DUT.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = T0</li> <li>Verify that accurate accounting records are returned for the commands/RPCs authentication failures.</li> <li>If start/stop accounting is supported, each authentication failure should have an accompanying LOGIN accounting record.</li> <li>For each RecordResponse correlated to each connection made above, check/confirm that:<ul> <li>session_info. :<ul> <li>.{layer4_proto, local_address, local_port, remote_address, remote_port}, ip_proto must match those recorded earlier</li> <li>channel_id = 0 for ssh and grpc.</li> <li>.tty must be populated and correct, if applicable to the platform &amp; access method, else omitted</li> <li>.status must equal LOGIN:<ul> <li>.authen.type must equal the authentication method used.</li> <li>.authen.status must equal FAIL, and cause should be populated.</li> <li>.authen.cause should be populated with reason(s) for the failure.</li> </ul> </li> <li>.user.identity must match the username sent to authenticate to the DUT</li> <li>.user.privilege_level should be omitted.</li> </ul> </li> <li>timestamp is after (greater than) RecordRequest.timestamp</li> <li>session_info.service_request.serivce_type must equal the service used.</li> <li>cmd_service. or grpc_service: <ul> <li>.service_type must equal the service used</li> <li>all other fields should be omitted.</li> </ul> </li> <li>for authorization:<ul> <li>all other fields should be omitted.</li> </ul> </li> <li>task_ids might be populate with platform-specific information</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#parameter","title":"Parameter:","text":"<p>RecordRequest.timestamp!=0 Record.service_request = CommandService</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#telemetry-coverage","title":"Telemetry Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#prefix_1","title":"Prefix:","text":"<p>Accounting does not currently support any telemetry; see https://github.com/openconfig/gnsi/issues/97 where it might become /system/aaa/acctz/XXX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#protocolrpc","title":"Protocol/RPC","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailMulti/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/","title":"ACCTZ-8.1 - gNSI.acctz.v1 (Accounting) Test Accounting Authentication Failure - Uni-transaction","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#summary","title":"Summary","text":"<p>Test Accounting for authentication failures of uni-transaction logins</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#procedure","title":"Procedure","text":"<ul> <li>Record the time T0 for use later in this test</li> <li>For each of the supported RecordResponse.service_request.service_type that is authenticated per-transaction:<ul> <li>Connect to the DUT, recording the local and remote IP addresses and port numbers,</li> <li>Provide invalid user credentials (including an empty username, unconfigured username, empty password, invalid password, wrong SSH key/certificate, etc),</li> <li>disconnect</li> </ul> </li> <li>Establish gNSI connection to the DUT.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = T0</li> <li>Verify that accurate accounting records are returned for the commands/RPCs authentication failures.</li> <li>If start/stop accounting is supported, each authentication failure should have an accompanying ONCE accounting record.</li> <li>For each RecordResponse correlated to each connection made above, check/confirm that:<ul> <li>session_info. :<ul> <li>.{layer4_proto, local_address, local_port, remote_address, remote_port}, ip_proto must match those recorded earlier</li> <li>channel_id = 0 for ssh and grpc.</li> <li>.tty must be populated and correct, if applicable to the platform &amp; access method, else omitted</li> <li>.status must equal ONCE:<ul> <li>.authen.type must equal the authentication method used.</li> <li>.authen.status must equal FAIL, and cause should be populated.</li> <li>.authen.cause should be populated with reason(s) for the failure.</li> </ul> </li> <li>.user.identity must match the username sent to authenticate to the DUT</li> <li>.user.privilege_level should be omitted.</li> </ul> </li> <li>timestamp is after (greater than) RecordRequest.timestamp</li> <li>session_info.service_request.serivce_type must equal the service used.</li> <li>cmd_service. or grpc_service: <ul> <li>.service_type must equal the service used</li> <li>all other fields should be omitted.</li> </ul> </li> <li>for authorization:<ul> <li>all other fields should be omitted.</li> </ul> </li> <li>task_ids might be populate with platform-specific information</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#parameter","title":"Parameter:","text":"<p>RecordRequest.timestamp!=0 Record.service_request = CommandService</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#telemetry-coverage","title":"Telemetry Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#prefix_1","title":"Prefix:","text":"<p>Accounting does not currently support any telemetry; see https://github.com/openconfig/gnsi/issues/97 where it might become /system/aaa/acctz/XXX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#protocolrpc","title":"Protocol/RPC","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingAuthenFailUni/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/","title":"ACCTZ-9.1 - gNSI.acctz.v1 (Accounting) Test Accounting Privilege Escalation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#summary","title":"Summary","text":"<p>Test Accounting for changing current privilege level, if supported.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#procedure","title":"Procedure","text":"<ul> <li>Record the time T0 for use later in this test</li> <li>For each of the supported RecordResponse.service_request.service_type that supports privilege escalation:<ul> <li>Connect to the DUT, recording the local and remote IP addresses and port numbers,</li> <li>change privilege level,</li> <li>disconnect</li> </ul> </li> <li>Establish gNSI connection to the DUT.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = T0</li> <li>Verify that accurate accounting records are returned for the commands/RPCs authentication failures.</li> <li>If start/stop accounting is supported, each authentication failure should have an accompanying session_info.status = LOGIN accounting record.</li> <li>For each RecordResponse correlated to each privilege escalation, check/confirm that:<ul> <li>session_info. :<ul> <li>.{layer4_proto, local_address, local_port, remote_address, remote_port}, ip_proto must match those recorded earlier</li> <li>channel_id = 0 for ssh and grpc.</li> <li>.tty must be populated and correct, if applicable to the platform &amp; access method, else omitted</li> <li>.status must equal ENABLE:<ul> <li>.authen.type must equal the authentication method used.</li> <li>.authen.status must equal FAIL, and cause should be populated.</li> <li>.authen.cause should be populated with reason(s) for the failure.</li> </ul> </li> <li>.user.identity must match the username sent to authenticate to the DUT</li> <li>.user.privilege_level must be populated with the new privilege level</li> </ul> </li> <li>timestamp is after (greater than) RecordRequest.timestamp</li> <li>session_info.service_request.serivce_type must equal the service used.</li> <li>cmd_service. or grpc_service: <ul> <li>.service_type must equal the service used</li> <li>all other fields should be omitted.</li> </ul> </li> <li>for authorization:<ul> <li>all other fields should be omitted.</li> </ul> </li> <li>task_ids might be populate with platform-specific information</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#parameter","title":"Parameter:","text":"<p>RecordRequest.timestamp!=0 Record.service_request = CommandService</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#telemetry-coverage","title":"Telemetry Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#prefix_1","title":"Prefix:","text":"<p>Accounting does not currently support any telemetry; see https://github.com/openconfig/gnsi/issues/97 where it might become /system/aaa/acctz/XXX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#protocolrpc","title":"Protocol/RPC","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/AccountingPrivEscalation/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/","title":"ACCTZ-4.1 - gNSI.acctz.v1 (Accounting) Test Record Respponse Truncation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#summary","title":"Summary","text":"<p>Test Record Response Truncation boolean is set</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#procedure","title":"Procedure","text":"<ul> <li>For an supported service class in gnsi.acctz.v1.CommandService.CmdServiceType:<ul> <li>Run a few commands</li> <li>disconnect</li> </ul> </li> <li>Establish gNSI connection to the DUT.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = (openconfig-system.system-global-state.boot-time - 24 hours)</li> <li>Verify that RecordResponse.history_istruncated = true.  It should be true because there should be no records in the history equal to nor pre-dating this RecordRequest.timestamp.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#parameter","title":"Parameter:","text":"<p>RecordRequest.timestamp!=0 RecordResponse.service_request = CommandService</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#telemetry-coverage","title":"Telemetry Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#prefix_1","title":"Prefix:","text":"<p>Accounting does not currently support any telemetry; see https://github.com/openconfig/gnsi/issues/97 where it might become /system/aaa/acctz/XXX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#protocolrpc","title":"Protocol/RPC","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordResponseTruncation/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/","title":"ACCTZ-1.1 - gNSI.acctz.v1 (Accounting) Test Record Subscribe Full","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#summary","title":"Summary","text":"<p>Test RecordSubscribe for all (since epoch) records</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#procedure","title":"Procedure","text":"<ul> <li>For each of the supported service types in gnsi.acctz.v1.GrpcService.GrpcServiceType:<ul> <li>Alternate connecting to the IPv4 and Ipv6 addresses of the DUT, recording the local and remote IP addresses and port numbers,</li> <li>Call a few RPCs that will generate accounting records and that, by authorization configuration, should be permitted and a few that should be denied, and some that include arbitrary arguments (eg: interface description), pause for 1 second after the first RPC of this test to ensure its timestamp differs from subsequent RPCs.</li> </ul> </li> <li>Establish gNSI connection to the DUT.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = 0; this might return records that preceded the beginning of this test.</li> <li>Verify that RecordResponse.history_istruncated is false.</li> <li> <p>Verify that accurate accounting records are returned for the commands/RPCs that were run, both permitted and denied.</p> <ul> <li>If start/stop accounting is supported, each connection's accounting should be preceded by a start (login) record for the service and the records associated with the RPCs sent during the connection should be followed by a logout record.</li> <li>For each RecordResponse returned, check/confirm that:<ul> <li>session_info. :<ul> <li>.{layer4_proto, local_address, local_port, remote_address, remote_port}, ip_proto must match those recorded earlier</li> <li>.channel_id = 0 for ssh and grpc.</li> <li>.tty must be populated and correct, if applicable to the platform &amp; access method, else omitted</li> <li>.status must equal the operation, else UNSPECIFIED if there isn't a corresponding enumeration.  It must equal ONCE for connections where each RPC/command is authenticated (eg: gRPC metadata authen). If the operation was not LOGIN, ONCE, or ENABLE, authen must be omitted, else it must be populated:<ul> <li>.authen.type must equal the authentication method used.</li> <li>.authen.status must equal the status of the authentication operation.  if FAIL or ERROR, cause should be populated, if SUCCESS, cause might be populated.</li> </ul> </li> <li>.user.identity must match the username used to authenticate to the DUT</li> <li>.user.privilege_level must match the user\u2019s privilege level, if applicable to the platform</li> </ul> </li> <li>timestamp is after (greater than) RecordRequest.timestamp</li> <li>session_info.service_request must be a GrpcService.</li> <li>grpc_service. : <ul> <li>.service_type must equal the service used</li> <li>.rpc_name must equal the path of the RPC call made</li> <li>.payloads must equal the payload of the RPC sent.</li> <li>If any of the payloads is truncated, payload_istruncated must be true, else false.</li> </ul> </li> <li>for authorization:<ul> <li>.status must equal to the expected and actual authorization status for the RPC</li> <li>if .status is PERMIT, .detail  might be populated with additional information</li> <li>if .status is DENY or ERROR, .detail should be populated with the reason</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>task_ids might be populate with platform-specific information</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#parameter","title":"Parameter:","text":"<p>RecordRequest.timestamp=0 RecordResponse.service_request = GrpcService</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#telemetry-coverage","title":"Telemetry Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#prefix_1","title":"Prefix:","text":"<p>Accounting does not currently support any telemetry; see https://github.com/openconfig/gnsi/issues/97 where it might become /system/aaa/acctz/XXX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#protocolrpc","title":"Protocol/RPC","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeFull/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeout/","title":"ACCTZ-5.1 - gNSI.acctz.v1 (Accounting) Test RecordSubscribe Idle Timeout - client becomes silent","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeout/#summary","title":"Summary","text":"<p>Test RecordSubscribe connection termination after idle timeout following 1 RecordSubscribe RPC and 1 idle timeout refresh RPC</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeout/#procedure","title":"Procedure","text":"<ul> <li>Establish gNSI connection</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = now()</li> <li>Discard received records</li> <li>wait until nearly the idletimeout period (default: 120 seconds)</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = now()</li> <li>Discard received records</li> <li>Wait at least longer than the idletimeout period</li> <li>Verify that the DUT closes the gNSI connection at or shortly after the idletimeout period.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeout/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeout/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeout/#parameter","title":"Parameter:","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeout/#telemetry-coverage","title":"Telemetry Coverage","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeout/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeoutDoA/","title":"ACCTZ-6.1 - gNSI.acctz.v1 (Accounting) Test RecordSubscribe Idle Timeout - DoA client","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeoutDoA/#summary","title":"Summary","text":"<p>Test RecordSubscribe connection termination after idle timeout without making RecordSubscribe idle timeout refresh RPCs</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeoutDoA/#procedure","title":"Procedure","text":"<ul> <li>Establish gNSI connection</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = now()</li> <li>Wait at least longer than the idletimeout period (default: 120s)</li> <li>Verify that the DUT closes the gNSI connection at or shortly after the idletimeout period.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeoutDoA/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeoutDoA/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeoutDoA/#parameter","title":"Parameter:","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeoutDoA/#telemetry-coverage","title":"Telemetry Coverage","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeIdleTimeoutDoA/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/","title":"ACCTZ-3.1 - gNSI.acctz.v1 (Accounting) Test Record Subscribe Non-gRPC","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#summary","title":"Summary","text":"<p>Test Accounting for non-gRPC records</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#procedure","title":"Procedure","text":"<ul> <li>Record the time T0 for use later in this test</li> <li>For each of the supported service classes in gnsi.acctz.v1.CommandService.CmdServiceType:<ul> <li>Connect to a non-System-address on the DUT, recording the local and remote IP addresses and port numbers,</li> <li>Run a few commands that should be permitted and a few that should be denied. If command abbreviation is permitted, at least one command and its arguments should be abbreviated.</li> <li>disconnect</li> </ul> </li> <li>Establish gNSI connection to the DUT.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = T0</li> <li>Verify that accurate accounting records are returned for the commands/RPCs that were run, both permitted and denied.</li> <li>If start/stop accounting is supported, each connection's accounting should be preceded by a start (login) record for the service and the records associated with the command/RPCs sent during the connection should be followed by a logout record.</li> <li>For each RecordResponse returned, check/confirm that:<ul> <li>session_info. :<ul> <li>.{layer4_proto, local_address, local_port, remote_address, remote_port}, ip_proto must match those recorded earlier</li> <li>channel_id = 0 for ssh and grpc.</li> <li>.tty must be populated and correct, if applicable to the platform &amp; access method, else omitted</li> <li>.status must equal the operation, else UNSPECIFIED if there is no corresponding enumeration.  It must equal ONCE for connections where each command/RPC is authenticated (eg: HTTP metadata authen).  If the operation was not LOGIN, ONCE, or ENABLE, authen must be omitted, else it must be populated:<ul> <li>.authen.type must equal the authentication method used.</li> <li>.authen.status must equal the status of the authentication operation.  if FAIL or ERROR, cause should be populated, if SUCCESS, cause might be populated.</li> </ul> </li> <li>.user.identity must match the username used to authenticate to the DUT</li> <li>.user.privilege_level must match the user's privilege level, if applicable to the platform</li> </ul> </li> <li>timestamp is after (greater than) RecordRequest.timestamp</li> <li>session_info.service_request must be a CmdService.</li> <li>cmd_service. : <ul> <li>.service_type must equal the service used</li> <li>.cmd must equal the full name of the command sent, expanded by the DUT, if abbreviated</li> <li>.cmd_args must equal the arguments to the command.  Abbreviated arguments that are not user-freeform, must be expanded by the DUT.</li> <li>If any of the .cmd or .cmd_args are truncated, {cmd,cmd_args}_istruncated must be true, else false.</li> </ul> </li> <li>for authorization:<ul> <li>.status must equal the expected and true authorization status for the command/RPC</li> <li>if .status is PERMIT, .detail  might be populated with additional information</li> <li>if .status is DENY or ERROR, .detail should be populated with the reason</li> <li>command_service.status must equal the status of the command/RPC operation, SUCCESS or FAILURE<ul> <li>If SUCCESS, task_ids should be populated with task IDs</li> <li>If FAILURE, failure_cause must be populated with a failure message</li> </ul> </li> </ul> </li> <li>task_ids might be populated with platform-specific information</li> </ul> </li> <li>If applicable to the service type, and session_info.stats != ONCE, ensure records for each connection are bracketed by LOGIN/LOGOUT records.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#parameter","title":"Parameter:","text":"<p>RecordRequest.timestamp!=0 RecordResponse.service_request = CommandService</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#telemetry-coverage","title":"Telemetry Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#prefix_1","title":"Prefix:","text":"<p>Accounting does not currently support any telemetry; see https://github.com/openconfig/gnsi/issues/97 where it might become /system/aaa/acctz/XXX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#protocolrpc","title":"Protocol/RPC","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribeNongrpc/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/","title":"ACCTZ-2.1 - gNSI.acctz.v1 (Accounting) Test Record Subscribe Partial","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#summary","title":"Summary","text":"<p>Test RecordSubscribe for records since a non-zero timestamp</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#procedure","title":"Procedure","text":"<ul> <li>For each of the supported service types in gnsi.acctz.v1.GrpcService.GrpcServiceType:<ul> <li>Alternate connecting to the IPv4 and Ipv6 addresses of the DUT, recording the local and remote IP addresses and port numbers,</li> <li>Call a few RPCs that will generate accounting records and that, by authorization configuration, should be permitted and a few that should be denied, and some that include arbitrary arguments (eg: interface description), pause for 1 second after the first RPC of this test to ensure its timestamp differs from subsequent RPCs.</li> </ul> </li> <li>Establish gNSI connection to the DUT.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = 0, record the timestamp of the first record.</li> <li>Call gnsi.acctz.v1.Acctz.RecordSubscribe with RecordRequest.timestamp = to the timestamp retained in the previous step.</li> <li>Verify, as in the ACCTZ-1.1 - Record Subscribe Full test, that accurate accounting records are returned for the second and subsequent commands run in that test, and that a record is NOT returned for the first command (ie: with the same timestamp as in the request).</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#config-parameter","title":"Config Parameter","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#prefix","title":"Prefix:","text":"<p>/gnsi/acctz/v1/Acctz/RecordSubscribe</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#parameter","title":"Parameter:","text":"<p>RecordRequest.timestamp!=0 RecordResponse.service_request = GrpcService</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#telemetry-coverage","title":"Telemetry Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#prefix_1","title":"Prefix:","text":"<p>Accounting does not currently support any telemetry; see https://github.com/openconfig/gnsi/issues/97 where it might become /system/aaa/acctz/XXX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#protocolrpc","title":"Protocol/RPC","text":"<p>gnsi.acctz.v1</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/acctz/RecordSubscribePartial/#minimum-dut","title":"Minimum DUT","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/","title":"gNSI Authz Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#summary","title":"Summary","text":"<p>Test gNSI API behaviors and gRPC authorization policy behaviors.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#baseline-setup","title":"Baseline Setup","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#input-args","title":"Input Args","text":"<ul> <li><code>test_infra_id</code>: the SPIFFE-ID that is used by test infra clients.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#dut-service-setup","title":"DUT service setup","text":"<p>Configure the DUT to enable the following services (that are using gRPC) are up, and use mTLS for authentication:</p> <ul> <li>gNMI</li> <li>gNOI</li> <li>gNSI</li> <li>gRIBI</li> </ul> <p>NOTE: the support of SPIFFE-ID should NOT require explicitly pre-configured local users in the DUT config (for the purpose of 1:1 mapping of each SPIFFE-ID to a local user).</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#client-certs","title":"Client certs","text":"<p>Prepare the following certs with the specified SPIFFE ID. Cert format details can be found in SPIFFE PR</p> <ul> <li><code>cert_user_admin</code> with <code>spiffe://test-abc.foo.bar/xyz/admin</code></li> <li><code>cert_user_fake</code> with <code>spiffe://test-abc.foo.bar/xyz/fake</code></li> <li><code>cert_gribi_modify</code> with <code>spiffe://test-abc.foo.bar/xyz/gribi-modify</code></li> <li><code>cert_gnmi_set</code> with <code>spiffe://test-abc.foo.bar/xyz/gnmi-set</code></li> <li><code>cert_gnoi_time</code> with <code>spiffe://test-abc.foo.bar/xyz/gnoi-time</code></li> <li><code>cert_gnoi_ping</code> with <code>spiffe://test-abc.foo.bar/xyz/gnoi-ping</code></li> <li><code>cert_gnsi_probe</code> with <code>spiffe://test-abc.foo.bar/xyz/gnsi-probe</code></li> <li><code>cert_read_only</code> with <code>spiffe://test-abc.foo.bar/xyz/read-only</code></li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#grpc-authorization-policies","title":"gRPC authorization policies","text":"<p>NOTE: unless specifically mentioned, the rule <code>allow-test-infra</code> MUST be attached to all the policies, so that the test or the test infra is not blocked from the device.</p> <pre><code>{\n  \"name\": \"allow-test-infra\",\n  \"source\": {\n    \"principals\": [\n      \"&lt;test_infra_id&gt;\"\n    ]\n  },\n  \"request\": {}\n},\n</code></pre> <p>Prepare the following gRPC authorization policies.</p> <pre><code>{\n  \"name\": \"policy-everyone-can-gnmi-not-gribi\",\n  \"allow_rules\": [\n    {\n      \"name\": \"everyone-can-gnmi-get\",\n      \"source\": {},\n      \"request\": {\n        \"paths\": [\n          \"/gnmi.gNMI/Get\"\n        ]\n      }\n    }\n  ],\n  \"deny_rules\": [\n    {\n      \"name\": \"no-one-can-gribi-get\",\n      \"request\": {\n        \"paths\": [\n          \"/gribi.gRIBI/Get\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"name\": \"policy-everyone-can-gribi-not-gnmi\",\n  \"allow_rules\": [\n    {\n      \"name\": \"admin-can-do-everything\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/admin\"\n        ]\n      },\n      \"request\": {}\n    }\n  ],\n  \"deny_rules\": [\n    {\n      \"name\": \"fake-user-can-do-nothing\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/fake\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"name\": \"policy-invalid-no-allow-rules\",\n  \"deny_rules\": [\n    {\n      \"name\": \"no-one-can-gribi\",\n      \"request\": {\n        \"paths\": [\n          \"/gribi.gRIBI/Modify\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"name\": \"policy-gribi-get\",\n  \"allow_rules\": [\n    {\n      \"name\": \"gribi-get\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/read-only\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/gribi.gRIBI/Get\"]\n      }\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"name\": \"policy-gnmi-get\",\n  \"allow_rules\": [\n    {\n      \"name\": \"gnmi-get\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/read-only\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/gnmi.gNMI/Get\"]\n      }\n    }\n  ]\n}\n</code></pre> <p>The following table describes policy <code>policy-normal-1</code>:</p> Cert gRIBI.Modify gRIBI.Get gNMI.Set gNMI.Get gNOI.Time gNOI.Ping gNSI.Rotate gNSI.Get gNSI.Probe cert_user_admin allow allow allow allow allow allow allow allow allow cert_user_fake deny deny deny deny deny deny deny deny deny cert_gribi_modify allow allow deny deny deny deny deny deny deny cert_gnmi_set deny deny allow allow deny deny deny deny deny cert_gnoi_time deny deny deny deny allow deny deny deny deny cert_gnoi_ping deny deny deny deny deny allow deny deny deny cert_gnsi_probe deny deny deny deny deny deny deny deny allow cert_read_only deny allow deny allow deny deny deny allow deny <pre><code>{\n  \"name\": \"policy-normal-1\",\n  \"allow_rules\": [\n    {\n      \"name\": \"gribi-modify\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/admin\",\n          \"spiffe://test-abc.foo.bar/xyz/gribi-modify\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/gribi.gRIBI/*\"]\n      }\n    },\n    {\n      \"name\": \"gnmi-set\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/admin\",\n          \"spiffe://test-abc.foo.bar/xyz/gnmi-set\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/gnmi.gNMI/*\"]\n      }\n    },\n    {\n      \"name\": \"gnoi-time\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/admin\",\n          \"spiffe://test-abc.foo.bar/xyz/gnoi-time\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/gnoi.system.System/Time\"]\n      }\n    },\n    {\n      \"name\": \"gnoi-ping\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/admin\",\n          \"spiffe://test-abc.foo.bar/xyz/gnoi-ping\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/gnoi.system.System/Ping\"]\n      }\n    },\n    {\n      \"name\": \"gnsi-set\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/admin\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/gnsi.authz.v1.Authz/*\"]\n      }\n    },\n    {\n      \"name\": \"gnsi-probe\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/gnsi-probe\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/gnsi.authz.v1.Authz/Probe\"]\n      }\n    },\n    {\n      \"name\": \"read-only\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/read-only\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\n          \"/gnmi.gNMI/Get\",\n          \"/gribi.gRIBI/Get\",\n          \"/gnsi.authz.v1.Authz/Get\"\n        ]\n      }\n    }\n  ],\n  \"deny_rules\": [\n    {\n      \"name\": \"fake-user-can-do-nothing\",\n      \"source\": {\n        \"principals\": [\n          \"spiffe://test-abc.foo.bar/xyz/fake\"\n        ]\n      },\n      \"request\": {\n        \"paths\": [\"/*\"]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#tests","title":"Tests","text":"<p>NOTE: regarding gNMI OC validation:</p> <ul> <li>Everytime a gRPC call (including gNSI calls themselves) is allowed or denied, the following OC leaves should be validated:</li> <li><code>/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc[name]/state/name</code> is the matched request path, e.g. \"/gribi.gRIBI/Get\"</li> <li><code>/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/rpc[name]/state/access-accepts</code> increments if the rpc call is allowed.</li> <li><code>/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/rpc[name]/state/access-rejects</code> increments if the rpc call is denied.</li> <li><code>/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/rpc[name]/state/last-access-accept</code> reflects the timestamp of the method call.</li> <li><code>/system/grpc-servers/grpc-server/authz-policy-counters/rpcs/rpc/rpc[name]/state/last-access-reject</code> reflects the timestamp of the method call.</li> <li>Everytime a valid policy is pushed (even it's not finalized), the following OC leaves should be validated:</li> <li><code>/system/grpc-servers/grpc-server/state/authz-policy-version</code> = <code>UploadRequest.version</code> in the API proto.</li> <li><code>/system/grpc-servers/grpc-server/state/authz-policy-created-on</code> = <code>UploadRequest.created_on</code> (in terms of represented time).</li> <li>Everytime a valid policy is automatically rolled back, the following OC leaves should be validated:</li> <li><code>/system/grpc-servers/grpc-server/state/authz-policy-version</code> = <code>UploadRequest.version</code> of the previous request (the one rollback to).</li> <li><code>/system/grpc-servers/grpc-server/state/authz-policy-created-on</code> = <code>UploadRequest.created_on</code> of the previous request (the one rollback to).</li> <li>An invalid policy should not trigger the following OC leaf updates:</li> <li><code>/system/grpc-servers/grpc-server/state/authz-policy-version</code></li> <li><code>/system/grpc-servers/grpc-server/state/authz-policy-created-on</code></li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#authz-1-test-policy-behaviors-and-probe-results-matches-actual-client-results","title":"Authz-1, test policy behaviors, and probe results matches actual client results","text":"<p>For each of the scenarios in this section, we need to exercise the following 3 actions to get the authorization results:</p> <ul> <li><code>gNSI.Probe</code> after <code>UploadResponse</code> message but before the <code>FinalizeRequest</code> message.</li> <li><code>gNSI.Probe</code> after the <code>RotateAuthzRequest</code> call finished.</li> <li> <p>The actual corresponding service client calls, after the <code>RotateAuthzRequest</code> call finished.</p> </li> <li> <p>Authz-1.1, \"Test empty source\"</p> </li> <li>Use <code>gNSI.Rotate</code> method to push policy <code>policy-everyone-can-gnmi-not-gribi</code>, with <code>create_on</code> = <code>100</code> and <code>version</code> = <code>policy-everyone-can-gnmi-not-gribi_v1</code>.</li> <li> <p>Ensure all results match per the following:</p> <ul> <li><code>cert_user_admin</code> is allowed to issue <code>gNMI.Get</code> method.</li> <li><code>cert_user_admin</code> is denied to issue <code>gRIBI.Get</code> method.</li> </ul> </li> <li> <p>Authz-1.2, \"Test empty request\"</p> </li> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-everyone-can-gribi-not-gnmi</code>, with <code>create_on</code> = <code>100</code> and <code>version</code> = <code>policy-everyone-can-gribi-not-gnmi_v1</code>.</li> <li> <p>Ensure all results match per the following:</p> <ul> <li><code>cert_user_fake</code> is denied to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_user_admin</code> is allowed to issue <code>gRIBI.Get</code> method.</li> </ul> </li> <li> <p>Authz-1.3, \"Test that there can only be one policy\"</p> </li> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-gribi-get</code>, with <code>create_on</code> = <code>100</code> and <code>version</code> = <code>policy-gribi-get_v1</code>.</li> <li>Ensure all results match per the following:<ul> <li><code>cert_read_only</code> is allowed to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is denied to issue <code>gNMI.Get</code> method.</li> </ul> </li> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-gnmi-get</code>.</li> <li> <p>Ensure all results changed to the following:</p> <ul> <li><code>cert_read_only</code> is denied to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is allowed to issue <code>gNMI.Get</code> method.</li> </ul> </li> <li> <p>Authz-1.4, \"Test normal policy\"</p> </li> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-normal-1</code>, with <code>create_on</code> = <code>100</code> and <code>version</code> = <code>policy-normal-1_v1</code>.</li> <li>Ensure all results match per the above table for policy <code>policy-normal-1</code>.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#authz-2-test-rotation-behavior","title":"Authz-2, test rotation behavior","text":"<ul> <li>Authz-2.1, \"Test only one rotation request at a time\"</li> <li>Use <code>gNSI.Rotate</code> method to push policy <code>policy-everyone-can-gnmi-not-gribi</code>, but don't finalize it yet.</li> <li>Initial another <code>gNSI.Rotate</code> method to push policy <code>policy-everyone-can-gribi-not-gnmi</code>, and expect to receive an  <code>UNAVAILABLE</code> gRPC error.</li> <li> <p>Ensure all actual client authorization result stays as per the following:</p> <ul> <li><code>cert_user_admin</code> is allowed to issue <code>gNMI.Get</code> method.</li> <li><code>cert_user_admin</code> is denied to issue <code>gRIBI.Get</code> method.</li> </ul> </li> <li> <p>Authz-2.2, \"Test rollback when connection closed\"</p> </li> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-gribi-get</code>.</li> <li>Ensure <code>gNSI.Probe</code> result matches the following:<ul> <li><code>cert_read_only</code> is allowed to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is denied to issue <code>gNMI.Get</code> method.</li> </ul> </li> <li>Use <code>gNSI.Rotate</code> method to push policy <code>policy-gnmi-get</code>, but don't finalize it yet.</li> <li>Ensure <code>gNSI.Probe</code> result matches the following:<ul> <li><code>cert_read_only</code> is denied to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is allowed to issue <code>gNMI.Get</code> method.</li> </ul> </li> <li>Close the gRPC session.</li> <li> <p>Ensure <code>gNSI.Probe</code> result changed back to the following:</p> <ul> <li><code>cert_read_only</code> is allowed to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is denied to issue <code>gNMI.Get</code> method.</li> </ul> </li> <li> <p>Authz-2.3, \"Test rollback on invalid policy\"</p> </li> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-gribi-get</code>.</li> <li>Ensure <code>gNSI.Probe</code> result matches the following:<ul> <li><code>cert_read_only</code> is allowed to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is denied to issue <code>gNMI.Get</code> method.</li> </ul> </li> <li>Use <code>gNSI.Rotate</code> method to push policy <code>policy-invalid-no-allow-rules</code>, expect an error message and closed gRPC session.</li> <li> <p>Ensure <code>gNSI.Probe</code> result remains as the following:</p> <ul> <li><code>cert_read_only</code> is allowed to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is denied to issue <code>gNMI.Get</code> method.</li> </ul> </li> <li> <p>Authz-2.4, \"Test force_overwrite when the version does not change\"</p> </li> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-gribi-get</code>.</li> <li>Use <code>gNSI.Rotate</code> method to try to push policy <code>policy-gnmi-get</code> with version value not changed. Expect error message and closed gRPC session.</li> <li>Validate that actual client authorization result stays as the following:<ul> <li><code>cert_read_only</code> is allowed to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is denied to issue <code>gNMI.Get</code> method.</li> </ul> </li> <li>Use <code>gNSI.Rotate</code> method to try to push policy <code>policy-gnmi-get</code> with version value, but <code>force_overwrite</code> set to true. Expect no error message, and the push can be finalized.</li> <li>Ensure actual client authorization results are changed to the following:<ul> <li><code>cert_read_only</code> is denied to issue <code>gRIBI.Get</code> method.</li> <li><code>cert_read_only</code> is allowed to issue <code>gNMI.Get</code> method.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#authz-3-test-get-behavior","title":"Authz-3 Test Get behavior","text":"<ol> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-gribi-get</code>.</li> <li>Wait for 30s, intial <code>gNSI.Get</code> and validate the value of <code>version</code>, <code>created_on</code> and gRPC policy content does not change.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/authz/tests/#authz-4-reboot-persistent","title":"Authz-4 reboot persistent","text":"<ol> <li>Use <code>gNSI.Rotate</code> method to push and finalize policy <code>policy-normal-1</code>.</li> <li>Reboot the device.</li> <li>Reconnect to the device, issue <code>gNSI.Get</code> and <code>gNMI.Get</code> and validate the value of <code>version</code>, <code>created_on</code> and gRPC policy content does not change.</li> <li>Ensure actual corresponding clients are authorized per the the above table for policy <code>policy-normal-1</code>.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/baseline/","title":"Security Features to Test","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/baseline/#certificate-related-tests","title":"Certificate Related Tests","text":"<p>TODO: Add tests that will validate the following RPC endpoints for the certz service:   * ADDProfile - Add a new TLS service profile to the DUT.   * DeleteProfile - Delete an aged TLS service profile from the DUT.   * GetProfile - Get the current details of a TLS service profile from the DUT.   * OC Streaming - Validate that appropriate metrics are returned from streaming telemetry.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/","title":"gNSI Client Certificate Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#summary","title":"Summary","text":"<p>Clients must be able to validate a remote server's TLS certificate and present a valid client certificate to that server in order to provide identification information. The client certificate should have a SPIFFE Idenitifier embedded in it to be used as the identifier of the client to the server.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#baseline-setup","title":"Baseline Setup","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#input-args","title":"Input Args","text":"<ul> <li>the set of certificate testdata generated with the mk_cas.sh    script in featureprofiles/feature/security/gnsi/certz/test_data</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#dut-service-setup","title":"DUT service setup","text":"<p>Configure the DUT to enable the following services (that are using gRPC) are up and using mTLS for authentication:</p> <ul> <li>gNMI</li> <li>gNOI</li> <li>gNSI</li> <li>gRIBI</li> <li>P4RT</li> </ul> <p>Be prepared to load the relevant trust_bundle.pem file for each test Certificate Authority(CA) under test on the DUT. Each CA has a RSA and ECDSA form, both must be tested.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#tests","title":"Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#certz-11","title":"Certz-1.1","text":"<p>Perform these positive tests:</p> <p>Test that client certificates from a set of one CA are able to be validated and used for authentication to a device when used by a client connecting to each gRPC service.</p> <p>Perform this for both RSA and ECDSA signed CA bundles and certificates. Perform this for the permutations of 1, 2, 10, 1000 CA trust_bundle configurations: (## indicates the 1, 2, 10, 1000 CA testdata)</p> <p>1) Load the correct key-type trust bundle onto the device and client system:         ca-##/trust_bundle_##rsa.pem         ca-##/trust_bundle##_ecdsa.pem</p> <p>2) Load the correct key-type client certificate into the test gRPC client:         ca-##/client-rsa-key.pem         ca-##/client-rsa-cert.pem         ca-##/client-ecdsa-key.pem         ca-##/client-ecdsa-cert.pem</p> <p>3) Load the correct key-type server certificate into the services on the DUT:         ca-##/server-rsa-key.pem         ca-##/server-rsa-cert.pem         ca-##/server-ecdsa-key.pem         ca-##/server-ecdsa-cert.pem</p> <p>4) Validate that the certificate is loaded and useful for outbound       client connections.</p> <p>5) Connect to the service on the DUT.</p> <p>6) Validate that the connection is established and that the client's       provided certificate is validated by the service on the DUT.</p> <p>7) Validate that the connection's provided certificate is used for       authentication of the connection to the service on the DUT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#certz-12","title":"Certz-1.2","text":"<p>Perform these negative tests:</p> <p>This test should show that the trust-bundle/CA-set being mis-matched between client and server results in failed connections.</p> <p>Perform these tests with both RSA and ECDSA trust_bundles and certificates:</p> <p>1) Load the correct key type trust_bundle from ca-02 on to the DUT:        ca-02/trust_bundle_02_rsa.pem        ca-02/trust_bundle_02_ecsda.pem</p> <p>2) Load the correct key type client certificate from the ca-01 set into       the test gRPC client:         ca-01/client-rsa-key.pem         ca-01/client-rsa-cert.pem         ca-01/client-ecdsa-key.pem         ca-01/client-ecdsa-cert.pem</p> <p>3) Validate that the certificate is loaded and useful for outbound       client connections. Connect to the service on the DUT.</p> <p>4) Validate that the connection to the remote device is established,       validate the client certificate can not be used (is untrusted) by       service on the DUT.</p> <p>5) Validate that the connection is properly torn down by the DUT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#config-parameter-coverage","title":"Config Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/client_certificates/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/","title":"Server Certificate Rotation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#summary","title":"Summary","text":"<p>Certificates on network devices (servers) must be rotated over time for various operational reasons. The ability to perform a rotation is a key component of safe operation practices.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#baseline-setup","title":"Baseline Setup","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#input-args","title":"Input Args","text":"<ul> <li>the set of certificate testdata generated with the mk_cas.sh script    in featureprofiles/feature/security/gnsi/certz/test_data</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#dut-service-setup","title":"DUT Service Setup","text":"<p>Configure the DUT to enable the following services (that are using gRPC) are up and require using mTLS for authentication:</p> <ul> <li>gNMI</li> <li>gNOI</li> <li>gNSI</li> <li>gRIBI</li> <li>P4RT</li> </ul> <p>Be prepared to load the relevant trust_bundle.pem file for each test Certificate Authority(CA) under test on the DUT. Each CA has an RSA and ECDSA form, both must be tested.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#tests","title":"Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#certz-31","title":"Certz-3.1","text":"<p>Perform these positive tests:</p> <p>Test that a server certificate can be rotated by using the gNSI certz Rotate() api if the certificate is requested without the device generated CSR.</p> <p>Perform this test with both the RSA and ECDSA types.</p> <p>0) Build the test data, configure the DUT to use the ca-0001 form       key/certificate/trust_bundle, use the server-${TYPE}-a key/certificate.</p> <p>1) Connect a client to the service on the DUT. The client should maintain       it's connection to the service throughout the rotation process being       undertaken.</p> <p>2) With the server running, connect and note that the certificate loaded       is the appropriate one, that it is the 'a' certificate in the ca-0001       set of certificates, validate the SN/SAN are correct.</p> <p>3) Use the gNSI Rotate RPC to load a server-${TYPE}-b key and certificate       on to the server.</p> <p>4) Test that the certificate is properly loaded, using the Probe RPC.       Note that the new certificate is properly served by the server. Note       that the certificate's SN/SAN has changed to the 'b' certificate.</p> <p>5) Send the Finalize RPC to the server.</p> <p>6) Verify that the server is now serving the certifcate properly, that       the certificate is the 'b' certificate.</p> <p>7) Verify that at no time during the rotation process were existing       connections to the service impaired / restarted / delayed due to       the rotation event.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#certz-32","title":"Certz-3.2","text":"<p>Perform these negative tests:</p> <p>Test that a server certificate can be rotated by using the gNSI certz Rotate() api if the certificate is requested without the device generated CSR, expect a failure because the certificate loaded is not signed by a trusted CA.</p> <p>Perform this test with both the RSA and ECDSA types.</p> <p>0) Build the test data, configure the DUT to use the ca-0001 form       key/certificate/trust_bundle, use the server-${TYPE}-a key/certificate.</p> <p>1) With the server running, connect and note that the ceritficate loaded       is the appropriate one.</p> <p>2) Use the gNSI Rotate RPC to load a ca-02/server-${TYPE}-b key and       certificate on to the server.</p> <p>3) Test that the certificate load fails, because the certificate is not       trusted by a known CA.</p> <p>4) Tear down the Rotate RPC, forcing the device to return to the       previously used certificate/key material.</p> <p>5) Verify that the server is now serving the previous certifcate properly.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#config-parameter-coverage","title":"Config Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificate_rotation/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/","title":"Server Certificate","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#summary","title":"Summary","text":"<p>Servers must be able to validate a remote client's TLS certificate and present a valid TLS certificate to the calling clients.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#baseline-setup","title":"Baseline Setup","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#input-args","title":"Input Args","text":"<ul> <li>the set of certificate testdata generated with the mk_cas.sh   script in featureprofiles/feature/security/gnsi/certz/test_data</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#dut-service-setup","title":"DUT Service setup","text":"<p>Configure the DUT to enable the following services (that are using gRPC) are up and require using mTLS for authentication:</p> <ul> <li>gNMI</li> <li>gNOI</li> <li>gNSI</li> <li>gRIBI</li> <li>P4RT</li> </ul> <p>Be prepared to load the relevant trust_bundle.pem file for each test Certificate Authority(CA) under test on the DUT. Each CA has an RSA and ECDSA form, both must be tested.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#tests","title":"Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#certz-21","title":"Certz-2.1","text":"<p>Perform these positive tests:</p> <p>Test that the server certificates from a set of one CA are able to be validated and used for authentication to a device when used by a client conneting to each gRPC service.</p> <p>Perform this for both RSA and ECDSA signed CA bundles and certificates. Perform this for the permutation of 1, 2, 10, 1000 CA trust_bundle configurations (## indicates the 1, 2, 10, 1000 CA testdata)</p> <p>1) Load the correct key-type trust bundle onto the device and client system:     ca-##/trust_bundle_##rsa.pem     ca-##/trust_bundle##_ecdsa.pem</p> <p>2) Load the correct key-type server certificate into the DUT services:     ca-##/server-rsa-key.pem     ca-##/server-rsa-cert.pem     ca-##/server-ecdsa-key.pem     ca-##/server-ecdsa-cert.pem</p> <p>3) Load the correct key-type client certificate into the gRPC client:     ca-##/client-rsa-key.pem     ca-##/client-rsa-cert.pem     ca-##/client-ecdsa-key.pem     ca-##/client-ecdsa-cert.pem</p> <p>4) Validate that the certificate is loaded and useful for inbound connections      to the server by clients.</p> <p>5) Have the client connect to the services on the DUT.</p> <p>6) Validate that the connection is established and the server's certificate      is trusted by the client.</p> <p>7) Validate that the connection is established and the client's certificate is     validated and trusted by the server.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#certz-22","title":"Certz-2.2","text":"<p>Perform these negative tests, perform these tests with both the RSA and ECDSA trust_bundles and certificates.</p> <p>1) Load the correct key type trust_bundle from ca-02 on to the DUT:        ca-02/trust_bundle_02_rsa.pem        ca-02/trust_bundle_02_ecsda.pem</p> <p>2) Load the correct key type client certificate from the ca-01 set into       the test gRPC client:         ca-01/client-rsa-key.pem         ca-01/client-rsa-cert.pem         ca-01/client-ecdsa-key.pem         ca-01/client-ecdsa-cert.pem</p> <p>3) Validate that the certificate is loaded and useful for outbound       client connections. Connect to the service on the DUT.</p> <p>4) Validate that the connection to the remote device is established,       validate the client certificate can not be used (is untrusted) by       service on the DUT.</p> <p>5) Validate that the connection is properly torn down by the DUT.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#config-parameter-coverage","title":"Config Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/server_certificates/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/test_data/","title":"Certificate Authority Test Data","text":"<p>Creation of test data for use in TLS tests.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/test_data/#content","title":"Content","text":"<ul> <li>mk_cas.sh - create sets of Certificate Authority(CA) content for tests.</li> <li>cleanup.sh - clean out the CA content for recreation efforts.</li> <li>ca-01 - a single CA set where signatures are RSA or ECDSA.</li> <li>ca-02 - a set of two CAs where signatures are RSA or ECDSA.</li> <li>ca-10 - a set of ten CAs where signatures are RSA or ECDSA.</li> <li>ca-1000 - a set of one thousand CAs where signatures are RSA or ECDSA.</li> <li>server_cert.cnf/server_cert_ext.cnf - server openssl profile configuration</li> <li>client_cert.cnf/client_cert_ext.cnf - client openssl profile configuration</li> </ul> <p>Each CA set includes, for both RSA and ECDSA signature types:   * CA key   * CA public certificate   * client key, certificate request, certificate   * server key, certificate request, certificate   * CA trust bundle</p> <p>NOTE: Creation of bad data has not been completed yet.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/","title":"Trust Bundle","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#summary","title":"Summary","text":"<p>Server and client TLS endpoints use x.509 certificates for identification of the calling or called endpoint. Systems could use self-signed certificates and not validate, but this is an insecure practice.</p> <p>Servers and clients should require that the certificates used are validated and are signed by a known Certificate Authority(CA).</p> <p>The known CAs which can be used are contained in a 'trust bundle', which is a list of public keys of the CAs. The list of CA public keys must be kept up to date, as CAs will rotate their key material on a regular cadence.</p> <p>CA keys may be one of two valid (at this time) key algorithms:</p> <ul> <li>RSA</li> <li>ECDSA</li> </ul> <p>(Note: Security of key algorithms is subject to change, the system must be able to support more than one key type at any point in time in order to support key algorithm change events.)</p> <p>A trust bundle may have one or more certificates contained in it, systems should be able to support at least one thousand CA keys in such a bundle.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#baseline-setup","title":"Baseline Setup","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#input-args","title":"Input Args","text":"<ul> <li>the set of certificate testdata generated with the mk_cas.sh     script in the featureprofiles/feature/security/gnsi/certz/test_data     directory.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#dut-service-setup","title":"DUT service setup","text":"<p>Configure the DUT to enable the following sevices (that are using gRPC) are up and require using mTLS for authentication:</p> <ul> <li>gNMI</li> <li>gNOI</li> <li>gNSI</li> <li>gRIBI</li> <li>P4RT</li> </ul> <p>For each trust_bundle created by mk_cas.sh, configure the services to load the correct key-type certificate, key and trust_bundle.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#tests","title":"Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#test-certz-41","title":"Test Certz-4.1","text":"<p>Load the server certificate and key from each of the following CA sets:    * ca-01    * ca-02    * ca-10    * ca-1000</p> <p>Each service must be configured to use the appropriate certificate and validate that certificate using the included trust_bundle.</p> <p>Perform this test with both RSA dn ECDSA key-types.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#config-parameter-coverage","title":"Config Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/","title":"Trust Bundle Rotation","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#summary","title":"Summary","text":"<p>Trust bundles on both clients and servers will be rotated as new CA information is added to the trust_bundles over time.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#baseline-setup","title":"Baseline Setup","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#input-args","title":"Input Args","text":"<ul> <li>the set of certificate testdata generated with the mk_cas.sh script in      featureprofiles/feature/security/gnsi/certz/test_data</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#dut-service-setup","title":"DUT Service Setup","text":"<p>Configure the DUT to enable the following services (that are using gRPC) are up and require using mTLS for authentication:</p> <ul> <li>gNMI</li> <li>gNOI</li> <li>gNSI</li> <li>gRIBI</li> <li>P4RT</li> </ul> <p>Be prepared to load the relevant trust_bundle.pem file for each test Certificate Authority(CA) under test on the DUT. Each CA has an RSA and ECDSA form, both must be tested.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#tests","title":"Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#certz-51","title":"Certz-5.1","text":"<p>Perform these positive tests:</p> <p>Test that a server trust_bundle can be rotated by using the gNSI certz api.</p> <p>Perform this test with both the RSA and ECDSA types.</p> <p>0) Build the test data, configure the DUT to use the ca-0001 form       key/certificate/trust_bundle, use the server-${TYPE}-a key/certificate.</p> <p>1) With the server running, connect and note that the ceritficate loaded       is the appropriate one.</p> <p>2) Concatentate the ca-01/trust_bundle_${TYPE}.pem file and       ca-02/trust_bundle_${TYPE}.pem file together, to create a new trust_bundle       file to be used in the next step.</p> <p>3) Use the gNSI Rotate RPC to load the newly created trust_bundle file       on the server.</p> <p>4) Test that the bundle is properly loaded, using the Probe RPC.       Note that the same certificate is properly served by the server.</p> <p>5) Send the Finalize RPC to the server.</p> <p>6) Verify that the server is still serving the certifcate properly.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#certz-52","title":"Certz-5.2","text":"<p>Perform these negative tests:</p> <p>Test that a server trust_bundle can be rotated by using the gNSI certz api.</p> <p>Perform this test with both the RSA and ECDSA types.</p> <p>0) Build the test data, configure the DUT to use the ca-0001 form       key/certificate/trust_bundle, use the server-${TYPE}-a key/certificate.</p> <p>1) With the server running, connect and note that the ceritficate loaded       is the appropriate one.</p> <p>2) Use the gNSI Rotate RPC to load the ca-02/trust_bundle_${TYPE}.pem       trust_bundle file on the server.</p> <p>3) See that the bundle load fails because the server certificate is no       longer signed by a trusted CA.</p> <p>4) Tear down the Rotate RPC.</p> <p>5) Verify that the server is still serving the certifcate properly.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#config-parameter-coverage","title":"Config Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter Coverage","text":"<p>None</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/certz/trust_bundle_rotation/#minimum-dut-platform-requirement","title":"Minimum DUT Platform Requirement","text":"<p>vRX</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/","title":"gNSI Credentialz Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#summary","title":"Summary","text":"<p>Test gNSI Credentialz API behaviors.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#request-examples","title":"Request Examples","text":"<p>These example gNSI credentialz requests are examples that can be used with cases below.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#configure-a-testuser-and-password","title":"Configure a testuser and password","text":"<pre><code>stream.Send(\n    RotateAccountCredentialsRequest {\n        password: PasswordRequest {\n            accounts: Account {\n                account: \"testuser\",\n                password: Password {\n                    value: {\n                        plaintext: \"i$V5^6IhD*tZ#eg1G@v3xdVZrQwj\",\n                    }\n                },\n                version: \"v1.4\",\n                created_on: 3214451134,\n            }\n        }\n    }\n)\n\nresp := stream.Receive()\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#set-the-trustedusercakeys","title":"Set the TrustedUserCaKeys","text":"<p>Note: You will need to set the contents of the ssh_ca_public_keys message to the contents of your CA public key file.</p> <pre><code>stream.Send(\n    RotateHostParametersRequest {\n        ssh_ca_public_key: CaPublicKeyRequest {\n            ssh_ca_public_keys: \"A....=\",\n            version: \"v1.0\",\n            created_on: 3214451134,\n        }\n    }\n)\n\nresp := stream.Receive()\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#disallow-passwords-for-ssh","title":"Disallow passwords for SSH","text":"<pre><code>stream.Send(\n    RotateHostParametersRequest {\n        authentication_allowed: AllowedAuthenticationRequest {\n            authentication_types: AuthenticationType {\n                AuthenticationType_PUBKEY.Enum(),\n            }\n        }\n    }\n)\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#populate-authorized-principals","title":"Populate Authorized Principals","text":"<pre><code>stream.Send(\n    RotateAccountCredentialsRequest {\n        user: AuthorizedUsersRequest {\n            policies: UserPolicy {\n                account: \"testuser\",\n                authorized_principals: SshAuthorizedPrincipal {\n                    authorized_user: \"principal_name\",\n                },\n                version: \"v1.4\",\n                created_on: 3214451134,\n            }\n        }\n    }\n)\n\nresp := stream.Receive()\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#populate-authorized-principals_1","title":"Populate Authorized Principals","text":"<p>Note: Key contents must be the public key from your generated user keypair.</p> <pre><code>stream.Send(\n    RotateAccountCredentialsRequest {\n        credential: AuthorizedKeysRequest {\n            credentials: AccountCredentials {\n                account: \"testuser\",\n                authorized_keys: AuthorizedKey {\n                    authorized_key: \"A....=\",\n                },\n                version: \"v1.4\",\n                created_on: 3214451134,\n            }\n        }\n    }\n)\n\nresp := stream.Receive()\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#set-the-host-certificate","title":"Set the Host Certificate","text":"<p>Note: You will need to set the contents of the host certificate generated from your test setup.</p> <pre><code>stream.Send(\n    RotateHostParametersRequest {\n        server_keys: ServerKeysRequest {\n            auth_artifacts: []AuthenticationArtifacts{\n                certificate: []bytes(\"....\"),\n            },\n            version: \"v1.0\",\n            created_on: 3214451134,\n        }\n    }\n)\n\nresp := stream.Receive()\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#tests","title":"Tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#credentialz-1-password-console-login","title":"Credentialz-1, Password console login","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#setup","title":"Setup","text":"<ul> <li>Set a username of \"testuser\" using gnsi.Credentialz</li> <li>Set a password of \"i$V5^6IhD*tZ#eg1G@v3xdVZrQwj\" (see RotateAccountCredentials, PasswordRequest, plaintext)</li> <li>Connect to the console</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#pass-case","title":"Pass case","text":"<ul> <li>Provide correct username/password on console.</li> <li>Authentication must result in success with a prompt.</li> <li>There must be accounting for the login which includes the <code>testuser</code>     username.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#fail-case-1","title":"Fail case 1","text":"<ul> <li>Provide incorrect username and correct password.</li> <li>Authentication must fail.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#fail-case-2","title":"Fail case 2","text":"<ul> <li>Provide incorrect password, but correct username.</li> <li>Authentication must fail.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#credentialz-2-ssh-pasword-login-disallowed","title":"Credentialz-2, SSH pasword login disallowed","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#setup_1","title":"Setup","text":"<ul> <li>Set a username of <code>testuser</code></li> <li>Set a password of <code>i$V5^6IhD*tZ#eg1G@v3xdVZrQwj</code> (see   RotateAccountCredentials, PasswordRequest, plaintext)</li> <li>Ensure that AAA (TACACS+/Radius) authentication is not configured.</li> <li>Create a ssh CA keypair with <code>ssh-keygen -f /tmp/ca</code>.</li> <li>Create a user keypair with <code>ssh-keygen -t ed25519</code></li> <li>Sign the user public key into a certificate using the CA using <code>ssh-keygen -s   /tmp/ca -I testuser -n principal_name -V +52w ~/.ssh/id_ed25519.pub</code>. You will   find your certificate in <code>~/.ssh</code> ending in <code>-cert.pub</code>.</li> <li>Set the device TrustedUserCAKeys (see RotateHostParameters   ssh_ca_public_key) with the CA public key, found in <code>/tmp/ca.pub</code>.</li> <li>Set authentication types to only permit PUBKEY (see   AllowedAuthenticationRequest).</li> <li>Set authorized_users for <code>testuser</code> with a principal of <code>principal_name</code>.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#pass-case_1","title":"Pass case","text":"<ul> <li>Attempt an ssh authentication using the username (ssh testuser@DUT) and password.</li> <li>Authentication must fail.</li> <li>Attempt password authentication on the console.</li> <li>Authentication must result in success with a prompt.</li> <li>Attempt certificate authentication over ssh, <code>ssh testuser@DUT</code>.</li> <li>Use the ssh user certificate with a signature verifiable by a     TrustedUserCAKey public key created above.</li> <li>Authentication must succeed.</li> <li>Accounting, using gnsi Accounting must set the identity string (see     acct.proto AuthDetail message) to equal the principal (principal_name)     from the certificate rather than the system role (testuser).</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#credentialz-3-host-certificate","title":"Credentialz-3, Host Certificate","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#setup_2","title":"Setup","text":"<ul> <li>Create a ssh CA keypair with <code>ssh-keygen -f /tmp/ca</code>.</li> <li>Fetch the ssh server's host public key.</li> <li>Sign the public key from the previous step into a host certificate using the   CA key <code>ssh-keygen -s /tmp/ca -I dut -h -n dut.test.com -V +52w   /location/of/host/public_key.pub</code></li> <li>Add the certificate to the server (see RotateHostParameters,   AuthenticationArtifacts, certificate)</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#pass-case_2","title":"Pass case","text":"<ul> <li>ssh to the server.</li> <li>You must receive the host certificate signed by your CA.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#credentialz-4-ssh-public-key-authentication","title":"Credentialz-4, SSH Public Key Authentication","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#setup_3","title":"Setup","text":"<ul> <li>Create a user ssh CA keypair with <code>ssh-keygen</code>. No arguments are required and   the keys will be put in <code>~/.ssh/</code>.</li> <li>Create a username on the ssh server and add the public key (see   RotateAccountCredentials AuthorizedKeysRequest).</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#pass-case_3","title":"Pass case","text":"<ul> <li>Attempt to ssh into the server with the username, presenting the ssh key.</li> <li>Authentication must succeed.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#fail-case","title":"Fail case","text":"<ul> <li>Remove the user ssh key (by sending an AuthorizedKeysRequest with no   authorized_keys message.</li> <li>Attempt to ssh into the server with the username.</li> <li>Public key authentication should fail.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#credentialz-5-hiba-authentication","title":"Credentialz-5, HIBA Authentication","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#setup_4","title":"Setup","text":"<ul> <li>Set a username of \"testuser\"</li> <li>Follow the instructions for setting up a HIBA   CA</li> <li>Sign the user public key into a certificate using the CA with a \"shell\" grant.</li> <li>Set up the device with a TrustedUserCAKey (see RotateHostParameters   ssh_ca_public_key) with the CA public key.</li> <li>Set authentication types to only permit PUBKEY (see   AllowedAuthenticationRequest).</li> <li>Set the AuthorizedPrincipalsCommand by setting the tool to <code>TOOL_HIBA_DEFAULT</code>   (see RotateHostParameters, AuthorizedPrincipalCheckRequest)</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#pass-case_4","title":"Pass case","text":"<ul> <li>Log into the server as \"testuser\" using the client certificate.</li> <li>Authentication must succeed.</li> <li>Accounting, using gnsi Accounting must set the identity string (see     acct.proto AuthDetail message) to equal the principal (principal_name)     from the certificate rather than the system role (testuser).</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/security/gnsi/credentialz/tests/#fail-case_1","title":"Fail case","text":"<ul> <li>Remove the certificate with the HIBA grant (or wait for expiration)</li> <li>Create an ssh certificate with no grants.</li> <li>Log into the server as \"testuser\" with this certificate</li> <li>Authentication must fail</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/sflow/otg_tests/sflow_base_test/","title":"SFLOW-1: sFlow Configuration and Sampling","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/sflow/otg_tests/sflow_base_test/#summary","title":"Summary","text":"<p>Verify configuration of sflow and sFlow sample data.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/sflow/otg_tests/sflow_base_test/#procedure","title":"Procedure","text":"<ul> <li>SFLOW-1.1 Configure sFlow on DUT</li> <li>Configure DUT and ATE with 2 ports</li> <li>Configure DUT to send sflow samples to ATE port 2</li> <li> <p>Set sample source address, sample size 256Bytes, one sample per 1M packets and DSCP=32</p> </li> <li> <p>SFLOW-1.2 Send traffic via OTG and verify sFlow packet on OTG</p> </li> <li> <p>Configure ATE to generate ipv4 and ipv6 traffic and capture sFlow packets</p> <ul> <li>Traffic Profile     | Traffic Item | PPS    | Packet Size | L3  | L4  |     | ------------ | ------ | ----------- | --- | --- |     | sflow3       | 100000 | 64          | IP  | TCP |     | mflow3       | 100000 | 512         | IP  | TCP |     | lflow3       | 100000 | 1500        | IP  | TCP |</li> </ul> </li> <li> <p>Verify captured packets are formatted like an sFlow packet</p> </li> <li>Verify sample size is 256B</li> <li>Verify 1 sample sent to collector address per 1M packets generated by ATE</li> <li> <p>Verify sample packet is set with DSCP=32</p> </li> <li> <p>SFLOW-1.3 TODO #2346: Additional sflow packet verifications</p> </li> <li>Using the same packets captured in SFLOW-1.2 verify<ul> <li>Sampled interface field shows DUT Port 1</li> <li>Ingress and Egress interfaces are correct</li> <li>\"Extended-router\" container exists and contains are accurate for plain IP and IP-in-IP flows</li> <li>Next hop</li> <li>Next hop source mask</li> <li>Next hop destination mask</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/sflow/otg_tests/sflow_base_test/#config-parameter-coverage","title":"Config Parameter coverage","text":"<p>/sampling/sflow/config/agent-id-ipv4 /sampling/sflow/config/agent-id-ipv6 /sampling/sflow/config/dscp /sampling/sflow/config/egress-sampling-rate /sampling/sflow/config/enabled /sampling/sflow/config/ingress-sampling-rate /sampling/sflow/config/polling-interval /sampling/sflow/config/sample-size /sampling/sflow/config/source-address /sampling/sflow/interfaces/interface/config/name /sampling/sflow/interfaces/interface/config/enabled /sampling/sflow/interfaces/interface/config/egress-sampling-rate /sampling/sflow/interfaces/interface/config/ingress-sampling-rate /sampling/sflow/interfaces/interface/config/polling-interval</p> <p>/sampling/sflow/collectors/collector/address /sampling/sflow/collectors/collector/config/address /sampling/sflow/collectors/collector/config/network-instance /sampling/sflow/collectors/collector/config/port /sampling/sflow/collectors/collector/config/source-address /sampling/sflow/collectors/collector/port</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/sflow/otg_tests/sflow_base_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<p>/sampling/sflow/state/agent-id-ipv4 /sampling/sflow/state/agent-id-ipv6 /sampling/sflow/state/dscp /sampling/sflow/state/egress-sampling-rate /sampling/sflow/state/enabled /sampling/sflow/state/ingress-sampling-rate /sampling/sflow/state/polling-interval /sampling/sflow/state/sample-size /sampling/sflow/state/source-address /sampling/sflow/interfaces/interface/state/name /sampling/sflow/interfaces/interface/state/enabled /sampling/sflow/interfaces/interface/state/egress-sampling-rate /sampling/sflow/interfaces/interface/state/ingress-sampling-rate /sampling/sflow/interfaces/interface/state/polling-interval</p> <p>/sampling/sflow/collectors/collector/address /sampling/sflow/collectors/collector/state/address /sampling/sflow/collectors/collector/state/network-instance /sampling/sflow/collectors/collector/state/port /sampling/sflow/collectors/collector/state/source-address /sampling/sflow/collectors/collector/port</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/sflow/otg_tests/sflow_base_test/#protocolrpc-parameter-coverage","title":"Protocol/RPC Parameter coverage","text":"<p>N/A</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/sflow/otg_tests/sflow_base_test/#minimum-dut-platform-requirement","title":"Minimum DUT platform requirement","text":"<p>FFF</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/staticroute/tests/","title":"RT-1.25: Management network-instance default static route","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/staticroute/tests/#summary","title":"Summary","text":"<p>Validate static route functionality in Management network-instance (VRF).</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/staticroute/tests/#procedure","title":"Procedure","text":"<ul> <li>Configure DUT with Management VRF and ATE1, ATE2 interfaces configured within this VRF</li> <li>Configure IPv4 and IPv6 default routes within Management VRF pointing to ATE2 interface</li> <li>Generate IPv4 and IPv6 traffic from ATE1 to any destination.</li> <li>Verify that traffic is received at ATE2 interface</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/staticroute/tests/#config-parameter-coverage","title":"Config Parameter coverage","text":"<ul> <li>/network-instances/network-instance/config/name</li> <li>/network-instances/network-instance/config/description</li> <li> <p>/network-instances/network-instance/config/type</p> </li> <li> <p>/network-instances/network-instance/interfaces/interface/config/id</p> </li> <li> <p>/network-instances/network-instance/protocols/protocol/static-routes/static</p> </li> <li>/network-instances/network-instance/protocols/protocol/static-routes/static/prefix</li> <li>/network-instances/network-instance/protocols/protocol/static-routes/static/config</li> <li>/network-instances/network-instance/protocols/protocol/static-routes/static/config/prefix</li> <li>/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop</li> <li>/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/index</li> <li>/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/staticroute/tests/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":"<pre><code>*   /network-instances/network-instance/protocols/protocol/static-routes/static/state\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/attestz/tests/","title":"attestz: General enrollz and attestz tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/attestz/tests/#summary","title":"Summary","text":"<p>In TPM enrollment workflow the switch owner verifies device's Initial Attestation Key (IAK) and Initial DevID (IDevID) certificates (signed by the switch vendor CA) and installs/rotates owner IAK (oIAK) and owner IDevID (oIDevID) certificates (signed by switch owner CA). In TPM attestation workflow switch owner verifies that the device's end-to-end boot state (bootloader, OS, secure boot policy, etc.) matches owner's expectations.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/attestz/tests/#procedure","title":"Procedure","text":"<p>Test should verify all success and failure/corner-case scenarios for TPM enrollment and attestation workflows that are specified in attestz Readme.</p> <p>TPM enrollment workflow consists of two APIs defined in openconfig/attestz/blob/main/proto/tpm_enrollz.proto: <code>GetIakCert</code> and <code>RotateOIakCert</code>. TPM attestation workflow consists of a single API defined in openconfig/attestz/blob/main/proto/tpm_attestz.proto: <code>Attest</code>. The tests should comprehensively cover the behavior for all three APIs when used both separately and sequentially. Finally, the tests should cover both initial install/bootstrapping, oIAK/oIDevID rotation and post-install re-attestation workflows.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/attestz/tests/#test-setup","title":"Test Setup","text":"<ol> <li>Switch vendor provisioned the device with IAK and IDevID certs following TCG spec Section 5.2 and Section 6.2.</li> <li>The device successfully completed the bootz workflow where it obtained and applied all configurations/credentials/certificates and booted into the right OS image.</li> <li>Device is serving <code>enrollz</code> and <code>attestz</code> gRPC endpoints.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/attestz/tests/#attestz-1-validate-attestz-for-initial-install","title":"attestz-1: Validate attestz for initial install","text":"<p>The test validates that the device completes TPM enrollment and attestation during initial device bootstrapping/install.</p> ID Case Result attestz-1.1 Successful enrollment and attestation Device obtained oIAK and oIDevID certs and passed attestation for all control cards attestz-1.2 IAK/IDevID are not present on the device <code>GetIakCert</code> fails with missing IAK/IDevID error attestz-1.3 Bad request for <code>GetIakCertRequest</code>, <code>RotateOIakCertRequest</code> and \u00a0<code>AttestRequest</code>. Examples: <code>ControlCardSelection control_card_selection</code> is not specified or <code>control_card_id.role = 0</code>. Invalid <code>control_card_id.serial</code> or <code>control_card_id.slot</code> <code>GetIakCert</code>, <code>RotateOIakCert</code> and <code>Attest</code> fail with detailed invalid request error attestz-1.4 Store oIAK/oIDevId certs that have different underlying IAK/IDevID pub keys or intended for other control card <code>RotateOIakCert</code> fails with detailed invalid request error attestz-1.5 <code>enrollz</code> workflow followed by a device reboot still results in a successful <code>attestz</code> workflow Device obtained oIAK and oIDevID certs and passed attestation for all control cards attestz-1.6 Full factory reset of the device after a successful <code>enrollz</code> workflow deletes oIAK and oIDevID certs, but does not affect IAK and IDevID certs After factory reset the device fails to perform <code>attestz</code> workflow due to missing oIAK and oIDevID certs attestz-1.7 Out of bound or repeated <code>pcr_indices</code> in <code>AttestRequest</code> <code>Attest</code> fails with detailed invalid request error attestz-1.8 RMA scenarios where an active control card ensures that a newly inserted standby control card completes TPM enrollment and attestation before obtaining its own set of owner-issued production credentials/certificates (no sharing of owner-issued production security artifacts is allowed between control cards) <code>attestz</code> on a newly inserted control card fails before the card successfully completes TPM enrollment workflow; all RPCs relying on owner-issued credentials/certs fail on a newly inserted control card before the card successfully completes TPM enrollment and attestation workflows attestz-1.9 Regardless of which control card was active during <code>enrollz</code>, both control cards should be able to successfully complete <code>attestz</code> workflow as active control cards Device obtained oIAK and oIDevID certs and passed attestation for all control cards <ol> <li>Call <code>GetIakCert</code> for an active control card with correct <code>ControlCardSelection</code>.</li> <li>Verify that correct IDevID cert was used for establishing TLS session:</li> <li>Cert structure matches TCG specification Section 8.</li> <li>Cert is not expired. \u00a0  * Cert is signed by switch vendor CA. \u00a0  * Cert is tied to the active control card.</li> <li>Verify IAK cert:</li> <li>Cert structure matches TCG spec (similar to IDevID above). \u00a0  * Cert is not expired. \u00a0  * Cert is signed by switch vendor CA. \u00a0  * Cert is tied to the active control card. \u00a0  * IAK and IDevID cert contain the same device serial number field.</li> <li>Verify that the device returned the correct <code>ControlCardVendorId</code> with all fields populated.</li> <li>Issue owner IAK (oIAK) and owner IDevID (oIDevID) certs, which are based on the same underlying public keys, have the same structure and fields, but are signed by a different - owner - CA.</li> <li>Call <code>RotateOIakCert</code> to store newly issued oIAK and oIDevID certs and verify successful response.</li> <li>Call <code>GetIakCert</code> for a standby control card with correct <code>ControlCardSelection</code>.</li> <li>Repeat step (2) (TLS session will be secured by active control card's IDevID) and verify IDevID cert of standby control card was specified in the response payload.</li> <li>Repeat steps (3-6) for the standby control card.</li> <li>Call <code>Attest</code> for active control card with correct <code>ControlCardSelection</code>, random nonce, hash algo of choice (all should be supported and tested) and all PCR indices.</li> <li>Verify that the correct oIDevID cert was used for establishing TLS session.</li> <li>Verify that the device returned the correct <code>ControlCardVendorId</code> with all fields populated.</li> <li>Verify oIAK cert is the same as the one installed earlier.</li> <li>Verify all <code>pcr_values</code> match expectations.</li> <li>Verify <code>quote_signature</code> signature with oIAK cert.</li> <li>Use <code>pcr_values</code> and <code>tpms_quote_info</code> to recompute PCR Quote digest and verify that it matches the one used in <code>quote_signature</code>.</li> <li>Call <code>Attest</code> for standby control card with correct <code>ControlCardSelection</code>, random nonce, hash algo of choice (all should be supported and tested) and all PCR indices.</li> <li>Verify that the oIDevID cert of active control card was used for establishing TLS session and verify that oIDevID cert of standby control card was specified in the response payload.</li> <li>Repeat steps (12-16) for the standby control card.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/attestz/tests/#attestz-2-validate-oiak-and-oidevid-rotation","title":"attestz-2: Validate oIAK and oIDevID rotation","text":"<p>The test validates that the device can rotate oIAK and oIAK certificates post-install.</p> ID Case Result attestz-2.1 Successful oIAK and oIDevID cert rotation when no owner-issued mTLS cert is available on the device Device obtained newly-rotated oIAK and oIDevID certs and passed attestation for all control cards relying on the new oIAK and oIDevID certs attestz-2.2 Successful oIAK and oIDevID cert rotation when owner-issued mTLS cert is available on the device Device obtained newly-rotated oIAK and oIDevID certs and passed attestation for all control cards relying on the new oIAK and previously owner-issued mTLS cert <ol> <li>Execute \"Initial Install\" workflow.</li> <li>Issue new oIAK and oIDevID certs for active control card, call <code>RotateOIakCert</code> to store those on the right card and verify successful response.</li> <li>Issue new oIAK and oIDevID certs for standby control card, call <code>RotateOIakCert</code> to store those on the right card and verify successful response.</li> <li>Call <code>Attest</code> for active and standby control cards and ensure they use the latest oIAK for attestation and, if there is no owner-provisioned TLS cert installed, use latest oIDevID for TLS session.</li> <li>Do the same verification of attestation responses as in \"Initial Install\" workflow.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/attestz/tests/#attestz-3-validate-post-install-re-attestation","title":"attestz-3: Validate post-install re-attestation","text":"<p>The test validates that the device completes TPM attestation after initial bootstrapping when the device is already handling production traffic and has already been provisioned with oIAK cert and owner-issued mTLS credentials/certs to communicate with owner infrastructure.</p> ID Case Result attestz-3.1 Successful post-install re-attestation relying an owner-issued mTLS cert Device passed attestation for all control cards relying on the latest oIAK and mTLS certs attestz-3.2 Two re-attestations separated by a device reboot result in the same PCR values, but different PCR Quote (due a different random nonce in <code>AttestRequest</code>) Device passed multiple re-attestations separated by a reboot for all control cards relying on the latest oIAK and mTLS certs attestz-3.2 When an active control card becomes unavailable, standby control card becomes active and can successfully complete re-attestation Standby control card passed re-attestation after an active control card failure, relying on the latest oIAK and mTLS certs <ol> <li>Execute \"Initial Install\" workflow.</li> <li>Provision the device with switch owner mTLS credentials (separate key pair and cert for each control card).</li> <li>Call <code>Attest</code> for active and standby control cards and ensure they use the new mTLS cert for TLS connection and the latest oIAK for attestation.</li> <li>Do the same verification of attestation responses as in \"Initial Install\" workflow.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/","title":"bootz: General bootz bootstrap tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/#summary","title":"Summary","text":"<p>Ensures the device can booted via bootz with various initial configurations</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/#procedure","title":"Procedure","text":"<p>Each test should send the different configuration options required in a bootz request. The device should always start with a empty configuration and start the bootstrap process.</p> <p>The results should validate the expected state of the device for each configuration option set. For negative tests the device should exit with clear message and immediately go back into the bootz mode. At the end of the negative test cycle the test must provide a valid initial configuration to allow the device to be restored into a valid state.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/#test-setup","title":"Test Setup","text":"<ol> <li>Start bootserver test instance</li> <li>Store bootserver IP:port to be used by DHCP server</li> <li>Get the DUT MAC address for mgmt ports</li> <li>Configure DHCP service with those mgmt ports to return a DHCP offer with the URI <code>bootz://&lt;ip&gt;:&lt;port&gt;</code><ul> <li>OPTION_V4_SZTP_REDIRECT(136)</li> <li>OPTION_V6_SZTP_REDIRECT(143)</li> </ul> </li> <li>Store the required device image on the bootserver</li> <li>Store the base valid device configuration on the bootserver</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/#bootz-1-validate-minimum-necessary-bootz-configuration","title":"bootz-1: Validate minimum necessary bootz configuration","text":"<p>This test validates that the device can start in bootz mode and upon getting a bootz response from bootserver can initialize the devices configuration into the provided configuration.</p> ID Case Result bootz-1.1 Missing configuration Device fails with status invalid parameter bootz-1.2 Invalid configuration Device fails with status invalid parameter bootz-1.3 Valid configuration Device succeded with status ok <ol> <li>Provide bootstrap reponse configured as prescribed.</li> <li>Initiate bootz boot on device via gnoi.FactoryReset()</li> <li>Validate device sends bootz request to bootserver</li> <li> <p>Validate device telemetry</p> <ul> <li><code>/system/bootz/state/last-boot-attempt</code> is in expected state</li> <li><code>/system/bootz/state/error-count</code> is in incremented if failure case</li> <li><code>/system/bootz/state/status</code> is in expected state</li> <li><code>/system/bootz/state/checksum</code> matches sent proto</li> </ul> </li> <li> <p>Validate device state</p> <ul> <li>OS version is the same</li> <li>System configuration is as expected.</li> </ul> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/#bootz-2-validate-software-image-in-bootz-configuration","title":"bootz-2: Validate Software image in bootz configuration","text":"<p>This test validates the bootz behavior based changes to software version.</p> ID Case Result bootz-2.1 Software version is different Device is upgraded to the new version bootz-2.2 Invalid software image Device fails with status invalid parameter <ol> <li>Validate the device is on a different version from the expected new version.</li> <li>Provide bootstrap reponse configured as prescribed.</li> <li>Initiate bootz boot on device via gnoi.FactoryReset()</li> <li>Validate device sends bootz request to bootserver</li> <li>Validate the progress periodically by polling <code>/system/bootz/state/status</code><ul> <li>The status should transition from:<ul> <li>BOOTZ_UNSPECIFIED</li> <li>BOOTZ_SENT</li> <li>BOOTZ_RECEIVED</li> <li>BOOTZ_OS_UPGRADE_IN_PROGRESS</li> <li>BOOTZ_OS_UPGRADE_COMPLETE</li> <li>BOOTZ_CONFIGURATION_APPLIED</li> <li>BOOTZ_OK</li> </ul> </li> <li>For error case device should report<ul> <li>BOOTZ_UNSPECIFIED</li> <li>BOOTZ_SENT</li> <li>BOOTZ_RECEIVED</li> <li>BOOTZ_OS_UPGRADE_IN_PROGRESS</li> <li>BOOTZ_OS_INVALID_IMAGE</li> </ul> </li> </ul> </li> <li>Validate device telemetry<ul> <li><code>/system/bootz/state/last-boot-attempt</code> is in expected state</li> <li><code>/system/bootz/state/error-count</code> is in incremented if failure case</li> <li><code>/system/bootz/state/status</code> is in expected state</li> <li><code>/system/bootz/state/checksum</code> matches sent proto</li> </ul> </li> <li>Validate device state<ul> <li>OS version is the same</li> <li>System configuration is as expected.</li> </ul> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/#bootz-3-validate-ownership-voucher-in-bootz-configuration","title":"bootz-3: Validate Ownership Voucher in bootz configuration","text":"<p>The purpose of this test is to validate that the ownership voucher can be sent to the device and properly handled.</p> ID Case Result bootz-3.1 No ownership voucher Device boots without OV present bootz-3.2 Invalid OV Device fails with status invalid parameter bootz-3.3 OV fails Device fails with status invalid parameter bootz-3.4 OV valid Device boots with OV installed <ol> <li>Provide bootstrap reponse configured as prescribed.</li> <li>Initiate bootz boot on device via gnoi.FactoryReset()</li> <li>Validate device sends bootz request to bootserver</li> <li>Validate the progress periodically by polling <code>/system/bootz/state/status</code><ul> <li>The status should transition from:<ul> <li>BOOTZ_UNSPECIFIED</li> <li>BOOTZ_SENT</li> <li>BOOTZ_RECEIVED</li> <li>BOOTZ_CONFIGURATION_APPLIED</li> <li>BOOTZ_OK</li> </ul> </li> <li>For error case device should report<ul> <li>BOOTZ_UNSPECIFIED</li> <li>BOOTZ_SENT</li> <li>BOOTZ_RECEIVED</li> <li>BOOTZ_OV_INVALID</li> </ul> </li> </ul> </li> <li>Validate device telemetry<ul> <li><code>/system/bootz/state/last-boot-attempt</code> is in expected state</li> <li><code>/system/bootz/state/error-count</code> is in incremented if failure case</li> <li><code>/system/bootz/state/status</code> is in expected state</li> <li><code>/system/bootz/state/checksum</code> matches sent proto</li> </ul> </li> <li>Validate device state<ul> <li>System configuration is as expected.</li> </ul> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/#bootz-4-validate-device-properly-resets-if-provided-invalid-image","title":"bootz-4: Validate device properly resets if provided invalid image","text":"<p>The purpose of this test is to validate that when providing an invalid or non bootable image the device properly handles this and resets itself into bootz mode.</p> ID Case Result bootz-4.1 no OS provided Device boots with existing image bootz-4.2 Invalid OS image provided Device fails with status invalid parameter bootz-4.3 failed to fetch image from remote URL Device fails with status invalid parameter bootz-4.4 OS checksum doesn't match Device fails with invalid parameter <ol> <li>Provide bootstrap reponse configured as prescribed.</li> <li>Initiate bootz boot on device via gnoi.FactoryReset()</li> <li>Validate device sends bootz request to bootserver</li> <li>Validate the progress periodically by polling <code>/system/bootz/state/status</code><ul> <li>The status should transition from:<ul> <li>BOOTZ_UNSPECIFIED</li> <li>BOOTZ_SENT</li> <li>BOOTZ_RECEIVED</li> <li>BOOTZ_CONFIGURATION_APPLIED</li> <li>BOOTZ_OK</li> </ul> </li> <li>For error case device should report<ul> <li>BOOTZ_UNSPECIFIED</li> <li>BOOTZ_SENT</li> <li>BOOTZ_RECEIVED</li> <li>BOOTZ_OS_INVALID_IMAGE</li> </ul> </li> </ul> </li> <li>Validate device telemetry<ul> <li><code>/system/bootz/state/last-boot-attempt</code> is in expected state</li> <li><code>/system/bootz/state/error-count</code> is in incremented if failure case</li> <li><code>/system/bootz/state/status</code> is in expected state</li> <li><code>/system/bootz/state/checksum</code> matches sent proto</li> </ul> </li> <li>Validate device state<ul> <li>System configuration is as expected.</li> </ul> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/bootz/tests/#bootz-5-validate-gnsi-components-in-bootz-configuration","title":"bootz-5: Validate gNSI components in bootz configuration","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/cli_origin_test/","title":"gNMI-1.1: cli Origin","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/cli_origin_test/#summary","title":"Summary","text":"<p>Ensure that emergency CLI configuration can be pushed to device.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/cli_origin_test/#procedure","title":"Procedure","text":"<p>Note: this test is intended to cover only the case of pushing some configuration - since it is unknown what CLI configuration would be required in the emergency case that is covered by this requirement.</p> <ul> <li>Connect ATE port-1 to DUT port-1.</li> <li>TODO: Push base configuration to DUT specifying an interface configuration     for DUT port-1.</li> <li> <p>Push configuration using SetRequest specifying:</p> <ul> <li> <p><code>origin: \"\"</code> (openconfig, default origin) - containing modelled     configuration.</p> </li> <li> <p><code>origin: \"cli\"</code> - containing:</p> <pre><code>interface &lt;DUT port-1&gt;\nshutdown\n</code></pre> </li> </ul> </li> <li> <p>Validate that DUT port-1 is shown as shutdown through telemetry.</p> </li> <li> <p>Validate that ATE port-1 reports that DUT port-1 is down.</p> </li> <li> <p>Run CLI command with GetRequest specifying <code>origin: \"cli\"</code>:</p> <ul> <li><code>show version</code> and <code>show lldp neighbors</code></li> <li>Validate CLI response is generated by DUT.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/cli_origin_test/#config-parameter-coverage","title":"Config Parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/cli_origin_test/#telemetry-parameter-coverage","title":"Telemetry Parameter coverage","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/mixed_oc_cli_origin_support_test/","title":"gNMI-1.12: Mixed OpenConfig/CLI Origin","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/mixed_oc_cli_origin_support_test/#summary","title":"Summary","text":"<p>Ensure that both CLI and OC configuration can be pushed to the device within the same <code>SetRequest</code>, with OC config as a <code>replace</code> operation and the CLI as an <code>update</code> operation. Note that this implies stale CLI config may remain after the <code>SetRequest</code> operation.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/mixed_oc_cli_origin_support_test/#procedure","title":"Procedure","text":"<ol> <li>Delete the <code>TEST</code> queue in OpenConfig in case it is still there, and check     that it is no longer present.</li> <li>Retrieve currently-running OpenConfig and CLI configs.</li> <li>Validate that device can accept root replace of current OC config without     any changes (currently skipped).</li> <li>Construct and send mixed-origin SetRequest.<ol> <li>CLI configuration consists of the below example, where a name is given     to a traffic class and a queue.</li> <li>Modify currently-running OpenConfig to create the queue and traffic     classes as per named via CLI, and map the queue to the traffic class.</li> </ol> </li> <li>Verify QoS queue and traffic class configuration has been accepted by the     target.</li> <li>Repeat above steps, but replacing on the <code>/qos</code> path instead of at root     level (root-level test currently skipped).</li> </ol> <p>The configuration used in this test is a QoS configuration wherein the OpenConfig configuration depends on the CLI configuration:</p> <p>Arista Example:</p> <pre><code>SetRequest:\nprefix:  {\n  target:  \"device-name\"\n}\nreplace:  {\n  path:  {\n    origin:  \"openconfig\"\n  }\n  val:  {\n    json_ietf_val:  \"{\\n  full config omitted \\n}\"\n  }\n}\nupdate:  {\n  path:  {\n    origin:  \"cli\"\n  }\n  val:  {\n    ascii_val:  \"qos traffic-class 0 name target-group-TEST\\nqos tx-queue 0 name TEST\"\n  }\n}\n</code></pre> <p>TODO: Support other vendor CLIs and place examples here.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/mixed_oc_cli_origin_support_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>origin: \"cli\"</li> <li>/qos/forwarding-groups/forwarding-group/config/output-queue</li> <li>/qos/queues/queue/config/name</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/cliorigin/tests/mixed_oc_cli_origin_support_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>None</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/get/tests/system_gnmi_get_test/","title":"gNMI-1.9: Get requests","text":"<p>TODO(robshakir): fill in test plan from code already written.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/metadata/tests/annotation_test/","title":"gNMI-1.8: Configuration Metadata-only Retrieve and Replace","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/metadata/tests/annotation_test/#summary","title":"Summary","text":"<p>Ensure that when a replace operation is done on the metadata-only path metadata is replaced, ensure that metadata can be received and is persisted over a device reboot.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/metadata/tests/annotation_test/#procedure","title":"Procedure","text":"<ul> <li>Build a protobuf message, marshal, and base64 encode the result.</li> <li>Make a gNMI Set request for the path     <code>/@/openconfig-metadata:protobuf-metadata</code> whose value is the base64 encoded     result.</li> <li>Make a gNMI Get for the same path to retrieve the value back.</li> <li>Validate that the returned value can be base64 decoded, unmarshaled, and     matches the original protobuf.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/metadata/tests/annotation_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<p>No configuration coverage.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/metadata/tests/annotation_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/@/openconfig-metadata:protobuf-metadata</li> </ul> <p>Note: WBB implementations need not support this annotation at paths deeper than the root (i.e., a configuration that contains <code>openconfig-metadata:protobuf-metadata</code> at any level other than under the root can be rejected). The WBB device implementation can map this to an internal path to store the configuration.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/","title":"gNMI-1.15: Set Requests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#summary","title":"Summary","text":"<p>Ensures that the device respects certain gNMI SetRequest corner case behaviors.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#procedure","title":"Procedure","text":"<p>Each test should be implemented as three variants:</p> <ul> <li>RootOp: performs a get-modify-set of the full config at root. The SetRequest     contains one <code>replace</code> operation.</li> <li>ContainerOp: performs a get-modify-set on both <code>/interfaces</code> and     <code>/network-instances</code>. The SetRequest contains two <code>replace</code> operations, one     for each container of the list.</li> <li>ItemOp: SetRequest contains <code>delete</code>, <code>replace</code> or <code>update</code> on the list     items (e.g. under <code>/interfaces/interface[name]</code> and     <code>/network-instances/network-instance[name]</code>).</li> </ul> <p>The results MUST be the same.</p> <p>Notes:</p> <ul> <li>Use <code>--deviation_default_network_instance</code> for the name of the default VRF.</li> <li>Use <code>--deviation_static_protocol_name</code> for the name of the static protocol.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#test-get-and-set","title":"Test: Get and Set","text":"<p>This test checks that the config read from the device can be written back.</p> <ol> <li>Obtain the full config at root using gNMI Get.</li> <li>Deploy the config back to the same device using a gNMI SetRequest.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#test-delete-interface","title":"Test: Delete Interface","text":"<p>This test checks that the config of a physical interface can be reset to the default value using the delete operation.</p> <ol> <li> <p>Initialize the interfaces in the same SetRequest.</p> <ul> <li>Configure <code>dut:port1</code> with the description <code>dut:port1</code>.</li> <li>Configure <code>dut:port2</code> with the description <code>dut:port2</code>.</li> </ul> <p>Verify through telemetry that these interfaces are configured correctly.</p> </li> <li> <p>Delete <code>dut:port1</code> and <code>dut:port2</code> in the same SetRequest.</p> <p>In the ContainerOp variant, delete the interfaces by omission.</p> <p>Verify through telemetry that the interfaces still exist, but the description has been reset to no value.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#test-reuse-ip","title":"Test: Reuse IP","text":"<p>This test checks that the IP address of a deleted interface can be immediately reused by another interface.</p> <p>Allocate two aggregate interface names using netutil.NextAggregateInterface. We refer to them as <code>dut:agg1</code> and <code>dut:agg2</code> below.</p> <ol> <li> <p>Initialize the interfaces in the same SetRequest.</p> <ul> <li>Delete <code>dut:port1</code>, <code>dut:port2</code>, <code>dut:agg1</code> and <code>dut:agg2</code>.</li> <li>Configure <code>dut:agg1</code> with member <code>dut:port1</code> and IP address     192.0.2.1/30.</li> <li>Configure <code>dut:agg2</code> with member <code>dut:port2</code> and IP address     192.0.2.5/30.</li> </ul> <p>Verify through telemetry that these interfaces are configured correctly.</p> </li> <li> <p>Modify the interfaces in the same SetRequest:</p> <ul> <li>Delete <code>dut:agg1</code>.</li> <li>Configure <code>dut:agg2</code> to have the IP address 192.0.2.1/30.</li> </ul> <p>Verify through telemetry that <code>dut:agg2</code> has the correct IP address.</p> </li> <li> <p>Clean up by deleting <code>dut:agg2</code>.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#test-swap-ips","title":"Test: Swap IPs","text":"<p>This test checks that the IP addresses of two interfaces can be swapped in the same SetRequest.</p> <ol> <li> <p>Initialize the interfaces in the same SetRequest:</p> <ul> <li>Configure <code>dut:port1</code> with IP address 192.0.2.1/30.</li> <li>Configure <code>dut:port2</code> with IP address 192.0.2.5/30.</li> </ul> <p>Verify through telemetry that these interfaces are configured correctly.</p> </li> <li> <p>Modify the interfaces in the same SetRequest:</p> <ul> <li>Set <code>dut:port1</code> address to 192.0.2.5/30.</li> <li>Set <code>dut:port2</code> address to 192.0.2.1/30.</li> </ul> <p>Verify through telemetry that the interfaces have the correct IP addresses.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#test-delete-non-existing-vrf","title":"Test: Delete Non-Existing VRF","text":"<p>This test checks that a non-existing VRF can be deleted.</p> <ol> <li> <p>Initialize by making sure the VRF <code>GREEN</code> does not exist.</p> <p>This is no-op for ContainerOp and RootOp. Only ItemOp will generate a DELETE operation in the SetRequest. The request should succeed.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#test-delete-non-default-vrf","title":"Test: Delete Non-Default VRF","text":"<p>This test checks that a non-default VRF can be deleted.</p> <ol> <li> <p>Initialize the interfaces in the same SetRequest:</p> <ul> <li>Configure <code>dut:port1</code> with IP address 192.0.2.1/30.</li> <li>Configure <code>dut:port2</code> with IP address 192.0.2.5/30.</li> <li>Configure a non-default VRF <code>BLUE</code> attaching both interfaces.</li> </ul> <p>Verify through telemetry that these interfaces are configured correctly and attached to the non-default VRF.</p> </li> <li> <p>Clean up by deleting VRF <code>BLUE</code>.</p> <p>Verify through telemetry that the VRF is not present.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#test-move-interfaces-between-vrfs","title":"Test: Move Interfaces Between VRFs","text":"<p>This test checks that interfaces can be moved from one VRF to a different VRF while preserving the interface configs.</p> <p>There should be two variants of this test:</p> <ul> <li>Moving from the default VRF to non-default VRF <code>BLUE</code>.</li> <li>Moving from non-default VRF <code>RED</code> to another non-default VRF <code>BLUE</code>.</li> </ul> <p>Steps:</p> <ol> <li> <p>Initialize the attachment in the same SetRequest:</p> <ul> <li>Configure <code>dut:port1</code> with IP address 192.0.2.1/30.</li> <li>Configure <code>dut:port2</code> with IP address 192.0.2.5/30.</li> <li>Attach both interfaces to the first VRF. Create the first VRF as L3VRF     if it is not the default.</li> </ul> <p>Verify through telemetry that these interfaces are configured correctly and attached to the first VRF.</p> </li> <li> <p>Modify attachment in the same SetRequest:</p> <ul> <li>Detach <code>dut:port1</code> and <code>dut:port2</code> from the first VRF. If the first VRF     is not the default VRF, delete it.</li> <li>In the ContainerOp variant, also replace the interfaces <code>dut:port1</code> and     <code>dut:port2</code> with exactly the same config as before.</li> <li>Configure the second VRF as L3VRF attaching <code>dut:port1</code> and <code>dut:port2</code>.</li> </ul> </li> <li> <p>Verify through telemetry:</p> <ul> <li>The IP addresses of <code>dut:port1</code> and <code>dut:port2</code> are as expected.</li> <li>The <code>dut:port1</code> and <code>dut:port2</code> interfaces are attached to the second     VRF.</li> </ul> </li> <li> <p>Clean up by deleting the second VRF.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#test-static-protocol","title":"Test: Static Protocol","text":"<p>This test checks that the static protocol name is usable.</p> <ol> <li> <p>Initialize the attachment in the same SetRequest:</p> <ul> <li>Configure <code>dut:port1</code> with IP address 192.0.2.1/30.</li> <li>Configure <code>dut:port2</code> with IP address 192.0.2.5/30.</li> <li>Configure a non-default VRF <code>BLUE</code> attaching both interfaces.</li> <li>Configure the static routes in VRF <code>BLUE</code> as follows:<ul> <li>Prefix 198.51.100.0/24 has next-hop 192.0.2.2 and interface     <code>dut:port1</code>.</li> <li>Prefix 203.0.113.0/24 has next-hop 192.0.2.6 and interface     <code>dut:port2</code>.</li> </ul> </li> </ul> <p>Verify through telemetry that the static routes are configured correctly.</p> </li> <li> <p>Modify the static routes in VRF <code>BLUE</code> as follows in the same SetRequest.</p> <ul> <li>Prefix 198.51.100.0/24 has next-hop 192.0.2.6 and interface <code>dut:port2</code>.</li> <li>Prefix 203.0.113.0/24 has next-hop 192.0.2.2 and interface <code>dut:port1</code>.</li> </ul> <p>Verify through telemetry that the static routes are configured correctly.</p> </li> <li> <p>Clean up by deleting VRF <code>BLUE</code>.</p> </li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/gnmi/set/tests/gnmi_set_test/#rpc-coverage","title":"RPC Coverage","text":"<ul> <li>gNMI.Set</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/logging/remote_syslog/otg_tests/","title":"TR-6.1: Remote Syslog feature config","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/logging/remote_syslog/otg_tests/#summary","title":"Summary","text":"<p>Verify configuration of remote syslog host (server) in DEFAULT and non-default VRF.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/logging/remote_syslog/otg_tests/#procedure","title":"Procedure","text":"<ul> <li>connect DUT port-1 with OTG port-1 and DUT port-2 with OTG port-2 </li> <li>Configure DUT $VRF-name network-instance and OTG with:</li> <li>interface(port-1), interface(port-2) with IPv4 and IPv6 address</li> <li>static host routes to syslog servers's addresses pointing OTG interface(port-1) IP</li> <li>loopback interface with IPv4 and IPv6 address and netmasks of /32, /64 respectively</li> <li>Configure  syslog servers DUT</li> <li>Configure 1st IPv4 Syslog remote hosts in $VRF-name with:<ul> <li>facility \u201clocal7\u201d and severity \u201cdebug\u201d</li> <li>(TODO when OC model published) complince to RFC5424 (structured)</li> <li>source address equall to IPv4 address of loopback interface</li> </ul> </li> <li>Configure 2nd IPv4 Syslog remote hosts in $VRF-name with:<ul> <li>facility \u201clocal7\u201d and severity \u201ccritical\u201d </li> <li>(TODO when OC model published) complince to RFC3164 (BSD/original)</li> <li>source address equall to IPv4 address of loopback interface</li> </ul> </li> <li>Configure 3nd IPv6 Syslog remote hosts in $VRF-name with:<ul> <li>non-standard remote port </li> <li>facility \u201clocal1\u201d and severity \u201cdebug\u201d</li> <li>(TODO when OC model published) complince to RFC5424 (structured)</li> <li>source address equall to IPv6 address of loopback interface</li> </ul> </li> <li>Configure 4nd IPv6 Syslog remote hosts in $VRF-name with:<ul> <li>facility \u201clocal7\u201d and severity \u201ccritical\u201d </li> <li>(TODO when OC model published) complince to RFC3164 (BSD/original)</li> <li>source address equall to IPv6 address of loopback interface</li> </ul> </li> <li>Test Procedure </li> <li>Read configuration of all 4 servers, verify it matches intent</li> <li>enable packet capture on OTG port-1</li> <li>disable OTG port-2 so DUT interface(port-2) goes down, what should generate log</li> <li>Observe on OTG capture:<ul> <li>Syslog packet w/ DstIP of host 1st and 4th and standard dstPort.</li> <li>Syslog packet w/ DstIP of host 3rd and non-standard dstPort</li> <li>Note: no packet w/ DstIP of 2nd host is expected.</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/logging/remote_syslog/otg_tests/#test-case-1-default-network-instance","title":"Test Case #1 - Default network instance","text":"<pre><code>* Execute above procedure for $VRF-name = \"DEFAULT\" (default VRF)\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/logging/remote_syslog/otg_tests/#test-case-2-non-default-network-instance","title":"Test Case #2 - Non-Default network instance","text":"<pre><code>* Execute above procedure for $VRF-name = \"VRF-foo\"\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/logging/remote_syslog/otg_tests/#config-parameter-coverage","title":"Config parameter coverage","text":"<ul> <li>/system/logging/remote-servers/remote-server/config/host</li> <li>/system/logging/remote-servers/remote-server/config/network-instance</li> <li>/system/logging/remote-servers/remote-server/config/remote-port</li> <li>/system/logging/remote-servers/remote-server/config/source-address</li> <li>/system/logging/remote-servers/remote-server/selectors/selector/config/facility</li> <li>/system/logging/remote-servers/remote-server/selectors/selector/config/severity</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/logging/remote_syslog/otg_tests/#telemetry-parameter-coverage","title":"Telemetry parameter coverage","text":"<ul> <li>/system/logging/remote-servers/remote-server/state/host</li> <li>/system/logging/remote-servers/remote-server/state/network-instance</li> <li>/system/logging/remote-servers/remote-server/state/remote-port</li> <li>/system/logging/remote-servers/remote-server/state/source-address</li> <li>/system/logging/remote-servers/remote-server/selectors/selector/state/facility</li> <li>/system/logging/remote-servers/remote-server/selectors/selector/state/severity</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/logging/remote_syslog/otg_tests/#dut","title":"DUT","text":"<p>FFF</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/ntp/tests/system_ntp_test/","title":"OC-26.1: Network Time Protocol (NTP)","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/ntp/tests/system_ntp_test/#summary","title":"Summary","text":"<p>Ensure DUT can be configured as a Network Time Protocol (NTP) client.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/ntp/tests/system_ntp_test/#procedure","title":"Procedure","text":"<ul> <li>For the following cases, enable NTP on the DUT and validate telemetry reports the servers are configured:<ul> <li>4x IPv4 NTP server in default VRF</li> <li>4x IPv6 NTP server in default VRF</li> <li>4x IPv4 &amp; 4x IPv6 NTP server in default VRF</li> <li>4x IPv4 NTP server in non-default VRF</li> <li>4x IPv6 NTP server in non-default VRF</li> <li>4x IPv4 &amp; 4x IPv6 NTP server in non-default VRF</li> </ul> </li> </ul> <p>Note:  [TODO]the source address of NTP need to be specified</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/ntp/tests/system_ntp_test/#config-parameter-coverage","title":"Config Parameter Coverage","text":"<ul> <li>/system/ntp/config/enabled</li> <li>/system/ntp/servers/server/config/address</li> <li>[TODO]/system/ntp/servers/server/config/source-address</li> <li>/system/ntp/servers/server/config/network-instance</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/ntp/tests/system_ntp_test/#telemetry-parameter-coverage","title":"Telemetry Parameter Coverage","text":"<ul> <li>/system/ntp/servers/server/state/address</li> <li>[TODO]/system/ntp/servers/server/state/source-address</li> <li>[TODO]/system/ntp/servers/server/state/port</li> <li>/system/ntp/servers/server/state/network-instance</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/tests/system_base_test/","title":"System-1: System testing","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/tests/system_base_test/#summary","title":"Summary","text":"<p>Ensures the device support basic system requirements for a device supporting g* APIs.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/tests/system_base_test/#service-1","title":"service-1","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/tests/system_base_test/#procedure","title":"Procedure","text":"<p>Each test will require the DUT configured with a basic service configuration that should be provided as part of the basic configuration.  This setup should also include any security setup for connecting to the services.</p> <p>The default setup should expect a CA signed certifate and trust bundle which can be used for mTLS.</p> Protocol Port gNMI 9339 gNOI 9339 gNSI 9339 gRIBI 9340 P4RT 9559"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/feature/system/tests/system_base_test/#tests","title":"Tests","text":"ID Case Result service-1.1 gNMI client gNMI Get works service-1.2 gNOI client gNOI system Time works service-1.3 gNSI client gNSI authz Get works service-1.4 gRIBI client gRIBI Get works service-1.5 p4rt client P4RT Capabilities works <ol> <li>Configure DUT with service configurations for all required services</li> <li>Each test will then create a client to those services and valid each service is properly    listening on the standard port.</li> <li>Validate client properly connects and execute a simple RPC to validate no errors are returned.</li> </ol>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/internal/deviations/","title":"Index","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/internal/deviations/#guidelines-to-add-deviations-to-fnt-tests","title":"Guidelines to add deviations to FNT tests","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/internal/deviations/#adding-deviations","title":"Adding Deviations","text":"<ul> <li>Add the deviation to the <code>Deviations</code> message in the proto/metadata.proto file.</li> </ul> <pre><code>message Deviations {\n  ...\n  // Device does not support fragmentation bit for traceroute.\n  bool traceroute_fragmentation = 2;\n  ...\n}\n</code></pre> <ul> <li>Run <code>make proto/metadata_go_proto/metadata.pb.go</code> from your featureprofiles root directory to generate the Go code for the added proto fields.</li> </ul> <pre><code>$ make proto/metadata_go_proto/metadata.pb.go\nmkdir -p proto/metadata_go_proto\n# Set directory to hold symlink\nmkdir -p protobuf-import\n# Remove any existing symlinks &amp; empty directories\nfind protobuf-import -type l -delete\nfind protobuf-import -type d -empty -delete\n# Download the required dependencies\ngo mod download\n# Get ondatra modules we use and create required directory structure\ngo list -f 'protobuf-import/{{ .Path }}' -m github.com/openconfig/ondatra | xargs -L1 dirname | sort | uniq | xargs mkdir -p\ngo list -f '{{ .Dir }} protobuf-import/{{ .Path }}' -m github.com/openconfig/ondatra | xargs -L1 -- ln -s\nprotoc -I='protobuf-import' --proto_path=proto --go_out=./ --go_opt=Mmetadata.proto=proto/metadata_go_proto metadata.proto\ngoimports -w proto/metadata_go_proto/metadata.pb.go\n</code></pre> <ul> <li> <p>Add the accessor function for this deviation to the internal/deviations/deviations.go file. This function will need to accept a parameter <code>dut</code> of type <code>*ondatra.DUTDevice</code> to lookup the deviation value for a specific dut. This accessor function must call <code>lookupDUTDeviations</code> and return the deviation value. Test code will use this function to access deviations.</p> <ul> <li>If the default value of the deviation is the same as the default value for the proto field, the accessor method can directly call the <code>Get*()</code> function for the deviation field. For example, the boolean <code>traceroute_fragmentation</code> deviation, which has a default value of <code>false</code>, will have an accessor method with the single line <code>return lookupDUTDeviations(dut).GetTracerouteFragmentation()</code>.</li> </ul> <pre><code>// TraceRouteFragmentation returns if the device does not support fragmentation bit for traceroute.\n// Default value is false.\nfunc TraceRouteFragmentation(dut *ondatra.DUTDevice) bool {\n  return lookupDUTDeviations(dut).GetTracerouteFragmentation()\n}\n</code></pre> <ul> <li>If the default value of deviation is not the same as the default value of the proto field, the accessor method can add a check and return the required default value. For example, the accessor method for the float <code>hierarchical_weight_resolution_tolerance</code> deviation, which has a default value of <code>0</code>, will call the <code>GetHierarchicalWeightResolutionTolerance()</code> to check the value set in <code>metadata.textproto</code> and return the default value <code>0.2</code> if applicable.</li> </ul> <pre><code>// HierarchicalWeightResolutionTolerance returns the allowed tolerance for BGP traffic flow while comparing for pass or fail conditions.\n// Default minimum value is 0.2. Anything less than 0.2 will be set to 0.2.\nfunc HierarchicalWeightResolutionTolerance(dut *ondatra.DUTDevice) float64 {\n  hwrt := lookupDUTDeviations(dut).GetHierarchicalWeightResolutionTolerance()\n  if minHWRT := 0.2; hwrt &lt; minHWRT {\n    return minHWRT\n  }\n  return hwrt\n}\n</code></pre> </li> <li> <p>Set the deviation value in the <code>metadata.textproto</code> file in the same folder as the test. For example, the deviations used in the test <code>feature/gnoi/system/tests/traceroute_test/traceroute_test.go</code> will be set in the file <code>feature/gnoi/system/tests/traceroute_test/metadata.textproto</code>. List all the vendor and optionally also hardware model regex that this deviation is applicable for.</p> </li> </ul> <pre><code>...\nplatform_exceptions: {\n  platform: {\n    vendor: CISCO\n  }\n  deviations: {\n    traceroute_fragmentation: true\n    traceroute_l4_protocol_udp: true\n  }\n}\n...\n</code></pre> <ul> <li>To access the deviation from the test call the accessor function for the deviation. Pass the dut to this accessor.</li> </ul> <pre><code>if deviations.TraceRouteFragmentation(dut) {\n  ...\n}\n</code></pre> <ul> <li>Example PRs - https://github.com/openconfig/featureprofiles/pull/1649 and   https://github.com/openconfig/featureprofiles/pull/1668</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/internal/deviations/#removing-deviations","title":"Removing Deviations","text":"<ul> <li> <p>Once a deviation is no longer required and removed from all tests, delete the deviation by removing them from the following files:</p> <ul> <li> <p>metadata.textproto - Remove the deviation field from all metadata.textproto in all tests.</p> </li> <li> <p>deviations.go - Remove the accessor method for this deviation.</p> </li> <li> <p>metadata.proto - Remove the deviation field from the <code>Deviations</code> message and reserve the deleted field number by adding the <code>reserved n</code> to the <code>Deviations</code> message.  Ref: https://protobuf.dev/programming-guides/proto3/#deleting</p> </li> </ul> </li> <li> <p>Run <code>make proto/metadata_go_proto/metadata.pb.go</code> from your featureprofiles root directory to update the Go code for the removed proto fields.</p> </li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/internal/deviations/#notes","title":"Notes","text":"<ul> <li>If you run into issues with the <code>make proto/metadata_go_proto/metadata.pb.go</code> you may need to check if the <code>protoc</code> module is installed in your environment. Also depending on your Go version you may need to update your PATH and GOPATH.</li> <li>After running the <code>make proto/metadata_go_proto/metadata.pb.go</code> script, a <code>protobuf-import/</code> folder will be added in your current directory. Keep an eye out for this in case you use <code>git add .</code> to add modified files since this folder should not be part of your PR.</li> </ul>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/addrundata/","title":"The <code>addrundata</code> Tool","text":"<p>The <code>addrundata</code> tool keeps all the <code>metadata.textproto</code> files up to date in the featureprofiles repo. These files contain rundata that identify each test, and the rundata will find its way into the test XML output when a functional test is run with the <code>-xml</code> flag. The rundata allow us to track the test result.</p> <p>There are two modes of operation:</p> <ul> <li> <p>Check mode: <code>go run ./tools/addrundata</code></p> <p>When run without a flag, this checks the integrity of rundata in the repo. This is used by the \"Rundata Check\" pull request check. If the check fails, we will not be able to track the test result from those tests with outdated rundata.</p> </li> <li> <p>Fix mode: <code>go run ./tools/addrundata --fix</code></p> <p>This will update any outdated rundata, to be run by the author of a pull request if the \"Rundata Check\" fails.</p> </li> </ul> <p>An example <code>metadata.textproto</code> looks like this:</p> <pre><code># proto-file: proto/metadata.proto\n# proto-message: Metadata\n\nuuid: \"bf60afdc-7130-4bef-a23c-39783c7f2bb3\"\nplan_id: \"XX-1.1\"\ndescription: \"Foo Functional Test\"\n</code></pre> <p>Both <code>plan_id</code> and <code>description</code> are sourced from the top-level heading in <code>README.md</code>:</p> <pre><code># XX-1.1: Foo Functional Test\n\n## Summary\n\nOne line summary of what foo functional test does.\n</code></pre> <p>But the <code>uuid</code> is uniquely generated for each test. The <code>addrundata</code> tool takes care of the UUID generation. Both the <code>ate_tests</code> and <code>otg_tests</code> variants of the same test must have the same rundata.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/","title":"ci-trigger","text":"<p>CI Trigger is a Google Cloud Run container that manages FeatureProfiles CI events.  The Cloud Run container uses the GitHub API to inspect pull requests and identify changes.  If a pull request changes Ondatra tests, an authorized user can comment in the pull request to cause CI Trigger to launch a Google Cloud Build task to validate tests on various virtual/hardware platforms.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#design","title":"Design","text":"<p>CI Trigger responds to 3 types of events:</p> <ul> <li>GitHub WebHook - Pull Requests</li> <li>GitHub WebHook - Issue Comments</li> <li>Cloud PubSub - Badge Updates</li> </ul> <p>On a Pull Request <code>opened</code> (new) or <code>synchronize</code> (updated) event, CI Trigger will fetch the git branch and inspect changes between the base and head branches. If there are any changed files in an Ondatra test directory, the test is marked as modified. Badge icons are initialized for the commit ID into Cloud Storage and a comment is posted to the pull request containing a summary of all the changes. Virtual tests are automatically launched if the PR author is authorized to run tests.</p> <p>On an Issue Comment <code>created</code> event, CI Trigger will check if the comment was made by an authorized user and contains a keyword to launch tests in a pull request. A job will be created for each device type requested to launch tests. Virtual tests are executed using Cloud Build, while physical tests are sent via pubsub message to another execution system. Badge status icons will be updated to mark that the test has been launched.</p> <p>On a PubSub topic, CI Trigger listens for test status updates coming from Cloud Build tests.  Badge icons are updated based on the messages received.</p> <p>A pull request is expected to traverse through these status codes:</p> State Description pending authorization An authorized user must comment in the pull request to start the process. setup A Cloud Build job has been created for the pull request. pending execution The Cloud Build job has started. environment setup KNE topology is being configured. running Ondatra test is running. success or failure Test has completed."},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#setup","title":"Setup","text":"<p>The installation is a one-time process and these steps are documented for reference.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#github","title":"GitHub","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#repository-configuration","title":"Repository Configuration","text":"<p>In the Featureprofiles repository settings, create a webhook.  The secret will be configured in Cloud Secrets as the Webhook Secret.  Use \"Let me select individual events\" and select \"Issue Comments\" and \"Pull Requests\".  Unselect other events like \"Pushes\".</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#robot-user-configuration","title":"Robot User Configuration","text":"<p>Create a fine-grained personal access token on the GitHub bot account.  Set the Resource owner to \"openconfig\" and select the \"featureprofiles\" repository.  The user needs Read and Write access to \"Pull Requests\".  It also needs Read-Only access to organization \"Members\".  The access token generated will be used in Cloud Secrets as the API Secret.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#google-cloud","title":"Google Cloud","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#cloud-object-storage","title":"Cloud Object Storage","text":"<p>A bucket for badge icons is required and needs to be world-readable.  This bucket will contain only small SVG objects.</p> <pre><code>gcloud storage buckets create gs://featureprofiles-ci --project=disco-idea-817 --default-storage-class=STANDARD --location=US --uniform-bucket-level-access\n</code></pre> <p>A second bucket is used by Cloud Build for running tests.  The objects in this bucket are the contents of the featureprofiles git repository checked out at the pull request commit.  Because this bucket could grow large over time, an expiration policy is used on objects.  Note that this bucket may already exist because Cloud Build creates it by default.</p> <pre><code>gcloud storage buckets create gs://disco-idea-817_cloudbuild --project=disco-idea-817 --default-storage-class=STANDARD --location=US --uniform-bucket-level-access\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#cloud-pubsub-topic","title":"Cloud PubSub Topic","text":"<pre><code>gcloud pubsub topics create featureprofiles-badge-status\ngcloud pubsub subscriptions create featureprofiles-badge-status --topic featureprofiles-badge-status\ngcloud pubsub topics add-iam-policy-binding featureprofiles-badge-status --member=\"serviceAccount:serviceAccountName@developer.gserviceaccount.com\" --role=\"roles/pubsub.publisher\"\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#cloud-run-deployment","title":"Cloud Run Deployment","text":"<p>An Artifact Repository is required for the container image:</p> <pre><code>gcloud artifacts repositories create featureprofiles-ci --repository-format=docker --location=us-west1\n</code></pre> <p>To build the release locally and upload using Docker:</p> <pre><code>docker build . -t featureprofiles-ci-trigger -f tools/ci-trigger/Dockerfile\ndocker tag featureprofiles-ci-trigger:latest us-west1-docker.pkg.dev/disco-idea-817/featureprofiles-ci/featureprofiles-ci-trigger:latest\ndocker push us-west1-docker.pkg.dev/disco-idea-817/featureprofiles-ci/featureprofiles-ci-trigger:latest\n</code></pre> <p>To deploy the container into the project:</p> <pre><code>gcloud run deploy featureprofiles-ci-trigger --cpu 2000m --memory 2Gi --region us-west1 --image us-west1-docker.pkg.dev/disco-idea-817/featureprofiles-ci/featureprofiles-ci-trigger:latest\n</code></pre> <p>Allow for background CPU and a minimum instance count for pubsub pull to continue processing.</p> <pre><code>gcloud run services update featureprofiles-ci-trigger --region us-west1 --no-cpu-throttling --min-instances 1\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#cloud-secrets","title":"Cloud Secrets","text":"<p>Create the secrets and set them.</p> <pre><code>gcloud secrets create featureprofiles-ci-github-webhook --replication-policy=\"automatic\"\necho -n \"secret data\" | gcloud secrets versions add featureprofiles-ci-github-webhook --data-file=-\ngcloud secrets create featureprofiles-ci-api-secret --replication-policy=\"automatic\"\necho -n \"secret data\" | gcloud secrets versions add featureprofiles-ci-api-secret --data-file=-\n\ngcloud secrets add-iam-policy-binding featureprofiles-ci-github-webhook --member=\"serviceAccount:serviceAccountName@developer.gserviceaccount.com\" --role=\"roles/secretmanager.secretAccessor\"\ngcloud secrets add-iam-policy-binding featureprofiles-ci-api-secret --member=\"serviceAccount:serviceAccountName@developer.gserviceaccount.com\" --role=\"roles/secretmanager.secretAccessor\"\n</code></pre> <p>Expose <code>/etc/secrets/github-webhook-secret/github-webhook-secret</code> and <code>/etc/secrets/github-api-secret/github-api-secret</code> to the Cloud Run container.</p> <pre><code>gcloud run deploy featureprofiles-ci-trigger --region us-west1 --image us-west1-docker.pkg.dev/disco-idea-817/featureprofiles-ci/featureprofiles-ci-trigger:latest --update-secrets=/etc/secrets/github-webhook-secret/github-webhook-secret=featureprofiles-ci-github-webhook:latest\ngcloud run deploy featureprofiles-ci-trigger --region us-west1 --image us-west1-docker.pkg.dev/disco-idea-817/featureprofiles-ci/featureprofiles-ci-trigger:latest --update-secrets=/etc/secrets/github-api-secret/github-api-secret=featureprofiles-ci-api-secret:latest\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/ci-trigger/#development","title":"Development","text":"<p>A local copy of the cloud function can be launched with the following commands:</p> <pre><code>export GITHUB_WEBHOOK_SECRET=shared_secret\nexport GITHUB_API_SECRET=api_secret\n\numask 0022\ngo run github.com/openconfig/featureprofiles/tools/ci-trigger -alsologtostderr -badge_pubsub=false\n</code></pre> <p>Alternatively, the docker image can be run locally with the following:</p> <pre><code>docker build -t ci-trigger:latest -f tools/ci-trigger/Dockerfile .\ndocker run -v ~/.config:/root/.config -e GITHUB_WEBHOOK_SECRET -e GITHUB_API_SECRET -p 8080:8080  ci-trigger:latest -alsologtostderr -badge_pubsub=false\n</code></pre> <p>You may need to customize the config.go files based on your environment.  You will also need to have some form of Application Default Credentials available.</p>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/nosimage/","title":"Index","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/nosimage/#using-the-nosimageprofile-validator-script","title":"Using the NOSImageProfile Validator Script","text":""},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/nosimage/#running-on-example-files","title":"Running on Example Files","text":"<pre><code>cd $GOPATH/src/github.com/openconfig/featureprofiles/tools/nosimage\ngo run validate/validate.go -file example/example_nosimageprofile.textproto; rm -rf public\n</code></pre> <pre><code>cd $GOPATH/src/github.com/openconfig/featureprofiles/tools/nosimage\ngo run validate/validate.go -file example/example_nosimageprofile_invalid.textproto; rm -rf public\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/tools/nosimage/#re-generating-example-files","title":"Re-generating Example Files","text":"<pre><code>cd $GOPATH/src/github.com/openconfig/featureprofiles/tools/nosimage\ngo run example/generate_example.go -file-path example/example_nosimageprofile.textproto\ngo run example/generate_example.go -file-path example/example_nosimageprofile_invalid.textproto -invalid\n</code></pre>"},{"location":"examples/otg-examples/hybrid/fp-b2b/featureprofiles/topologies/kne/","title":"KNE Topology Configuration","text":"<p>This directory contains the KNE topology configuration of the following kinds:</p> <ul> <li> <p>The <code>*.textproto</code> files describe the topology elements. These may contain     one or more DUTs with ports connected to other DUTs or OTG ports.</p> </li> <li> <p>The <code>*.cfg</code> files contain the DUT configuration, which are used by     Ondatra reservation to perform a device reset when a test starts.</p> </li> </ul> <p>OTG releases can be found here: https://github.com/open-traffic-generator/ixia-c/releases</p> <p>Each release contains an <code>ixiatg-configmap.yaml</code> which describes the docker image versions required for that release. The docker images should be locally available, and the \"operator\" pods should be brought up.</p> <p>:exclamation: IMPORTANT: change the version in the <code>*.textproto</code> file from <code>\"0.0.1-9999\"</code> to the one used by <code>ixiatg-configmap.yaml</code> before creating the actual KNE topology (e.g change <code>\"0.0.1-9999\"</code> to <code>\"0.0.1-3662\"</code>).</p> <p>A How-To guide for creating KNE topologies can be found at: https://github.com/openconfig/kne/blob/main/docs/README.md</p>"},{"location":"examples/otg-examples/kne/bgp-ceos/","title":"KNE Lab with BGP and traffic via Arista cEOSLab as a DUT","text":""},{"location":"examples/otg-examples/kne/bgp-ceos/#overview","title":"Overview","text":"<p>This lab demonstrates validation of Arista cEOSLab DUT for basic BGP peering, prefix announcements and passing of traffic between announced subnets. To run OTG protocols and flows, Keysight Elastic Network Generator Community Edition with Ixia-c test ports is used.</p> <p>To run the lab, OpenConfig KNE is used on top of a KIND cluster \u2013\u00a0K8s environment running inside a single Docker container.</p> <ul> <li>OpenConfig KNE</li> <li>KIND</li> </ul> <p>OTG test logic is executed using <code>otgen</code> CLI client running in a dedicated K8s POD:</p> <ul> <li><code>otgen</code></li> </ul>"},{"location":"examples/otg-examples/kne/bgp-ceos/#lab-configuration","title":"Lab configuration","text":""},{"location":"examples/otg-examples/kne/bgp-ceos/#diagram","title":"Diagram","text":""},{"location":"examples/otg-examples/kne/bgp-ceos/#layer-3-topology-and-generated-traffic-flows","title":"Layer 3 topology and generated traffic flows","text":""},{"location":"examples/otg-examples/kne/bgp-ceos/#otg","title":"OTG","text":"<p>The lab uses OTG configuration created by <code>otgen</code> with the following properties:</p> <p></p>"},{"location":"examples/otg-examples/kne/bgp-ceos/#prerequisites","title":"Prerequisites","text":"<ul> <li>Arista cEOSLab Docker image. You can register on Arista support website as a Guest to download the image</li> <li>Linux host or VM with sudo permissions. See possible deployment options here<ul> <li><code>build-essential</code> package</li> <li><code>curl</code> utility</li> <li><code>git</code> utility</li> <li>Docker</li> </ul> </li> </ul>"},{"location":"examples/otg-examples/kne/bgp-ceos/#quick-start","title":"Quick start","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone https://github.com/open-traffic-generator/otg-examples.git\ncd otg-examples/kne/bgp-ceos\n</code></pre> </li> <li> <p>To run all the steps necessary to prepare the KNE environment and start the lab, execute:</p> <pre><code>make prereqs deploy start\n</code></pre> </li> <li> <p>Validate the OTG API endpoint is available:</p> <pre><code>kubectl run otgen --image otgen:local -- sleep 1000000\nkubectl exec -it otgen -- /bin/bash\ncurl -k https://service-https-keng-controller.keng-ceos.svc.cluster.local:8443/capabilities/version\nexit\n</code></pre> </li> <li> <p>Run <code>otgen</code> to establish BGP session with <code>r1</code>, announce routes and send traffic between them:</p> <pre><code>kubectl exec -it otgen -- /bin/bash\nexport OTG_API=\"https://service-https-keng-controller.keng-ceos.svc.cluster.local:8443\"\notgen create device -n otg1 -p p1 -l eth1 --ip 192.0.2.1 --prefix 30 --gw 192.0.2.2 | \\\notgen add device    -n otg2 -p p2 -l eth2 --ip 192.0.2.5 --prefix 30 --gw 192.0.2.6 | \\\notgen add bgp -d otg1 --asn 1111 --route 198.51.100.0/24 | \\\notgen add bgp -d otg2 --asn 2222 --route 203.0.113.0/24  | \\\notgen add flow -n f-1-2 --tx otg1 --rx otg2 --src 198.51.100.1 --dst 203.0.113.1 --count 1000 --rate 100 --size 128 | \\\notgen add flow -n f-2-1 --tx otg2 --rx otg1 --dst 198.51.100.1 --src 203.0.113.1 --count 2000 --rate 200 --size 256 | \\\notgen --log info run -k -m flow | otgen transform -m flow | otgen display -m table\nexit\n</code></pre> </li> <li> <p>If you would like to monitor status of BGP sessions from <code>r1</code> perspective, launch a separate SSH session and run:</p> <pre><code>kubectl exec -it r1 -n keng-ceos -- Cli\nen\nwatch show ip bgp summary\n</code></pre> </li> <li> <p>To stop the <code>keng-ceos</code> lab, use</p> <pre><code>make stop\n</code></pre> </li> <li> <p>To remove the KIND cluster with KNE, use</p> <pre><code>make clean\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/kne/bgp-ceos/#virtual-machine-setup-examples","title":"Virtual machine setup examples","text":""},{"location":"examples/otg-examples/kne/bgp-ceos/#multipass-vm","title":"Multipass VM","text":"<pre><code>multipass launch 20.04 -n knevm -c8 -m16G -d64G\nmultipass shell knevm\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install build-essential -y\nsudo apt install docker.io curl git -y\nsudo usermod -aG docker $USER\nlogout\n</code></pre>"},{"location":"examples/otg-examples/kne/bgp-ceos/#google-cloud-compute-instance","title":"Google Cloud Compute Instance","text":"<ol> <li> <p>Deploy the instance</p> <pre><code>MYIP=`curl -s ifconfig.me`\nMYIPSTR=\"$(echo $MYIP | sed 's/\\./-/g')\"\n\ngcloud compute firewall-rules create otg-demo-allow-ssh-${MYIPSTR} --description=\"Allow tcp 22 ingress to any instance tagged as otg-demo-kne\" --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:22 --source-ranges=\"$MYIP/32\" --target-tags=otg-demo-kne\n\ngcloud compute instances create otg-demo-kne \\\n--subnet=default \\\n--machine-type=e2-standard-16 \\\n--image-family=ubuntu-2004-lts \\\n--image-project=ubuntu-os-cloud \\\n--boot-disk-size=100GB \\\n--boot-disk-device-name=otg-demo-kne \\\n--tags=otg-demo-kne\n\ngcloud compute ssh otg-demo-kne\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install build-essential docker.io -y\nsudo usermod -aG docker $USER\nlogout\n</code></pre> </li> <li> <p>Terminate the instance</p> <pre><code>gcloud compute instances stop otg-demo-kne\ngcloud compute instances delete otg-demo-kne\ngcloud compute firewall-rules delete otg-demo-allow-ssh-${MYIPSTR}\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/snappi/conformance/readme/","title":"Open Traffic Generator Conformance Tests","text":"<p>This repository hosts equivalent Go and Python tests written using snappi against a back-to-back connected Ixia-C topology.</p>"},{"location":"examples/otg-examples/snappi/conformance/readme/#prerequisites","title":"Prerequisites","text":"<ul> <li>Recommended OS is Ubuntu LTS release.</li> <li>At least 2 CPU cores</li> <li>At least 6GB RAM</li> <li>At least 10GB Free Hard Disk Space</li> <li>Go 1.17+ or Python 3.6+ (with pip)</li> <li>Docker Engine (Community Edition)</li> </ul>"},{"location":"examples/otg-examples/snappi/conformance/readme/#usage","title":"Usage:","text":"<ol> <li> <p>Clone this repository</p> <pre><code>git clone https://github.com/open-traffic-generator/conformance.git &amp;&amp; cd conformance\n</code></pre> </li> <li> <p>Deploy topology</p> <pre><code># use DP-only distribution of ixia-c\n./do.sh topo new dp\n\n# use CP/DP distribution of ixia-c\n# enter GITHUB PAT instead of password when prompted for credentials\n./do.sh topo new cpdp\n</code></pre> <p>Once deployment is done, <code>test-config.yaml</code> is automatically generated in present working directory and can be used to customize test run</p> </li> <li> <p>Setup and run Go tests</p> <pre><code># run all feature tests against DP-only distribution of ixia-c\n./do.sh gotest -tags=\"dp\" ./feature/b2b/...\n# run all feature tests against CP/DP distribution of ixia-c\n./do.sh gotest -tags=\"all\" ./feature/b2b/...\n\n# run single test\n./do.sh gotest ./feature/b2b/packet/udp/udp_port_value_test.go\n</code></pre> </li> <li> <p>Setup and run Python tests</p> <pre><code># setup test requirements\n./do.sh prepytest\n\n# run all tests against DP-only distribution of ixia-c\n./do.sh pytest -m dp ./feature/b2b/\n# run all tests against CP/DP distribution of ixia-c\n./do.sh pytest ./feature/b2b/\n\n# run single test\n./do.sh pytest ./feature/b2b/packet/udp/test_udp_port_value.py\n</code></pre> </li> <li> <p>Teardown topology</p> <pre><code># remove DP-only distribution of ixia-c\n./do.sh topo rm dp\n\n# remove CP/DP distribution of ixia-c\n./do.sh topo rm cpdp\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/snappi/conformance/readme/#advanced-usage","title":"Advanced Usage:","text":"<ol> <li> <p>Format python code</p> <p>Note that if you submit any code which does not follow proper python format the CI will fail</p> <pre><code># to format python code\n./do.sh pylint\n\n# to format python code for a specific path\n./do.sh pylint features\n</code></pre> </li> <li> <p>Format go code</p> </li> </ol> <p>Note that if you submit any code which does not follow proper go format the CI will fail</p> <pre><code>```sh\n# to format go code\n./do.sh golint\n\n# to format go code for a specific path\n./do.sh golint helpers\n```\n</code></pre> <ol> <li> <p>Run perf tests in Go</p> <pre><code># run single perf test\n./do.sh gotest ./performance/b2b/udp_mesh_flows_perf_test.go\n# run single perf test with lesser number of iterations (default=100)\nOTG_ITERATIONS=2 ./do.sh gotest ./performance/b2b/udp_mesh_flows_perf_test.go\n</code></pre> </li> <li> <p>Run tests against ixia-c B2B deployed on K8S cluster using eth0 as test interface</p> <pre><code># setup K8S cluster\n./do.sh new_k8s_cluster\n# create topology\n./do.sh topo new k8seth0\n# run single test\n./do.sh gotest ./feature/b2b/packet/udp/udp_port_value_eth0_test.go\n# delete topology\n./do.sh topo rm k8seth0\n# delete K8S cluster\n./do.sh rm_k8s_cluster\n</code></pre> </li> <li> <p>Run tests against KNE cluster (Back-To-Back)</p> <pre><code># setup KNE cluster\n./do.sh new_k8s_cluster kne\n# create KNE topology\n./do.sh topo new kneb2b\n# run all back-to-back feature tests\n./do.sh gotest -tags=\"all\" ./feature/b2b/...\n# delete KNE topology\n./do.sh topo rm kneb2b\n# delete KNE cluster\n./do.sh rm_k8s_cluster kne\n</code></pre> </li> <li> <p>Run tests against KNE cluster (Port-Dut-Port)</p> <pre><code># setup KNE cluster\n./do.sh new_k8s_cluster kne arista\n# create KNE topology\n./do.sh topo new knepdp arista\n# run all port-dut-port feature tests\n./do.sh gotest -tags=\"all\" ./feature/pdp/...\n# delete KNE topology\n./do.sh topo rm knepdp arista\n# delete KNE cluster\n./do.sh rm_k8s_cluster kne arista\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/snappi/conformance/feature/b2b/readme/","title":"OTG Back-To-Back (B2B) Tests","text":"<p>This directory contains tests that can be executed against a topology where one OTG port is back-to-back connected to another OTG port.</p>"},{"location":"examples/otg-examples/submodules/otgen/","title":"OTGen: Open Traffic Generator CLI Tool","text":""},{"location":"examples/otg-examples/submodules/otgen/#how-to-use","title":"How to use","text":"<p>The idea behind <code>otgen</code> is to leverage shell pipe capabilities to break OTG API interactions into multiple stages with output of one feeding to the next. This way, each individual stage can be:</p> <ul> <li>easily parameterized, </li> <li>individually re-used,</li> <li>when needed, substituted by a custom implementation</li> </ul> <p>The shell pipe workflow on <code>otgen</code> looks the following:</p> <pre><code>otgen create flow -s 1.1.1.1 -d 2.2.2.2 -p 80 --rate 1000 | \\\notgen add flow -n f2 -s 2.2.2.2 -d 1.1.1.1 --sport 80 --dport 1024 --tx p2 --rx p1 | \\\notgen run -k --metrics flow | \\\notgen transform --metrics flow --counters frames | \\\notgen display --mode table\n</code></pre> <p>Port locations are read from <code>ENV:OTG_LOCATION_P1</code> and <code>ENV:OTG_LOCATION_P2</code>.</p> <p>See Environmental variables section for more options.</p>"},{"location":"examples/otg-examples/submodules/otgen/#installation","title":"Installation","text":"<p><code>otgen</code> is distributed as a precompiled binary for Linux and MacOS. You can also build it from source for any other platform supported by Go language.</p>"},{"location":"examples/otg-examples/submodules/otgen/#install-script","title":"Install script","text":"<p><code>otgen</code> can be installed using the installation script which detects the operating system type and installs the relevant binary:</p> <pre><code># download and install the latest release (may require sudo)\nbash -c \"$(curl -sL https://get.otgcdn.net/otgen)\"\n\n# download a specific version - 0.4.0 in this example (may require sudo)\nbash -c \"$(curl -sL https://get.otgcdn.net/otgen)\" -- -v 0.4.0\n\n# with wget\nbash -c \"$(wget -qO - https://get.otgcdn.net/otgen)\"\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#manually-download","title":"Manually download","text":"<p>To manually select and download a TAR archive with a precompiled <code>otgen</code> binary for your platform use <code>otgen releases</code> page.</p>"},{"location":"examples/otg-examples/submodules/otgen/#command-reference","title":"Command reference","text":""},{"location":"examples/otg-examples/submodules/otgen/#global-options","title":"Global options","text":"<pre><code>otgen \n  [--log level]                       # Logging level: err | warn | info | debug (default \"err\")\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#create-and-add","title":"<code>create</code> and <code>add</code>","text":"<p>Create a new OTG configuration item that can be further passed to stdin of <code>otgen run</code> command. The <code>add</code> variant of the command first reads an OTG configuration from stdin.</p> <pre><code>otgen create flow                     # Create a configuration for a Traffic Flow\n  [--name string]                     # Flow name (default f1)\n  [--tx string]                       # Test port name for TX (default p1) \n  [--rx string]                       # Test port name for RX (default p2) \n  [--txl string]                      # Test port location string for TX (default localhost:5555) \n  [--rxl string]                      # Test port location string for RX (default localhost:5556) \n  [--ipv4 ]                           # IP version 4 (default)\n  [--ipv6 ]                           # IP version 6\n  [--proto icmp | tcp | udp]          # IP transport protocol\n  [--smac xx.xx.xx.xx.xx.xx]          # Source MAC address. For device-bound flows, default value is copied from the Tx device\n  [--dmac xx.xx.xx.xx.xx.xx]          # Destination MAC address. For device-bound flows, default value \"auto\" enables ARP for IPv4 / ND for IPv6\n  [--src x.x.x.x]                     # Source IP address\n  [--dst x.x.x.x]                     # Destination IP address\n  [--sport N]                         # Source TCP or UDP port. If not specified, incrementing source port numbers would be used for each new packet\n  [--dport N]                         # Destination TCP or UDP port (default 7 - echo protocol)\n  [--swap]                            # Swap default values of: Tx and Rx names and locations; source and destination MACs, IPs and TCP/UDP ports\n  [--count N]                         # Number of packets to transmit. Use 0 for continuous mode. (default 1000)\n  [--rate N]                          # Packet rate in packets per second. If not specified, default rate decision would be left to the traffic engine\n  [--size N]                          # Frame size in bytes. If not specified, default frame size decision would be left to the traffic engine\n  [--loss]                            # Enable loss metrics\n  [--latency sf | ct]                 # Enable latency metrics: sf for store_forward | ct for cut_through\n  [--timestamps]                      # Enable metrics timestamps\n  [--nometrics ]                      # Disable flow metrics\n</code></pre> <pre><code>otgen create device                   # Create a configuration for an Emulated Device\n  [--name string]                     # Device name (default otg1)\n  [--port string]                     # Test port name (default p1)\n  [--location string]                 # Test port location string (default localhost:5555)\n  [--mac xx.xx.xx.xx.xx.xx]           # Device MAC address\n  [--ip x.x.x.x]                      # Device IP address\n  [--gw x.x.x.x]                      # Device default gateway\n  [--prefix nn]                       # Device network prefix\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#add-bgp","title":"<code>add bgp</code>","text":"<p>Adds a BGP router to an emulated device in the existing OTG configuration. Typical usage:</p> <pre><code>otgen create device --name r1 | \\\notgen add bgp --device r1 --route 203.0.113.0/24\n</code></pre> <p>Available parameters:</p> <pre><code>otgen add bgp                         # Add a BGP configuration to an Emulated Device\n  [--device string]                   # Device name to add BGP configuration to (default \"otg1\")\n  [--id]                              # Router ID (default is an IP address of the interface the BGP configuration is attached to)\n  [--asn N]                           # Autonomous System Number (default 65534)\n  [--peer x.x.x.x]                    # Peer IP address (default is a GW address of the interface the BGP configuration is attached to)\n  [--type ebgp|ibgp]                  # BGP peering type: ebgp | ibgp (default \"ebgp\")\n  [--route x.x.x.x/nn]                # Route to advertise\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#run","title":"<code>run</code>","text":"<p>Requests OTG API endpoint to:</p> <ul> <li>apply an OTG configuration</li> <li>start Protocols, if any Devices are defined in the configuration</li> <li>run Traffic Flows</li> </ul> <pre><code>otgen run \n  [--api https://otg-api-endpoint]    # URL of OTG API endpoint. Overrides ENV:OTG_API (default \"https://localhost:8443\")\n  [--insecure]                        # Ignore X.509 certificate validation\n  [--file otg.yml | --file otg.json]  # OTG configuration file. If not provided, will use stdin\n  [--yaml | --json]                   # Format of OTG input\n  [--rxbgp 10|2x]                     # How many BGP routes shall we receive to consider the protocol is up. In number routes or multiples of routes advertised (default 1x)\n  [--metrics port,flow,bgp4]          # Metrics types to report as a comma-separated list: \"port\" for PortMetrics, \"flow\" for FlowMetrics, \"bgp4\" for Bgpv4Metrics\n  [--interval 0.5s]                   # Interval to pull OTG metrics. Valid time units are 'ms', 's', 'm', 'h'. Example: 1s (default 0.5s)\n  [--xeta 2]                          # How long to wait before forcing traffic to stop. In multiples of ETA. Example: 1.5 (default 2)\n  [--timeout 120]                     # Maximum total run time, including protocols convergence and running traffic\n  [--protocols auto|ignore|keep]      # Protocols control mode: auto - detect, start and stop; ignore - do not detect, start or stop; keep - detect, start but do not stop\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#transform","title":"<code>transform</code>","text":"<p>Transform raw OTG metrics into a format suitable for further processing. If no parameters is provided, <code>transform</code> validates input for a match with OTG MetricsResponse data structure, and if matched, outputs it as is.</p> <pre><code>otgen transform \n  [--metrics port|flow]               # Metrics type to transform: \n                                      #   \"port\" for PortMetrics\n                                      #   \"flow\" for FlowMetrics\n  [--counters frames|bytes|pps|tput]  # Metric counters to transform:\n                                      #   \"frames\" for frame count (default),\n                                      #   \"bytes\" for byte count,\n                                      #   \"pps\" for frame rate, in packets per second\n                                      #   \"tput\" for throughput, in bytes per second (PortMetrics only)\n  [--file template.tmpl]              # Go template file. If not provided, built-in templates will be used based on provided parameters\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#display","title":"<code>display</code>","text":"<p>Displays metrics of a running test as charts or a table.</p> <pre><code>otgen display\n  [--mode chart|table]               # Display type to show metrics as\n  [--type line]                      # Type of the chart displayed. Currently, only line charts are supported.\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#help","title":"<code>help</code>","text":"<p>For built-in help, use</p> <pre><code>otgen run --help\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#version","title":"<code>version</code>","text":"<p>To check <code>otgen</code> version you have, use</p> <pre><code>otgen version\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/#environmental-variables","title":"Environmental variables","text":"<p>Values of certain parameters in the OTG configuration depend on specifics of the traffic generator deployment. These values would typically stay the same between multiple <code>otgen</code> runs as long as the deployment stays the same. </p> <p>For example:</p> <ul> <li><code>location</code> string of the OTG <code>ports</code> section depends on traffic generator ports available for the test</li> <li>MAC addresses for OTG <code>flows</code> change only after re-deployment of containerized traffic generator components, and don't change in hardware setups</li> </ul> <p>For such parameters it may be more convenient to change default values used by <code>otgen</code> instead of specifying them as command-line arguments.</p> <p>Environmental variables is one of the mechanisms used by <code>otgen</code> to control default values. See below the full list of the variables recognized by <code>otgen</code> to redefine default values.</p> <pre><code>OTG_API                               # URL of OTG API endpoint\n\nOTG_LOCATION_%PORT_NAME%              # location for test port with a name PORT_NAME, for example:\nOTG_LOCATION_P1                       # location for test port \"p1\"\nOTG_LOCATION_P2                       # location for test port \"p2\"\n\nOTG_FLOW_SMAC_P1                      # Source MAC address to use for flows with Tx on port \"p1\"\nOTG_FLOW_DMAC_P1                      # Destination MAC address to use for flows with Tx on port \"p1\"\nOTG_FLOW_SMAC_P2                      # Source MAC address to use for flows with Tx on port \"p2\"\nOTG_FLOW_DMAC_P2                      # Destination MAC address to use for flows with Tx on port \"p2\"\n\nOTG_FLOW_SRC_IPV4                     # Source IPv4 address to use for flows\nOTG_FLOW_DST_IPV4                     # Destination IPv4 address to use for flows\nOTG_FLOW_SRC_IPV6                     # Source IPv6 address to use for flows\nOTG_FLOW_DST_IPV6                     # Destination IPv6 address to use for flows\n</code></pre> <p>These are the values <code>otgen</code> uses if no variables or arguments were provided.</p> <pre><code>export OTG_API=\"https://localhost:8443\"\nexport OTG_LOCATION_P1=\"localhost:5555\"     # ixia-c-traffic-engine for p1 (tx) listening on localhost:5555\nexport OTG_LOCATION_P2=\"localhost:5556\"     # ixia-c-traffic-engine for p2 (rx) listening on localhost:5556\nexport OTG_FLOW_SMAC_P1=\"02:00:00:00:01:aa\"\nexport OTG_FLOW_DMAC_P1=\"02:00:00:00:02:aa\"\nexport OTG_FLOW_SMAC_P2=\"02:00:00:00:02:aa\"\nexport OTG_FLOW_DMAC_P2=\"02:00:00:00:01:aa\"\nexport OTG_FLOW_SRC_IPV4=\"192.0.2.1\"\nexport OTG_FLOW_DST_IPV4=\"192.0.2.2\"\nexport OTG_FLOW_SRC_IPV6=\"fe80::000:00ff:fe00:01aa\"\nexport OTG_FLOW_DST_IPV6=\"fe80::000:00ff:fe00:02aa\"\n</code></pre> <p>Note, default values displayed via built-in <code>--help</code> output reflect currently set environmental variables values, except for test port location strings.</p>"},{"location":"examples/otg-examples/submodules/otgen/BUILD/","title":"Building instructions","text":""},{"location":"examples/otg-examples/submodules/otgen/BUILD/#prerequisites","title":"Prerequisites","text":"<ol> <li>Go</li> <li>Cobra-cli</li> <li>GoReleaser https://goreleaser.com/install/, for example <code>go install github.com/goreleaser/goreleaser@v1.6</code></li> </ol>"},{"location":"examples/otg-examples/submodules/otgen/BUILD/#build-history","title":"Build history","text":""},{"location":"examples/otg-examples/submodules/otgen/BUILD/#cobra","title":"Cobra","text":"<pre><code>go mod init github.com/open-traffic-generator/otgen\ncobra-cli init --license mit --author \"Open Traffic Generator\"\ncobra-cli add run --license mit --author \"Open Traffic Generator\"\ncobra-cli add version --license mit --author \"Open Traffic Generator\"\ncobra-cli add transform --license mit --author \"Open Traffic Generator\"\ncobra-cli add display --license mit --author \"Open Traffic Generator\"\ncobra-cli add create --license mit --author \"Open Traffic Generator\"\ncobra-cli add add --license mit --author \"Open Traffic Generator\"\ncobra-cli add flow --license mit --author \"Open Traffic Generator\" # subcommand for create and add\ncobra-cli add device --license mit --author \"Open Traffic Generator\" # subcommand for create and add\ncobra-cli add bgp --license mit --author \"Open Traffic Generator\" # subcommand for add\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/BUILD/#goreleaser","title":"GoReleaser","text":"<pre><code>goreleaser init\ngoreleaser build --single-target --snapshot --rm-dist\ngoreleaser release --snapshot --rm-dist\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/BUILD/#build","title":"Build","text":"<pre><code>go get\ngo mod tidy\ngo build -ldflags=\"-X 'github.com/open-traffic-generator/otgen/cmd.version=v0.0.0-${USER}'\"\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/BUILD/#test","title":"Test","text":""},{"location":"examples/otg-examples/submodules/otgen/BUILD/#submodules","title":"Submodules","text":"<p>Parts of the <code>test</code> hierarchy are coming from submodules. To update content of the submodules to the most recent one, use:</p> <pre><code>git submodule update --remote\n</code></pre>"},{"location":"examples/otg-examples/submodules/otgen/BUILD/#create","title":"<code>create</code>","text":"<p>See <code>tests</code> in <code>Makefile</code></p>"},{"location":"examples/otg-examples/submodules/otgen/BUILD/#transform","title":"<code>transform</code>","text":"<ol> <li> <p>Parameters</p> <ul> <li> <p>Port metrics</p> <pre><code>cat test/transform/port_metrics.json | ./otgen transform                   | diff test/transform/port_metrics_passthrough.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port           | diff test/transform/port_metrics_frames.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port -c frames | diff test/transform/port_metrics_frames.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port -c bytes  | diff test/transform/port_metrics_bytes.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port -c pps    | diff test/transform/port_metrics_frame_rate.json -\ncat test/transform/port_metrics.json | ./otgen transform -m port -c tput   | diff test/transform/port_metrics_byte_rate.json -\n</code></pre> </li> <li> <p>Flow metrics</p> <pre><code>cat test/transform/flow_metrics.json | ./otgen transform                   | diff test/transform/flow_metrics_passthrough.json -\ncat test/transform/flow_metrics.json | ./otgen transform -m flow           | diff test/transform/flow_metrics_frames.json -\ncat test/transform/flow_metrics.json | ./otgen transform -m flow -c frames | diff test/transform/flow_metrics_frames.json -\ncat test/transform/flow_metrics.json | ./otgen transform -m flow -c bytes  | diff test/transform/flow_metrics_bytes.json -\ncat test/transform/flow_metrics.json | ./otgen transform -m flow -c pps    | diff test/transform/flow_metrics_frame_rate.json -\n</code></pre> </li> </ul> </li> <li> <p>Templates - JSON</p> <ul> <li> <p>Port metrics</p> <pre><code>cat test/transform/port_metrics.json | ./otgen transform -f templates/transformPassThrough.tmpl   | diff test/transform/port_metrics_passthrough.json -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortFrames.tmpl    | diff test/transform/port_metrics_frames.json -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortBytes.tmpl     | diff test/transform/port_metrics_bytes.json -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortFrameRate.tmpl | diff test/transform/port_metrics_frame_rate.json -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortByteRate.tmpl  | diff test/transform/port_metrics_byte_rate.json -\n</code></pre> </li> <li> <p>Flow metrics</p> <pre><code>cat test/transform/flow_metrics.json | ./otgen transform -f templates/transformPassThrough.tmpl   | diff test/transform/flow_metrics_passthrough.json -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowFrames.tmpl    | diff test/transform/flow_metrics_frames.json -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowBytes.tmpl     | diff test/transform/flow_metrics_bytes.json -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowFrameRate.tmpl | diff test/transform/flow_metrics_frame_rate.json -\n</code></pre> </li> </ul> </li> <li> <p>Templates - Tables</p> <ul> <li> <p>Port metrics</p> <pre><code>cat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortFramesTable.tmpl    | diff test/transform/port_metrics_frames_table.txt -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortBytesTable.tmpl     | diff test/transform/port_metrics_bytes_table.txt -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortFrameRateTable.tmpl | diff test/transform/port_metrics_frame_rate_table.txt -\ncat test/transform/port_metrics.json | ./otgen transform -f templates/transformPortByteRateTable.tmpl  | diff test/transform/port_metrics_byte_rate_table.txt -\n</code></pre> </li> <li> <p>Flow metrics</p> <pre><code>cat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowFramesTable.tmpl    | diff test/transform/flow_metrics_frames_table.txt -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowBytesTable.tmpl     | diff test/transform/flow_metrics_bytes_table.txt -\ncat test/transform/flow_metrics.json | ./otgen transform -f templates/transformFlowFrameRateTable.tmpl | diff test/transform/flow_metrics_frame_rate_table.txt -\n</code></pre> </li> </ul> </li> <li> <p>Full pipe with port metrics</p> <pre><code>cat ../otg.b2b.json | ./otgen run -k 2&gt;/dev/null | ./otgen transform -m port\n</code></pre> </li> </ol>"},{"location":"examples/otg-examples/submodules/otgen/BUILD/#display","title":"<code>display</code>","text":"<p>Currently, only for visual inspection</p> <ol> <li> <p>Charts</p> <pre><code>cat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c frames | ./otgen display --mode chart --type line\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c bytes  | ./otgen display --mode chart --type line\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c pps    | ./otgen display --mode chart --type line\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c tput   | ./otgen display --mode chart --type line\n\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c frames | ./otgen display --mode chart --type line\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c bytes  | ./otgen display --mode chart --type line\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c pps    | ./otgen display --mode chart --type line\n</code></pre> </li> <li> <p>Table</p> <pre><code>cat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c frames | ./otgen display --mode table\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c bytes  | ./otgen display --mode table\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c pps    | ./otgen display --mode table\ncat test/transform/port_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m port -c tput   | ./otgen display --mode table\n\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c frames | ./otgen display --mode table\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c bytes  | ./otgen display --mode table\ncat test/transform/flow_metrics.json | ./test/transform/delay.sh 0.5 | ./otgen transform -m flow -c pps    | ./otgen display --mode table\n</code></pre> </li> </ol>"}]}